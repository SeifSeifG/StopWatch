
StopWatch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d8c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00002d8c  00002e20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000027  0080006c  0080006c  00002e2c  2**0
                  ALLOC
  3 .stab         00002ca0  00000000  00000000  00002e2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000143d  00000000  00000000  00005acc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006f09  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007049  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000071b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008e02  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009ced  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000aa9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000abfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ae89  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b657  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__vector_1>
       8:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <__vector_2>
       c:	0c 94 e8 05 	jmp	0xbd0	; 0xbd0 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 12 06 	jmp	0xc24	; 0xc24 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e8       	ldi	r30, 0x8C	; 140
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 36       	cpi	r26, 0x6C	; 108
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e6       	ldi	r26, 0x6C	; 108
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 39       	cpi	r26, 0x93	; 147
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <main>
      8a:	0c 94 c4 16 	jmp	0x2d88	; 0x2d88 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 8d 16 	jmp	0x2d1a	; 0x2d1a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a9 16 	jmp	0x2d52	; 0x2d52 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 99 16 	jmp	0x2d32	; 0x2d32 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b5 16 	jmp	0x2d6a	; 0x2d6a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 99 16 	jmp	0x2d32	; 0x2d32 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b5 16 	jmp	0x2d6a	; 0x2d6a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 8d 16 	jmp	0x2d1a	; 0x2d1a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a9 16 	jmp	0x2d52	; 0x2d52 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 99 16 	jmp	0x2d32	; 0x2d32 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 b5 16 	jmp	0x2d6a	; 0x2d6a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 99 16 	jmp	0x2d32	; 0x2d32 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 b5 16 	jmp	0x2d6a	; 0x2d6a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 99 16 	jmp	0x2d32	; 0x2d32 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 b5 16 	jmp	0x2d6a	; 0x2d6a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 9d 16 	jmp	0x2d3a	; 0x2d3a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 b9 16 	jmp	0x2d72	; 0x2d72 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <__vector_1>:
/**
 * @brief External interrupt 0 ISR.
 * Resets time and mode.
 */
ISR(INT0_vect)
{
     b46:	1f 92       	push	r1
     b48:	0f 92       	push	r0
     b4a:	0f b6       	in	r0, 0x3f	; 63
     b4c:	0f 92       	push	r0
     b4e:	11 24       	eor	r1, r1
     b50:	8f 93       	push	r24
     b52:	df 93       	push	r29
     b54:	cf 93       	push	r28
     b56:	cd b7       	in	r28, 0x3d	; 61
     b58:	de b7       	in	r29, 0x3e	; 62
	g_SevenSeg_time.Hour = 0;
     b5a:	10 92 68 00 	sts	0x0068, r1
	g_SevenSeg_time.Min = 0;
     b5e:	10 92 69 00 	sts	0x0069, r1
	g_SevenSeg_time.Sec = 0;
     b62:	10 92 6a 00 	sts	0x006A, r1
	g_mode = INCREMENTAL_MODE;
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	80 93 6b 00 	sts	0x006B, r24
}
     b6c:	cf 91       	pop	r28
     b6e:	df 91       	pop	r29
     b70:	8f 91       	pop	r24
     b72:	0f 90       	pop	r0
     b74:	0f be       	out	0x3f, r0	; 63
     b76:	0f 90       	pop	r0
     b78:	1f 90       	pop	r1
     b7a:	18 95       	reti

00000b7c <__vector_2>:
/**
 * @brief External interrupt 1 ISR.
 * Pauses stopwatch by turning off Timer1.
 */
ISR(INT1_vect)
{
     b7c:	1f 92       	push	r1
     b7e:	0f 92       	push	r0
     b80:	0f b6       	in	r0, 0x3f	; 63
     b82:	0f 92       	push	r0
     b84:	11 24       	eor	r1, r1
     b86:	2f 93       	push	r18
     b88:	3f 93       	push	r19
     b8a:	4f 93       	push	r20
     b8c:	5f 93       	push	r21
     b8e:	6f 93       	push	r22
     b90:	7f 93       	push	r23
     b92:	8f 93       	push	r24
     b94:	9f 93       	push	r25
     b96:	af 93       	push	r26
     b98:	bf 93       	push	r27
     b9a:	ef 93       	push	r30
     b9c:	ff 93       	push	r31
     b9e:	df 93       	push	r29
     ba0:	cf 93       	push	r28
     ba2:	cd b7       	in	r28, 0x3d	; 61
     ba4:	de b7       	in	r29, 0x3e	; 62
	Timer1_OFF();
     ba6:	0e 94 39 12 	call	0x2472	; 0x2472 <Timer1_OFF>
}
     baa:	cf 91       	pop	r28
     bac:	df 91       	pop	r29
     bae:	ff 91       	pop	r31
     bb0:	ef 91       	pop	r30
     bb2:	bf 91       	pop	r27
     bb4:	af 91       	pop	r26
     bb6:	9f 91       	pop	r25
     bb8:	8f 91       	pop	r24
     bba:	7f 91       	pop	r23
     bbc:	6f 91       	pop	r22
     bbe:	5f 91       	pop	r21
     bc0:	4f 91       	pop	r20
     bc2:	3f 91       	pop	r19
     bc4:	2f 91       	pop	r18
     bc6:	0f 90       	pop	r0
     bc8:	0f be       	out	0x3f, r0	; 63
     bca:	0f 90       	pop	r0
     bcc:	1f 90       	pop	r1
     bce:	18 95       	reti

00000bd0 <__vector_3>:
/**
 * @brief External interrupt 2 ISR.
 * Resumes stopwatch by turning on Timer1.
 */
ISR(INT2_vect)
{
     bd0:	1f 92       	push	r1
     bd2:	0f 92       	push	r0
     bd4:	0f b6       	in	r0, 0x3f	; 63
     bd6:	0f 92       	push	r0
     bd8:	11 24       	eor	r1, r1
     bda:	2f 93       	push	r18
     bdc:	3f 93       	push	r19
     bde:	4f 93       	push	r20
     be0:	5f 93       	push	r21
     be2:	6f 93       	push	r22
     be4:	7f 93       	push	r23
     be6:	8f 93       	push	r24
     be8:	9f 93       	push	r25
     bea:	af 93       	push	r26
     bec:	bf 93       	push	r27
     bee:	ef 93       	push	r30
     bf0:	ff 93       	push	r31
     bf2:	df 93       	push	r29
     bf4:	cf 93       	push	r28
     bf6:	cd b7       	in	r28, 0x3d	; 61
     bf8:	de b7       	in	r29, 0x3e	; 62
	Timer1_ON();
     bfa:	0e 94 55 12 	call	0x24aa	; 0x24aa <Timer1_ON>
}
     bfe:	cf 91       	pop	r28
     c00:	df 91       	pop	r29
     c02:	ff 91       	pop	r31
     c04:	ef 91       	pop	r30
     c06:	bf 91       	pop	r27
     c08:	af 91       	pop	r26
     c0a:	9f 91       	pop	r25
     c0c:	8f 91       	pop	r24
     c0e:	7f 91       	pop	r23
     c10:	6f 91       	pop	r22
     c12:	5f 91       	pop	r21
     c14:	4f 91       	pop	r20
     c16:	3f 91       	pop	r19
     c18:	2f 91       	pop	r18
     c1a:	0f 90       	pop	r0
     c1c:	0f be       	out	0x3f, r0	; 63
     c1e:	0f 90       	pop	r0
     c20:	1f 90       	pop	r1
     c22:	18 95       	reti

00000c24 <__vector_7>:
/**
 * @brief Timer1 Compare Match A ISR.
 * Increments or decrements seconds depending on mode.
 */
ISR(TIMER1_COMPA_vect)
{
     c24:	1f 92       	push	r1
     c26:	0f 92       	push	r0
     c28:	0f b6       	in	r0, 0x3f	; 63
     c2a:	0f 92       	push	r0
     c2c:	11 24       	eor	r1, r1
     c2e:	2f 93       	push	r18
     c30:	3f 93       	push	r19
     c32:	4f 93       	push	r20
     c34:	5f 93       	push	r21
     c36:	6f 93       	push	r22
     c38:	7f 93       	push	r23
     c3a:	8f 93       	push	r24
     c3c:	9f 93       	push	r25
     c3e:	af 93       	push	r26
     c40:	bf 93       	push	r27
     c42:	ef 93       	push	r30
     c44:	ff 93       	push	r31
     c46:	df 93       	push	r29
     c48:	cf 93       	push	r28
     c4a:	cd b7       	in	r28, 0x3d	; 61
     c4c:	de b7       	in	r29, 0x3e	; 62
	if (g_mode == INCREMENTAL_MODE)
     c4e:	80 91 6b 00 	lds	r24, 0x006B
     c52:	81 30       	cpi	r24, 0x01	; 1
     c54:	19 f4       	brne	.+6      	; 0xc5c <__vector_7+0x38>
	{
		IncSec();
     c56:	0e 94 b0 07 	call	0xf60	; 0xf60 <IncSec>
     c5a:	02 c0       	rjmp	.+4      	; 0xc60 <__vector_7+0x3c>
	}
	else // DECREMENTAL_MODE
	{
		DecSec();
     c5c:	0e 94 c5 07 	call	0xf8a	; 0xf8a <DecSec>
	}
}
     c60:	cf 91       	pop	r28
     c62:	df 91       	pop	r29
     c64:	ff 91       	pop	r31
     c66:	ef 91       	pop	r30
     c68:	bf 91       	pop	r27
     c6a:	af 91       	pop	r26
     c6c:	9f 91       	pop	r25
     c6e:	8f 91       	pop	r24
     c70:	7f 91       	pop	r23
     c72:	6f 91       	pop	r22
     c74:	5f 91       	pop	r21
     c76:	4f 91       	pop	r20
     c78:	3f 91       	pop	r19
     c7a:	2f 91       	pop	r18
     c7c:	0f 90       	pop	r0
     c7e:	0f be       	out	0x3f, r0	; 63
     c80:	0f 90       	pop	r0
     c82:	1f 90       	pop	r1
     c84:	18 95       	reti

00000c86 <SevenSegmentUpdate>:

/**
 * @brief Refreshes the seven segment display with the current time.
 */
void SevenSegmentUpdate()
{
     c86:	df 93       	push	r29
     c88:	cf 93       	push	r28
     c8a:	cd b7       	in	r28, 0x3d	; 61
     c8c:	de b7       	in	r29, 0x3e	; 62
     c8e:	62 97       	sbiw	r28, 0x12	; 18
     c90:	0f b6       	in	r0, 0x3f	; 63
     c92:	f8 94       	cli
     c94:	de bf       	out	0x3e, r29	; 62
     c96:	0f be       	out	0x3f, r0	; 63
     c98:	cd bf       	out	0x3d, r28	; 61
	uint8* ptr_to_time = (uint8*)&g_SevenSeg_time;
     c9a:	88 e6       	ldi	r24, 0x68	; 104
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	9a 8b       	std	Y+18, r25	; 0x12
     ca0:	89 8b       	std	Y+17, r24	; 0x11
	for(int i = 0; i < NUM_SEVEN_SEGMENTS; i++)
     ca2:	18 8a       	std	Y+16, r1	; 0x10
     ca4:	1f 86       	std	Y+15, r1	; 0x0f
     ca6:	cb c0       	rjmp	.+406    	; 0xe3e <SevenSegmentUpdate+0x1b8>
	{
		// Select current digit
		SET(SEVEN_SEGMENT_MULT_PORT, i);
     ca8:	ab e3       	ldi	r26, 0x3B	; 59
     caa:	b0 e0       	ldi	r27, 0x00	; 0
     cac:	eb e3       	ldi	r30, 0x3B	; 59
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	80 81       	ld	r24, Z
     cb2:	28 2f       	mov	r18, r24
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	0f 84       	ldd	r0, Y+15	; 0x0f
     cba:	02 c0       	rjmp	.+4      	; 0xcc0 <SevenSegmentUpdate+0x3a>
     cbc:	88 0f       	add	r24, r24
     cbe:	99 1f       	adc	r25, r25
     cc0:	0a 94       	dec	r0
     cc2:	e2 f7       	brpl	.-8      	; 0xcbc <SevenSegmentUpdate+0x36>
     cc4:	82 2b       	or	r24, r18
     cc6:	8c 93       	st	X, r24

		if (i & 1) // odd: units digit
     cc8:	8f 85       	ldd	r24, Y+15	; 0x0f
     cca:	98 89       	ldd	r25, Y+16	; 0x10
     ccc:	81 70       	andi	r24, 0x01	; 1
     cce:	90 70       	andi	r25, 0x00	; 0
     cd0:	88 23       	and	r24, r24
     cd2:	f9 f0       	breq	.+62     	; 0xd12 <SevenSegmentUpdate+0x8c>
		{
			WriteSevenSegment(&g_Mult_SevenSegment[i], (*ptr_to_time) % 10);
     cd4:	2f 85       	ldd	r18, Y+15	; 0x0f
     cd6:	38 89       	ldd	r19, Y+16	; 0x10
     cd8:	c9 01       	movw	r24, r18
     cda:	88 0f       	add	r24, r24
     cdc:	99 1f       	adc	r25, r25
     cde:	82 0f       	add	r24, r18
     ce0:	93 1f       	adc	r25, r19
     ce2:	88 0f       	add	r24, r24
     ce4:	99 1f       	adc	r25, r25
     ce6:	ac 01       	movw	r20, r24
     ce8:	41 59       	subi	r20, 0x91	; 145
     cea:	5f 4f       	sbci	r21, 0xFF	; 255
     cec:	e9 89       	ldd	r30, Y+17	; 0x11
     cee:	fa 89       	ldd	r31, Y+18	; 0x12
     cf0:	80 81       	ld	r24, Z
     cf2:	9a e0       	ldi	r25, 0x0A	; 10
     cf4:	69 2f       	mov	r22, r25
     cf6:	0e 94 81 16 	call	0x2d02	; 0x2d02 <__udivmodqi4>
     cfa:	89 2f       	mov	r24, r25
     cfc:	28 2f       	mov	r18, r24
     cfe:	ca 01       	movw	r24, r20
     d00:	62 2f       	mov	r22, r18
     d02:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <WriteSevenSegment>
			ptr_to_time++;
     d06:	89 89       	ldd	r24, Y+17	; 0x11
     d08:	9a 89       	ldd	r25, Y+18	; 0x12
     d0a:	01 96       	adiw	r24, 0x01	; 1
     d0c:	9a 8b       	std	Y+18, r25	; 0x12
     d0e:	89 8b       	std	Y+17, r24	; 0x11
     d10:	18 c0       	rjmp	.+48     	; 0xd42 <SevenSegmentUpdate+0xbc>
		}
		else // even: tens digit
		{
			WriteSevenSegment(&g_Mult_SevenSegment[i], (*ptr_to_time) / 10);
     d12:	2f 85       	ldd	r18, Y+15	; 0x0f
     d14:	38 89       	ldd	r19, Y+16	; 0x10
     d16:	c9 01       	movw	r24, r18
     d18:	88 0f       	add	r24, r24
     d1a:	99 1f       	adc	r25, r25
     d1c:	82 0f       	add	r24, r18
     d1e:	93 1f       	adc	r25, r19
     d20:	88 0f       	add	r24, r24
     d22:	99 1f       	adc	r25, r25
     d24:	ac 01       	movw	r20, r24
     d26:	41 59       	subi	r20, 0x91	; 145
     d28:	5f 4f       	sbci	r21, 0xFF	; 255
     d2a:	e9 89       	ldd	r30, Y+17	; 0x11
     d2c:	fa 89       	ldd	r31, Y+18	; 0x12
     d2e:	80 81       	ld	r24, Z
     d30:	9a e0       	ldi	r25, 0x0A	; 10
     d32:	69 2f       	mov	r22, r25
     d34:	0e 94 81 16 	call	0x2d02	; 0x2d02 <__udivmodqi4>
     d38:	28 2f       	mov	r18, r24
     d3a:	ca 01       	movw	r24, r20
     d3c:	62 2f       	mov	r22, r18
     d3e:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <WriteSevenSegment>
     d42:	80 e0       	ldi	r24, 0x00	; 0
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	a0 e8       	ldi	r26, 0x80	; 128
     d48:	bf e3       	ldi	r27, 0x3F	; 63
     d4a:	8b 87       	std	Y+11, r24	; 0x0b
     d4c:	9c 87       	std	Y+12, r25	; 0x0c
     d4e:	ad 87       	std	Y+13, r26	; 0x0d
     d50:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d52:	6b 85       	ldd	r22, Y+11	; 0x0b
     d54:	7c 85       	ldd	r23, Y+12	; 0x0c
     d56:	8d 85       	ldd	r24, Y+13	; 0x0d
     d58:	9e 85       	ldd	r25, Y+14	; 0x0e
     d5a:	20 e0       	ldi	r18, 0x00	; 0
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	4a e7       	ldi	r20, 0x7A	; 122
     d60:	55 e4       	ldi	r21, 0x45	; 69
     d62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d66:	dc 01       	movw	r26, r24
     d68:	cb 01       	movw	r24, r22
     d6a:	8f 83       	std	Y+7, r24	; 0x07
     d6c:	98 87       	std	Y+8, r25	; 0x08
     d6e:	a9 87       	std	Y+9, r26	; 0x09
     d70:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d72:	6f 81       	ldd	r22, Y+7	; 0x07
     d74:	78 85       	ldd	r23, Y+8	; 0x08
     d76:	89 85       	ldd	r24, Y+9	; 0x09
     d78:	9a 85       	ldd	r25, Y+10	; 0x0a
     d7a:	20 e0       	ldi	r18, 0x00	; 0
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	40 e8       	ldi	r20, 0x80	; 128
     d80:	5f e3       	ldi	r21, 0x3F	; 63
     d82:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d86:	88 23       	and	r24, r24
     d88:	2c f4       	brge	.+10     	; 0xd94 <SevenSegmentUpdate+0x10e>
		__ticks = 1;
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	9e 83       	std	Y+6, r25	; 0x06
     d90:	8d 83       	std	Y+5, r24	; 0x05
     d92:	3f c0       	rjmp	.+126    	; 0xe12 <SevenSegmentUpdate+0x18c>
	else if (__tmp > 65535)
     d94:	6f 81       	ldd	r22, Y+7	; 0x07
     d96:	78 85       	ldd	r23, Y+8	; 0x08
     d98:	89 85       	ldd	r24, Y+9	; 0x09
     d9a:	9a 85       	ldd	r25, Y+10	; 0x0a
     d9c:	20 e0       	ldi	r18, 0x00	; 0
     d9e:	3f ef       	ldi	r19, 0xFF	; 255
     da0:	4f e7       	ldi	r20, 0x7F	; 127
     da2:	57 e4       	ldi	r21, 0x47	; 71
     da4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     da8:	18 16       	cp	r1, r24
     daa:	4c f5       	brge	.+82     	; 0xdfe <SevenSegmentUpdate+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dac:	6b 85       	ldd	r22, Y+11	; 0x0b
     dae:	7c 85       	ldd	r23, Y+12	; 0x0c
     db0:	8d 85       	ldd	r24, Y+13	; 0x0d
     db2:	9e 85       	ldd	r25, Y+14	; 0x0e
     db4:	20 e0       	ldi	r18, 0x00	; 0
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	40 e2       	ldi	r20, 0x20	; 32
     dba:	51 e4       	ldi	r21, 0x41	; 65
     dbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dc0:	dc 01       	movw	r26, r24
     dc2:	cb 01       	movw	r24, r22
     dc4:	bc 01       	movw	r22, r24
     dc6:	cd 01       	movw	r24, r26
     dc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dcc:	dc 01       	movw	r26, r24
     dce:	cb 01       	movw	r24, r22
     dd0:	9e 83       	std	Y+6, r25	; 0x06
     dd2:	8d 83       	std	Y+5, r24	; 0x05
     dd4:	0f c0       	rjmp	.+30     	; 0xdf4 <SevenSegmentUpdate+0x16e>
     dd6:	80 e9       	ldi	r24, 0x90	; 144
     dd8:	91 e0       	ldi	r25, 0x01	; 1
     dda:	9c 83       	std	Y+4, r25	; 0x04
     ddc:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     dde:	8b 81       	ldd	r24, Y+3	; 0x03
     de0:	9c 81       	ldd	r25, Y+4	; 0x04
     de2:	01 97       	sbiw	r24, 0x01	; 1
     de4:	f1 f7       	brne	.-4      	; 0xde2 <SevenSegmentUpdate+0x15c>
     de6:	9c 83       	std	Y+4, r25	; 0x04
     de8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dea:	8d 81       	ldd	r24, Y+5	; 0x05
     dec:	9e 81       	ldd	r25, Y+6	; 0x06
     dee:	01 97       	sbiw	r24, 0x01	; 1
     df0:	9e 83       	std	Y+6, r25	; 0x06
     df2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     df4:	8d 81       	ldd	r24, Y+5	; 0x05
     df6:	9e 81       	ldd	r25, Y+6	; 0x06
     df8:	00 97       	sbiw	r24, 0x00	; 0
     dfa:	69 f7       	brne	.-38     	; 0xdd6 <SevenSegmentUpdate+0x150>
     dfc:	14 c0       	rjmp	.+40     	; 0xe26 <SevenSegmentUpdate+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dfe:	6f 81       	ldd	r22, Y+7	; 0x07
     e00:	78 85       	ldd	r23, Y+8	; 0x08
     e02:	89 85       	ldd	r24, Y+9	; 0x09
     e04:	9a 85       	ldd	r25, Y+10	; 0x0a
     e06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e0a:	dc 01       	movw	r26, r24
     e0c:	cb 01       	movw	r24, r22
     e0e:	9e 83       	std	Y+6, r25	; 0x06
     e10:	8d 83       	std	Y+5, r24	; 0x05
     e12:	8d 81       	ldd	r24, Y+5	; 0x05
     e14:	9e 81       	ldd	r25, Y+6	; 0x06
     e16:	9a 83       	std	Y+2, r25	; 0x02
     e18:	89 83       	std	Y+1, r24	; 0x01
     e1a:	89 81       	ldd	r24, Y+1	; 0x01
     e1c:	9a 81       	ldd	r25, Y+2	; 0x02
     e1e:	01 97       	sbiw	r24, 0x01	; 1
     e20:	f1 f7       	brne	.-4      	; 0xe1e <SevenSegmentUpdate+0x198>
     e22:	9a 83       	std	Y+2, r25	; 0x02
     e24:	89 83       	std	Y+1, r24	; 0x01
		}

		_delay_ms(1);

		// Clear all digit selections
		CLEAR_REG(SEVEN_SEGMENT_MULT_PORT, SEVEN_SEGMENT_MULT_PIN);
     e26:	ab e3       	ldi	r26, 0x3B	; 59
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	eb e3       	ldi	r30, 0x3B	; 59
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 81       	ld	r24, Z
     e30:	80 7c       	andi	r24, 0xC0	; 192
     e32:	8c 93       	st	X, r24
 * @brief Refreshes the seven segment display with the current time.
 */
void SevenSegmentUpdate()
{
	uint8* ptr_to_time = (uint8*)&g_SevenSeg_time;
	for(int i = 0; i < NUM_SEVEN_SEGMENTS; i++)
     e34:	8f 85       	ldd	r24, Y+15	; 0x0f
     e36:	98 89       	ldd	r25, Y+16	; 0x10
     e38:	01 96       	adiw	r24, 0x01	; 1
     e3a:	98 8b       	std	Y+16, r25	; 0x10
     e3c:	8f 87       	std	Y+15, r24	; 0x0f
     e3e:	8f 85       	ldd	r24, Y+15	; 0x0f
     e40:	98 89       	ldd	r25, Y+16	; 0x10
     e42:	86 30       	cpi	r24, 0x06	; 6
     e44:	91 05       	cpc	r25, r1
     e46:	0c f4       	brge	.+2      	; 0xe4a <SevenSegmentUpdate+0x1c4>
     e48:	2f cf       	rjmp	.-418    	; 0xca8 <SevenSegmentUpdate+0x22>
		_delay_ms(1);

		// Clear all digit selections
		CLEAR_REG(SEVEN_SEGMENT_MULT_PORT, SEVEN_SEGMENT_MULT_PIN);
	}
}
     e4a:	62 96       	adiw	r28, 0x12	; 18
     e4c:	0f b6       	in	r0, 0x3f	; 63
     e4e:	f8 94       	cli
     e50:	de bf       	out	0x3e, r29	; 62
     e52:	0f be       	out	0x3f, r0	; 63
     e54:	cd bf       	out	0x3d, r28	; 61
     e56:	cf 91       	pop	r28
     e58:	df 91       	pop	r29
     e5a:	08 95       	ret

00000e5c <UpdateCountLEDs>:
 * @brief Updates LEDs based on current stopwatch mode.
 * @param countUp Pointer to count-up mode LED.
 * @param countDown Pointer to count-down mode LED.
 */
void UpdateCountLEDs(Led* countUp, Led* countDown)
{
     e5c:	df 93       	push	r29
     e5e:	cf 93       	push	r28
     e60:	00 d0       	rcall	.+0      	; 0xe62 <UpdateCountLEDs+0x6>
     e62:	00 d0       	rcall	.+0      	; 0xe64 <UpdateCountLEDs+0x8>
     e64:	cd b7       	in	r28, 0x3d	; 61
     e66:	de b7       	in	r29, 0x3e	; 62
     e68:	9a 83       	std	Y+2, r25	; 0x02
     e6a:	89 83       	std	Y+1, r24	; 0x01
     e6c:	7c 83       	std	Y+4, r23	; 0x04
     e6e:	6b 83       	std	Y+3, r22	; 0x03
    if (g_mode == INCREMENTAL_MODE)
     e70:	80 91 6b 00 	lds	r24, 0x006B
     e74:	81 30       	cpi	r24, 0x01	; 1
     e76:	49 f4       	brne	.+18     	; 0xe8a <UpdateCountLEDs+0x2e>
    {
        TurnOnLed(countUp);
     e78:	89 81       	ldd	r24, Y+1	; 0x01
     e7a:	9a 81       	ldd	r25, Y+2	; 0x02
     e7c:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <TurnOnLed>
        TurnOffLed(countDown);
     e80:	8b 81       	ldd	r24, Y+3	; 0x03
     e82:	9c 81       	ldd	r25, Y+4	; 0x04
     e84:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <TurnOffLed>
     e88:	08 c0       	rjmp	.+16     	; 0xe9a <UpdateCountLEDs+0x3e>
    }
    else
    {
        TurnOnLed(countDown);
     e8a:	8b 81       	ldd	r24, Y+3	; 0x03
     e8c:	9c 81       	ldd	r25, Y+4	; 0x04
     e8e:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <TurnOnLed>
        TurnOffLed(countUp);
     e92:	89 81       	ldd	r24, Y+1	; 0x01
     e94:	9a 81       	ldd	r25, Y+2	; 0x02
     e96:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <TurnOffLed>
    }
}
     e9a:	0f 90       	pop	r0
     e9c:	0f 90       	pop	r0
     e9e:	0f 90       	pop	r0
     ea0:	0f 90       	pop	r0
     ea2:	cf 91       	pop	r28
     ea4:	df 91       	pop	r29
     ea6:	08 95       	ret

00000ea8 <IncHour>:

/**
 * @brief Increments the hour value.
 */
void IncHour()
{
     ea8:	df 93       	push	r29
     eaa:	cf 93       	push	r28
     eac:	cd b7       	in	r28, 0x3d	; 61
     eae:	de b7       	in	r29, 0x3e	; 62
	if (g_SevenSeg_time.Hour == 99)
     eb0:	80 91 68 00 	lds	r24, 0x0068
     eb4:	83 36       	cpi	r24, 0x63	; 99
     eb6:	51 f4       	brne	.+20     	; 0xecc <IncHour+0x24>
	{
		g_SevenSeg_time.Hour = 99;
     eb8:	83 e6       	ldi	r24, 0x63	; 99
     eba:	80 93 68 00 	sts	0x0068, r24
		g_SevenSeg_time.Min = 59;
     ebe:	8b e3       	ldi	r24, 0x3B	; 59
     ec0:	80 93 69 00 	sts	0x0069, r24
		g_SevenSeg_time.Sec = 59;
     ec4:	8b e3       	ldi	r24, 0x3B	; 59
     ec6:	80 93 6a 00 	sts	0x006A, r24
     eca:	05 c0       	rjmp	.+10     	; 0xed6 <IncHour+0x2e>
	}
	else
	{
		g_SevenSeg_time.Hour++;
     ecc:	80 91 68 00 	lds	r24, 0x0068
     ed0:	8f 5f       	subi	r24, 0xFF	; 255
     ed2:	80 93 68 00 	sts	0x0068, r24
	}
}
     ed6:	cf 91       	pop	r28
     ed8:	df 91       	pop	r29
     eda:	08 95       	ret

00000edc <DecHour>:

/**
 * @brief Decrements the hour value.
 */
void DecHour()
{
     edc:	df 93       	push	r29
     ede:	cf 93       	push	r28
     ee0:	cd b7       	in	r28, 0x3d	; 61
     ee2:	de b7       	in	r29, 0x3e	; 62
	if (g_SevenSeg_time.Hour == 0)
     ee4:	80 91 68 00 	lds	r24, 0x0068
     ee8:	88 23       	and	r24, r24
     eea:	39 f4       	brne	.+14     	; 0xefa <DecHour+0x1e>
	{
		g_SevenSeg_time.Hour = 0;
     eec:	10 92 68 00 	sts	0x0068, r1
		g_SevenSeg_time.Min = 0;
     ef0:	10 92 69 00 	sts	0x0069, r1
		g_SevenSeg_time.Sec = 0;
     ef4:	10 92 6a 00 	sts	0x006A, r1
     ef8:	05 c0       	rjmp	.+10     	; 0xf04 <DecHour+0x28>
	}
	else
	{
		g_SevenSeg_time.Hour--;
     efa:	80 91 68 00 	lds	r24, 0x0068
     efe:	81 50       	subi	r24, 0x01	; 1
     f00:	80 93 68 00 	sts	0x0068, r24
	}
}
     f04:	cf 91       	pop	r28
     f06:	df 91       	pop	r29
     f08:	08 95       	ret

00000f0a <IncMin>:

/**
 * @brief Increments the minute value and wraps to hour if needed.
 */
void IncMin()
{
     f0a:	df 93       	push	r29
     f0c:	cf 93       	push	r28
     f0e:	cd b7       	in	r28, 0x3d	; 61
     f10:	de b7       	in	r29, 0x3e	; 62
	if (g_SevenSeg_time.Min == 59)
     f12:	80 91 69 00 	lds	r24, 0x0069
     f16:	8b 33       	cpi	r24, 0x3B	; 59
     f18:	29 f4       	brne	.+10     	; 0xf24 <IncMin+0x1a>
	{
		g_SevenSeg_time.Min = 0;
     f1a:	10 92 69 00 	sts	0x0069, r1
		IncHour();
     f1e:	0e 94 54 07 	call	0xea8	; 0xea8 <IncHour>
     f22:	05 c0       	rjmp	.+10     	; 0xf2e <IncMin+0x24>
	}
	else
	{
		g_SevenSeg_time.Min++;
     f24:	80 91 69 00 	lds	r24, 0x0069
     f28:	8f 5f       	subi	r24, 0xFF	; 255
     f2a:	80 93 69 00 	sts	0x0069, r24
	}
}
     f2e:	cf 91       	pop	r28
     f30:	df 91       	pop	r29
     f32:	08 95       	ret

00000f34 <DecMin>:

/**
 * @brief Decrements the minute value and wraps from hour if needed.
 */
void DecMin()
{
     f34:	df 93       	push	r29
     f36:	cf 93       	push	r28
     f38:	cd b7       	in	r28, 0x3d	; 61
     f3a:	de b7       	in	r29, 0x3e	; 62
	if (g_SevenSeg_time.Min == 0)
     f3c:	80 91 69 00 	lds	r24, 0x0069
     f40:	88 23       	and	r24, r24
     f42:	31 f4       	brne	.+12     	; 0xf50 <DecMin+0x1c>
	{
		g_SevenSeg_time.Min = 59;
     f44:	8b e3       	ldi	r24, 0x3B	; 59
     f46:	80 93 69 00 	sts	0x0069, r24
		DecHour();
     f4a:	0e 94 6e 07 	call	0xedc	; 0xedc <DecHour>
     f4e:	05 c0       	rjmp	.+10     	; 0xf5a <DecMin+0x26>
	}
	else
	{
		g_SevenSeg_time.Min--;
     f50:	80 91 69 00 	lds	r24, 0x0069
     f54:	81 50       	subi	r24, 0x01	; 1
     f56:	80 93 69 00 	sts	0x0069, r24
	}
}
     f5a:	cf 91       	pop	r28
     f5c:	df 91       	pop	r29
     f5e:	08 95       	ret

00000f60 <IncSec>:

/**
 * @brief Increments the second value and wraps to minute if needed.
 */
void IncSec()
{
     f60:	df 93       	push	r29
     f62:	cf 93       	push	r28
     f64:	cd b7       	in	r28, 0x3d	; 61
     f66:	de b7       	in	r29, 0x3e	; 62
	if (g_SevenSeg_time.Sec == 59)
     f68:	80 91 6a 00 	lds	r24, 0x006A
     f6c:	8b 33       	cpi	r24, 0x3B	; 59
     f6e:	29 f4       	brne	.+10     	; 0xf7a <IncSec+0x1a>
	{
		g_SevenSeg_time.Sec = 0;
     f70:	10 92 6a 00 	sts	0x006A, r1
		IncMin();
     f74:	0e 94 85 07 	call	0xf0a	; 0xf0a <IncMin>
     f78:	05 c0       	rjmp	.+10     	; 0xf84 <IncSec+0x24>
	}
	else
	{
		g_SevenSeg_time.Sec++;
     f7a:	80 91 6a 00 	lds	r24, 0x006A
     f7e:	8f 5f       	subi	r24, 0xFF	; 255
     f80:	80 93 6a 00 	sts	0x006A, r24
	}
}
     f84:	cf 91       	pop	r28
     f86:	df 91       	pop	r29
     f88:	08 95       	ret

00000f8a <DecSec>:

/**
 * @brief Decrements the second value and wraps from minute if needed.
 */
void DecSec()
{
     f8a:	df 93       	push	r29
     f8c:	cf 93       	push	r28
     f8e:	cd b7       	in	r28, 0x3d	; 61
     f90:	de b7       	in	r29, 0x3e	; 62
	if (g_SevenSeg_time.Sec == 0)
     f92:	80 91 6a 00 	lds	r24, 0x006A
     f96:	88 23       	and	r24, r24
     f98:	31 f4       	brne	.+12     	; 0xfa6 <DecSec+0x1c>
	{
		g_SevenSeg_time.Sec = 59;
     f9a:	8b e3       	ldi	r24, 0x3B	; 59
     f9c:	80 93 6a 00 	sts	0x006A, r24
		DecMin();
     fa0:	0e 94 9a 07 	call	0xf34	; 0xf34 <DecMin>
     fa4:	05 c0       	rjmp	.+10     	; 0xfb0 <DecSec+0x26>
	}
	else
	{
		g_SevenSeg_time.Sec--;
     fa6:	80 91 6a 00 	lds	r24, 0x006A
     faa:	81 50       	subi	r24, 0x01	; 1
     fac:	80 93 6a 00 	sts	0x006A, r24
	}
}
     fb0:	cf 91       	pop	r28
     fb2:	df 91       	pop	r29
     fb4:	08 95       	ret

00000fb6 <Buzzer_Init>:
 * @param myBuzzer Pointer to the Buzzer struct to initialize.
 * @param port Character representing the port ('A', 'B', 'C', or 'D').
 * @param pin Pin number (0–7) where the buzzer is connected.
 */
void Buzzer_Init(Buzzer* myBuzzer, uint8 port, uint8 pin)
{
     fb6:	df 93       	push	r29
     fb8:	cf 93       	push	r28
     fba:	00 d0       	rcall	.+0      	; 0xfbc <Buzzer_Init+0x6>
     fbc:	00 d0       	rcall	.+0      	; 0xfbe <Buzzer_Init+0x8>
     fbe:	cd b7       	in	r28, 0x3d	; 61
     fc0:	de b7       	in	r29, 0x3e	; 62
     fc2:	9a 83       	std	Y+2, r25	; 0x02
     fc4:	89 83       	std	Y+1, r24	; 0x01
     fc6:	6b 83       	std	Y+3, r22	; 0x03
     fc8:	4c 83       	std	Y+4, r20	; 0x04
	myBuzzer->port = port;
     fca:	e9 81       	ldd	r30, Y+1	; 0x01
     fcc:	fa 81       	ldd	r31, Y+2	; 0x02
     fce:	8b 81       	ldd	r24, Y+3	; 0x03
     fd0:	80 83       	st	Z, r24
	myBuzzer->pin = pin;
     fd2:	e9 81       	ldd	r30, Y+1	; 0x01
     fd4:	fa 81       	ldd	r31, Y+2	; 0x02
     fd6:	8c 81       	ldd	r24, Y+4	; 0x04
     fd8:	81 83       	std	Z+1, r24	; 0x01

	SetPin(port, pin, OUTPUT);
     fda:	8b 81       	ldd	r24, Y+3	; 0x03
     fdc:	6c 81       	ldd	r22, Y+4	; 0x04
     fde:	41 e0       	ldi	r20, 0x01	; 1
     fe0:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <SetPin>
	BuzzerOff(myBuzzer);  // Ensure buzzer is off at startup
     fe4:	89 81       	ldd	r24, Y+1	; 0x01
     fe6:	9a 81       	ldd	r25, Y+2	; 0x02
     fe8:	0e 94 13 08 	call	0x1026	; 0x1026 <BuzzerOff>
}
     fec:	0f 90       	pop	r0
     fee:	0f 90       	pop	r0
     ff0:	0f 90       	pop	r0
     ff2:	0f 90       	pop	r0
     ff4:	cf 91       	pop	r28
     ff6:	df 91       	pop	r29
     ff8:	08 95       	ret

00000ffa <BuzzerOn>:
 * Drives the connected pin high.
 *
 * @param myBuzzer Pointer to an initialized Buzzer struct.
 */
void BuzzerOn(Buzzer* myBuzzer)
{
     ffa:	df 93       	push	r29
     ffc:	cf 93       	push	r28
     ffe:	00 d0       	rcall	.+0      	; 0x1000 <BuzzerOn+0x6>
    1000:	cd b7       	in	r28, 0x3d	; 61
    1002:	de b7       	in	r29, 0x3e	; 62
    1004:	9a 83       	std	Y+2, r25	; 0x02
    1006:	89 83       	std	Y+1, r24	; 0x01
	WritePin(myBuzzer->port, myBuzzer->pin, HIGH);
    1008:	e9 81       	ldd	r30, Y+1	; 0x01
    100a:	fa 81       	ldd	r31, Y+2	; 0x02
    100c:	80 81       	ld	r24, Z
    100e:	e9 81       	ldd	r30, Y+1	; 0x01
    1010:	fa 81       	ldd	r31, Y+2	; 0x02
    1012:	91 81       	ldd	r25, Z+1	; 0x01
    1014:	69 2f       	mov	r22, r25
    1016:	41 e0       	ldi	r20, 0x01	; 1
    1018:	0e 94 4c 0b 	call	0x1698	; 0x1698 <WritePin>
}
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	cf 91       	pop	r28
    1022:	df 91       	pop	r29
    1024:	08 95       	ret

00001026 <BuzzerOff>:
 * Drives the connected pin low.
 *
 * @param myBuzzer Pointer to an initialized Buzzer struct.
 */
void BuzzerOff(Buzzer* myBuzzer)
{
    1026:	df 93       	push	r29
    1028:	cf 93       	push	r28
    102a:	00 d0       	rcall	.+0      	; 0x102c <BuzzerOff+0x6>
    102c:	cd b7       	in	r28, 0x3d	; 61
    102e:	de b7       	in	r29, 0x3e	; 62
    1030:	9a 83       	std	Y+2, r25	; 0x02
    1032:	89 83       	std	Y+1, r24	; 0x01
	WritePin(myBuzzer->port, myBuzzer->pin, LOW);
    1034:	e9 81       	ldd	r30, Y+1	; 0x01
    1036:	fa 81       	ldd	r31, Y+2	; 0x02
    1038:	80 81       	ld	r24, Z
    103a:	e9 81       	ldd	r30, Y+1	; 0x01
    103c:	fa 81       	ldd	r31, Y+2	; 0x02
    103e:	91 81       	ldd	r25, Z+1	; 0x01
    1040:	69 2f       	mov	r22, r25
    1042:	40 e0       	ldi	r20, 0x00	; 0
    1044:	0e 94 4c 0b 	call	0x1698	; 0x1698 <WritePin>
}
    1048:	0f 90       	pop	r0
    104a:	0f 90       	pop	r0
    104c:	cf 91       	pop	r28
    104e:	df 91       	pop	r29
    1050:	08 95       	ret

00001052 <INT0_Init>:
 * Sets PD2 as input and configures INT0 edge/level sensitivity.
 *
 * @param type Trigger condition (LOW_LEVEL, EDGE_CHANGE, FALLING_EDGE, RISING_EDGE)
 */
void INT0_Init(TriggerType type)
{
    1052:	df 93       	push	r29
    1054:	cf 93       	push	r28
    1056:	00 d0       	rcall	.+0      	; 0x1058 <INT0_Init+0x6>
    1058:	0f 92       	push	r0
    105a:	cd b7       	in	r28, 0x3d	; 61
    105c:	de b7       	in	r29, 0x3e	; 62
    105e:	89 83       	std	Y+1, r24	; 0x01
	cli(); // Disable global interrupts
    1060:	f8 94       	cli

	CLEAR(DDRD, PD2); // Set PD2 as input
    1062:	a1 e3       	ldi	r26, 0x31	; 49
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	e1 e3       	ldi	r30, 0x31	; 49
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	8b 7f       	andi	r24, 0xFB	; 251
    106e:	8c 93       	st	X, r24
	SET(GICR, INT0);  // Enable INT0
    1070:	ab e5       	ldi	r26, 0x5B	; 91
    1072:	b0 e0       	ldi	r27, 0x00	; 0
    1074:	eb e5       	ldi	r30, 0x5B	; 91
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	80 81       	ld	r24, Z
    107a:	80 64       	ori	r24, 0x40	; 64
    107c:	8c 93       	st	X, r24

	switch(type)
    107e:	89 81       	ldd	r24, Y+1	; 0x01
    1080:	28 2f       	mov	r18, r24
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	3b 83       	std	Y+3, r19	; 0x03
    1086:	2a 83       	std	Y+2, r18	; 0x02
    1088:	8a 81       	ldd	r24, Y+2	; 0x02
    108a:	9b 81       	ldd	r25, Y+3	; 0x03
    108c:	81 30       	cpi	r24, 0x01	; 1
    108e:	91 05       	cpc	r25, r1
    1090:	e9 f0       	breq	.+58     	; 0x10cc <INT0_Init+0x7a>
    1092:	2a 81       	ldd	r18, Y+2	; 0x02
    1094:	3b 81       	ldd	r19, Y+3	; 0x03
    1096:	22 30       	cpi	r18, 0x02	; 2
    1098:	31 05       	cpc	r19, r1
    109a:	2c f4       	brge	.+10     	; 0x10a6 <INT0_Init+0x54>
    109c:	8a 81       	ldd	r24, Y+2	; 0x02
    109e:	9b 81       	ldd	r25, Y+3	; 0x03
    10a0:	00 97       	sbiw	r24, 0x00	; 0
    10a2:	61 f0       	breq	.+24     	; 0x10bc <INT0_Init+0x6a>
    10a4:	38 c0       	rjmp	.+112    	; 0x1116 <INT0_Init+0xc4>
    10a6:	2a 81       	ldd	r18, Y+2	; 0x02
    10a8:	3b 81       	ldd	r19, Y+3	; 0x03
    10aa:	22 30       	cpi	r18, 0x02	; 2
    10ac:	31 05       	cpc	r19, r1
    10ae:	e9 f0       	breq	.+58     	; 0x10ea <INT0_Init+0x98>
    10b0:	8a 81       	ldd	r24, Y+2	; 0x02
    10b2:	9b 81       	ldd	r25, Y+3	; 0x03
    10b4:	83 30       	cpi	r24, 0x03	; 3
    10b6:	91 05       	cpc	r25, r1
    10b8:	39 f1       	breq	.+78     	; 0x1108 <INT0_Init+0xb6>
    10ba:	2d c0       	rjmp	.+90     	; 0x1116 <INT0_Init+0xc4>
	{
	case LOW_LEVEL:
		MCUCR &= ~((1 << ISC00) | (1 << ISC01));
    10bc:	a5 e5       	ldi	r26, 0x55	; 85
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	e5 e5       	ldi	r30, 0x55	; 85
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	8c 7f       	andi	r24, 0xFC	; 252
    10c8:	8c 93       	st	X, r24
    10ca:	25 c0       	rjmp	.+74     	; 0x1116 <INT0_Init+0xc4>
		break;
	case EDGE_CHANGE:
		SET(MCUCR, ISC01);
    10cc:	a5 e5       	ldi	r26, 0x55	; 85
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	e5 e5       	ldi	r30, 0x55	; 85
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	82 60       	ori	r24, 0x02	; 2
    10d8:	8c 93       	st	X, r24
		CLEAR(MCUCR, ISC00);
    10da:	a5 e5       	ldi	r26, 0x55	; 85
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	e5 e5       	ldi	r30, 0x55	; 85
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	8e 7f       	andi	r24, 0xFE	; 254
    10e6:	8c 93       	st	X, r24
    10e8:	16 c0       	rjmp	.+44     	; 0x1116 <INT0_Init+0xc4>
		break;
	case FALLING_EDGE:
		CLEAR(MCUCR, ISC01);
    10ea:	a5 e5       	ldi	r26, 0x55	; 85
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	e5 e5       	ldi	r30, 0x55	; 85
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	8d 7f       	andi	r24, 0xFD	; 253
    10f6:	8c 93       	st	X, r24
		SET(MCUCR, ISC00);
    10f8:	a5 e5       	ldi	r26, 0x55	; 85
    10fa:	b0 e0       	ldi	r27, 0x00	; 0
    10fc:	e5 e5       	ldi	r30, 0x55	; 85
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	81 60       	ori	r24, 0x01	; 1
    1104:	8c 93       	st	X, r24
    1106:	07 c0       	rjmp	.+14     	; 0x1116 <INT0_Init+0xc4>
		break;
	case RISING_EDGE:
		MCUCR |= ((1 << ISC00) | (1 << ISC01));
    1108:	a5 e5       	ldi	r26, 0x55	; 85
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	e5 e5       	ldi	r30, 0x55	; 85
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	83 60       	ori	r24, 0x03	; 3
    1114:	8c 93       	st	X, r24
		break;
	}

	sei(); // Re-enable global interrupts
    1116:	78 94       	sei
}
    1118:	0f 90       	pop	r0
    111a:	0f 90       	pop	r0
    111c:	0f 90       	pop	r0
    111e:	cf 91       	pop	r28
    1120:	df 91       	pop	r29
    1122:	08 95       	ret

00001124 <INT1_Init>:
 * Sets PD3 as input and configures INT1 edge/level sensitivity.
 *
 * @param type Trigger condition.
 */
void INT1_Init(TriggerType type)
{
    1124:	df 93       	push	r29
    1126:	cf 93       	push	r28
    1128:	00 d0       	rcall	.+0      	; 0x112a <INT1_Init+0x6>
    112a:	0f 92       	push	r0
    112c:	cd b7       	in	r28, 0x3d	; 61
    112e:	de b7       	in	r29, 0x3e	; 62
    1130:	89 83       	std	Y+1, r24	; 0x01
	cli();
    1132:	f8 94       	cli

	DDRD &= ~(1 << PD3);
    1134:	a1 e3       	ldi	r26, 0x31	; 49
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	e1 e3       	ldi	r30, 0x31	; 49
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	87 7f       	andi	r24, 0xF7	; 247
    1140:	8c 93       	st	X, r24
	GICR |= (1 << INT1);
    1142:	ab e5       	ldi	r26, 0x5B	; 91
    1144:	b0 e0       	ldi	r27, 0x00	; 0
    1146:	eb e5       	ldi	r30, 0x5B	; 91
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	80 68       	ori	r24, 0x80	; 128
    114e:	8c 93       	st	X, r24

	switch(type)
    1150:	89 81       	ldd	r24, Y+1	; 0x01
    1152:	28 2f       	mov	r18, r24
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	3b 83       	std	Y+3, r19	; 0x03
    1158:	2a 83       	std	Y+2, r18	; 0x02
    115a:	8a 81       	ldd	r24, Y+2	; 0x02
    115c:	9b 81       	ldd	r25, Y+3	; 0x03
    115e:	81 30       	cpi	r24, 0x01	; 1
    1160:	91 05       	cpc	r25, r1
    1162:	e9 f0       	breq	.+58     	; 0x119e <INT1_Init+0x7a>
    1164:	2a 81       	ldd	r18, Y+2	; 0x02
    1166:	3b 81       	ldd	r19, Y+3	; 0x03
    1168:	22 30       	cpi	r18, 0x02	; 2
    116a:	31 05       	cpc	r19, r1
    116c:	2c f4       	brge	.+10     	; 0x1178 <INT1_Init+0x54>
    116e:	8a 81       	ldd	r24, Y+2	; 0x02
    1170:	9b 81       	ldd	r25, Y+3	; 0x03
    1172:	00 97       	sbiw	r24, 0x00	; 0
    1174:	61 f0       	breq	.+24     	; 0x118e <INT1_Init+0x6a>
    1176:	38 c0       	rjmp	.+112    	; 0x11e8 <INT1_Init+0xc4>
    1178:	2a 81       	ldd	r18, Y+2	; 0x02
    117a:	3b 81       	ldd	r19, Y+3	; 0x03
    117c:	22 30       	cpi	r18, 0x02	; 2
    117e:	31 05       	cpc	r19, r1
    1180:	e9 f0       	breq	.+58     	; 0x11bc <INT1_Init+0x98>
    1182:	8a 81       	ldd	r24, Y+2	; 0x02
    1184:	9b 81       	ldd	r25, Y+3	; 0x03
    1186:	83 30       	cpi	r24, 0x03	; 3
    1188:	91 05       	cpc	r25, r1
    118a:	39 f1       	breq	.+78     	; 0x11da <INT1_Init+0xb6>
    118c:	2d c0       	rjmp	.+90     	; 0x11e8 <INT1_Init+0xc4>
	{
	case LOW_LEVEL:
		MCUCR &= ~((1 << ISC10) | (1 << ISC11));
    118e:	a5 e5       	ldi	r26, 0x55	; 85
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	e5 e5       	ldi	r30, 0x55	; 85
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	83 7f       	andi	r24, 0xF3	; 243
    119a:	8c 93       	st	X, r24
    119c:	25 c0       	rjmp	.+74     	; 0x11e8 <INT1_Init+0xc4>
		break;
	case EDGE_CHANGE:
		MCUCR |= (1 << ISC11);
    119e:	a5 e5       	ldi	r26, 0x55	; 85
    11a0:	b0 e0       	ldi	r27, 0x00	; 0
    11a2:	e5 e5       	ldi	r30, 0x55	; 85
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	80 81       	ld	r24, Z
    11a8:	88 60       	ori	r24, 0x08	; 8
    11aa:	8c 93       	st	X, r24
		MCUCR &= ~(1 << ISC10);
    11ac:	a5 e5       	ldi	r26, 0x55	; 85
    11ae:	b0 e0       	ldi	r27, 0x00	; 0
    11b0:	e5 e5       	ldi	r30, 0x55	; 85
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 81       	ld	r24, Z
    11b6:	8b 7f       	andi	r24, 0xFB	; 251
    11b8:	8c 93       	st	X, r24
    11ba:	16 c0       	rjmp	.+44     	; 0x11e8 <INT1_Init+0xc4>
		break;
	case FALLING_EDGE:
		MCUCR &= ~(1 << ISC11);
    11bc:	a5 e5       	ldi	r26, 0x55	; 85
    11be:	b0 e0       	ldi	r27, 0x00	; 0
    11c0:	e5 e5       	ldi	r30, 0x55	; 85
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	80 81       	ld	r24, Z
    11c6:	87 7f       	andi	r24, 0xF7	; 247
    11c8:	8c 93       	st	X, r24
		MCUCR |= (1 << ISC10);
    11ca:	a5 e5       	ldi	r26, 0x55	; 85
    11cc:	b0 e0       	ldi	r27, 0x00	; 0
    11ce:	e5 e5       	ldi	r30, 0x55	; 85
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	80 81       	ld	r24, Z
    11d4:	84 60       	ori	r24, 0x04	; 4
    11d6:	8c 93       	st	X, r24
    11d8:	07 c0       	rjmp	.+14     	; 0x11e8 <INT1_Init+0xc4>
		break;
	case RISING_EDGE:
		MCUCR |= ((1 << ISC10) | (1 << ISC11));
    11da:	a5 e5       	ldi	r26, 0x55	; 85
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	e5 e5       	ldi	r30, 0x55	; 85
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	8c 60       	ori	r24, 0x0C	; 12
    11e6:	8c 93       	st	X, r24
		break;
	}

	sei();
    11e8:	78 94       	sei
}
    11ea:	0f 90       	pop	r0
    11ec:	0f 90       	pop	r0
    11ee:	0f 90       	pop	r0
    11f0:	cf 91       	pop	r28
    11f2:	df 91       	pop	r29
    11f4:	08 95       	ret

000011f6 <INT2_Init>:
 * @brief Initializes INT2 with a specified trigger type (falling or rising).
 *
 * @param type Trigger condition.
 */
void INT2_Init(TriggerType type)
{
    11f6:	df 93       	push	r29
    11f8:	cf 93       	push	r28
    11fa:	00 d0       	rcall	.+0      	; 0x11fc <INT2_Init+0x6>
    11fc:	0f 92       	push	r0
    11fe:	cd b7       	in	r28, 0x3d	; 61
    1200:	de b7       	in	r29, 0x3e	; 62
    1202:	89 83       	std	Y+1, r24	; 0x01
	cli();
    1204:	f8 94       	cli

	DDRB &= ~(1 << PB2);
    1206:	a7 e3       	ldi	r26, 0x37	; 55
    1208:	b0 e0       	ldi	r27, 0x00	; 0
    120a:	e7 e3       	ldi	r30, 0x37	; 55
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	8b 7f       	andi	r24, 0xFB	; 251
    1212:	8c 93       	st	X, r24
	GICR |= (1 << INT2);
    1214:	ab e5       	ldi	r26, 0x5B	; 91
    1216:	b0 e0       	ldi	r27, 0x00	; 0
    1218:	eb e5       	ldi	r30, 0x5B	; 91
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	80 81       	ld	r24, Z
    121e:	80 62       	ori	r24, 0x20	; 32
    1220:	8c 93       	st	X, r24

	switch(type)
    1222:	89 81       	ldd	r24, Y+1	; 0x01
    1224:	28 2f       	mov	r18, r24
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	3b 83       	std	Y+3, r19	; 0x03
    122a:	2a 83       	std	Y+2, r18	; 0x02
    122c:	8a 81       	ldd	r24, Y+2	; 0x02
    122e:	9b 81       	ldd	r25, Y+3	; 0x03
    1230:	82 30       	cpi	r24, 0x02	; 2
    1232:	91 05       	cpc	r25, r1
    1234:	31 f0       	breq	.+12     	; 0x1242 <INT2_Init+0x4c>
    1236:	2a 81       	ldd	r18, Y+2	; 0x02
    1238:	3b 81       	ldd	r19, Y+3	; 0x03
    123a:	23 30       	cpi	r18, 0x03	; 3
    123c:	31 05       	cpc	r19, r1
    123e:	49 f0       	breq	.+18     	; 0x1252 <INT2_Init+0x5c>
    1240:	0f c0       	rjmp	.+30     	; 0x1260 <INT2_Init+0x6a>
	{
	case FALLING_EDGE:
		MCUCSR &= ~(1 << ISC2);
    1242:	a4 e5       	ldi	r26, 0x54	; 84
    1244:	b0 e0       	ldi	r27, 0x00	; 0
    1246:	e4 e5       	ldi	r30, 0x54	; 84
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	80 81       	ld	r24, Z
    124c:	8f 7b       	andi	r24, 0xBF	; 191
    124e:	8c 93       	st	X, r24
    1250:	07 c0       	rjmp	.+14     	; 0x1260 <INT2_Init+0x6a>
		break;
	case RISING_EDGE:
		MCUCSR |= (1 << ISC2);
    1252:	a4 e5       	ldi	r26, 0x54	; 84
    1254:	b0 e0       	ldi	r27, 0x00	; 0
    1256:	e4 e5       	ldi	r30, 0x54	; 84
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	80 64       	ori	r24, 0x40	; 64
    125e:	8c 93       	st	X, r24
		break;
	default:
		break;
	}

	sei();
    1260:	78 94       	sei
}
    1262:	0f 90       	pop	r0
    1264:	0f 90       	pop	r0
    1266:	0f 90       	pop	r0
    1268:	cf 91       	pop	r28
    126a:	df 91       	pop	r29
    126c:	08 95       	ret

0000126e <INT0_RunTimeTransition>:
 * Disables INT0, updates sensitivity, clears interrupt flag, and re-enables INT0.
 *
 * @param type New trigger type to apply.
 */
void INT0_RunTimeTransition(TriggerType type)
{
    126e:	df 93       	push	r29
    1270:	cf 93       	push	r28
    1272:	00 d0       	rcall	.+0      	; 0x1274 <INT0_RunTimeTransition+0x6>
    1274:	0f 92       	push	r0
    1276:	cd b7       	in	r28, 0x3d	; 61
    1278:	de b7       	in	r29, 0x3e	; 62
    127a:	89 83       	std	Y+1, r24	; 0x01
	cli();
    127c:	f8 94       	cli

	GICR &= ~(1 << INT0); // Disable INT0
    127e:	ab e5       	ldi	r26, 0x5B	; 91
    1280:	b0 e0       	ldi	r27, 0x00	; 0
    1282:	eb e5       	ldi	r30, 0x5B	; 91
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	80 81       	ld	r24, Z
    1288:	8f 7b       	andi	r24, 0xBF	; 191
    128a:	8c 93       	st	X, r24

	switch(type)
    128c:	89 81       	ldd	r24, Y+1	; 0x01
    128e:	28 2f       	mov	r18, r24
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	3b 83       	std	Y+3, r19	; 0x03
    1294:	2a 83       	std	Y+2, r18	; 0x02
    1296:	8a 81       	ldd	r24, Y+2	; 0x02
    1298:	9b 81       	ldd	r25, Y+3	; 0x03
    129a:	81 30       	cpi	r24, 0x01	; 1
    129c:	91 05       	cpc	r25, r1
    129e:	e9 f0       	breq	.+58     	; 0x12da <INT0_RunTimeTransition+0x6c>
    12a0:	2a 81       	ldd	r18, Y+2	; 0x02
    12a2:	3b 81       	ldd	r19, Y+3	; 0x03
    12a4:	22 30       	cpi	r18, 0x02	; 2
    12a6:	31 05       	cpc	r19, r1
    12a8:	2c f4       	brge	.+10     	; 0x12b4 <INT0_RunTimeTransition+0x46>
    12aa:	8a 81       	ldd	r24, Y+2	; 0x02
    12ac:	9b 81       	ldd	r25, Y+3	; 0x03
    12ae:	00 97       	sbiw	r24, 0x00	; 0
    12b0:	61 f0       	breq	.+24     	; 0x12ca <INT0_RunTimeTransition+0x5c>
    12b2:	38 c0       	rjmp	.+112    	; 0x1324 <INT0_RunTimeTransition+0xb6>
    12b4:	2a 81       	ldd	r18, Y+2	; 0x02
    12b6:	3b 81       	ldd	r19, Y+3	; 0x03
    12b8:	22 30       	cpi	r18, 0x02	; 2
    12ba:	31 05       	cpc	r19, r1
    12bc:	e9 f0       	breq	.+58     	; 0x12f8 <INT0_RunTimeTransition+0x8a>
    12be:	8a 81       	ldd	r24, Y+2	; 0x02
    12c0:	9b 81       	ldd	r25, Y+3	; 0x03
    12c2:	83 30       	cpi	r24, 0x03	; 3
    12c4:	91 05       	cpc	r25, r1
    12c6:	39 f1       	breq	.+78     	; 0x1316 <INT0_RunTimeTransition+0xa8>
    12c8:	2d c0       	rjmp	.+90     	; 0x1324 <INT0_RunTimeTransition+0xb6>
	{
	case LOW_LEVEL:
		MCUCR &= ~((1 << ISC00) | (1 << ISC01));
    12ca:	a5 e5       	ldi	r26, 0x55	; 85
    12cc:	b0 e0       	ldi	r27, 0x00	; 0
    12ce:	e5 e5       	ldi	r30, 0x55	; 85
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	8c 7f       	andi	r24, 0xFC	; 252
    12d6:	8c 93       	st	X, r24
    12d8:	25 c0       	rjmp	.+74     	; 0x1324 <INT0_RunTimeTransition+0xb6>
		break;
	case EDGE_CHANGE:
		MCUCR |= (1 << ISC01);
    12da:	a5 e5       	ldi	r26, 0x55	; 85
    12dc:	b0 e0       	ldi	r27, 0x00	; 0
    12de:	e5 e5       	ldi	r30, 0x55	; 85
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	82 60       	ori	r24, 0x02	; 2
    12e6:	8c 93       	st	X, r24
		MCUCR &= ~(1 << ISC00);
    12e8:	a5 e5       	ldi	r26, 0x55	; 85
    12ea:	b0 e0       	ldi	r27, 0x00	; 0
    12ec:	e5 e5       	ldi	r30, 0x55	; 85
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	8e 7f       	andi	r24, 0xFE	; 254
    12f4:	8c 93       	st	X, r24
    12f6:	16 c0       	rjmp	.+44     	; 0x1324 <INT0_RunTimeTransition+0xb6>
		break;
	case FALLING_EDGE:
		MCUCR &= ~(1 << ISC01);
    12f8:	a5 e5       	ldi	r26, 0x55	; 85
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	e5 e5       	ldi	r30, 0x55	; 85
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	8d 7f       	andi	r24, 0xFD	; 253
    1304:	8c 93       	st	X, r24
		MCUCR |= (1 << ISC00);
    1306:	a5 e5       	ldi	r26, 0x55	; 85
    1308:	b0 e0       	ldi	r27, 0x00	; 0
    130a:	e5 e5       	ldi	r30, 0x55	; 85
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	80 81       	ld	r24, Z
    1310:	81 60       	ori	r24, 0x01	; 1
    1312:	8c 93       	st	X, r24
    1314:	07 c0       	rjmp	.+14     	; 0x1324 <INT0_RunTimeTransition+0xb6>
		break;
	case RISING_EDGE:
		MCUCR |= ((1 << ISC00) | (1 << ISC01));
    1316:	a5 e5       	ldi	r26, 0x55	; 85
    1318:	b0 e0       	ldi	r27, 0x00	; 0
    131a:	e5 e5       	ldi	r30, 0x55	; 85
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	80 81       	ld	r24, Z
    1320:	83 60       	ori	r24, 0x03	; 3
    1322:	8c 93       	st	X, r24
		break;
	}

	GIFR |= (1 << INTF0); // Clear INT0 flag
    1324:	aa e5       	ldi	r26, 0x5A	; 90
    1326:	b0 e0       	ldi	r27, 0x00	; 0
    1328:	ea e5       	ldi	r30, 0x5A	; 90
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	80 81       	ld	r24, Z
    132e:	80 64       	ori	r24, 0x40	; 64
    1330:	8c 93       	st	X, r24
	GICR |= (1 << INT0);  // Re-enable INT0
    1332:	ab e5       	ldi	r26, 0x5B	; 91
    1334:	b0 e0       	ldi	r27, 0x00	; 0
    1336:	eb e5       	ldi	r30, 0x5B	; 91
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	80 81       	ld	r24, Z
    133c:	80 64       	ori	r24, 0x40	; 64
    133e:	8c 93       	st	X, r24

	sei();
    1340:	78 94       	sei
}
    1342:	0f 90       	pop	r0
    1344:	0f 90       	pop	r0
    1346:	0f 90       	pop	r0
    1348:	cf 91       	pop	r28
    134a:	df 91       	pop	r29
    134c:	08 95       	ret

0000134e <INT1_RunTimeTransition>:
 * @brief Dynamically changes INT1 trigger condition during runtime.
 *
 * @param type New trigger type to apply.
 */
void INT1_RunTimeTransition(TriggerType type)
{
    134e:	df 93       	push	r29
    1350:	cf 93       	push	r28
    1352:	00 d0       	rcall	.+0      	; 0x1354 <INT1_RunTimeTransition+0x6>
    1354:	0f 92       	push	r0
    1356:	cd b7       	in	r28, 0x3d	; 61
    1358:	de b7       	in	r29, 0x3e	; 62
    135a:	89 83       	std	Y+1, r24	; 0x01
	cli();
    135c:	f8 94       	cli

	GICR &= ~(1 << INT1); // Disable INT1
    135e:	ab e5       	ldi	r26, 0x5B	; 91
    1360:	b0 e0       	ldi	r27, 0x00	; 0
    1362:	eb e5       	ldi	r30, 0x5B	; 91
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	80 81       	ld	r24, Z
    1368:	8f 77       	andi	r24, 0x7F	; 127
    136a:	8c 93       	st	X, r24

	switch(type)
    136c:	89 81       	ldd	r24, Y+1	; 0x01
    136e:	28 2f       	mov	r18, r24
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	3b 83       	std	Y+3, r19	; 0x03
    1374:	2a 83       	std	Y+2, r18	; 0x02
    1376:	8a 81       	ldd	r24, Y+2	; 0x02
    1378:	9b 81       	ldd	r25, Y+3	; 0x03
    137a:	81 30       	cpi	r24, 0x01	; 1
    137c:	91 05       	cpc	r25, r1
    137e:	e9 f0       	breq	.+58     	; 0x13ba <INT1_RunTimeTransition+0x6c>
    1380:	2a 81       	ldd	r18, Y+2	; 0x02
    1382:	3b 81       	ldd	r19, Y+3	; 0x03
    1384:	22 30       	cpi	r18, 0x02	; 2
    1386:	31 05       	cpc	r19, r1
    1388:	2c f4       	brge	.+10     	; 0x1394 <INT1_RunTimeTransition+0x46>
    138a:	8a 81       	ldd	r24, Y+2	; 0x02
    138c:	9b 81       	ldd	r25, Y+3	; 0x03
    138e:	00 97       	sbiw	r24, 0x00	; 0
    1390:	61 f0       	breq	.+24     	; 0x13aa <INT1_RunTimeTransition+0x5c>
    1392:	38 c0       	rjmp	.+112    	; 0x1404 <INT1_RunTimeTransition+0xb6>
    1394:	2a 81       	ldd	r18, Y+2	; 0x02
    1396:	3b 81       	ldd	r19, Y+3	; 0x03
    1398:	22 30       	cpi	r18, 0x02	; 2
    139a:	31 05       	cpc	r19, r1
    139c:	e9 f0       	breq	.+58     	; 0x13d8 <INT1_RunTimeTransition+0x8a>
    139e:	8a 81       	ldd	r24, Y+2	; 0x02
    13a0:	9b 81       	ldd	r25, Y+3	; 0x03
    13a2:	83 30       	cpi	r24, 0x03	; 3
    13a4:	91 05       	cpc	r25, r1
    13a6:	39 f1       	breq	.+78     	; 0x13f6 <INT1_RunTimeTransition+0xa8>
    13a8:	2d c0       	rjmp	.+90     	; 0x1404 <INT1_RunTimeTransition+0xb6>
	{
	case LOW_LEVEL:
		MCUCR &= ~((1 << ISC10) | (1 << ISC11));
    13aa:	a5 e5       	ldi	r26, 0x55	; 85
    13ac:	b0 e0       	ldi	r27, 0x00	; 0
    13ae:	e5 e5       	ldi	r30, 0x55	; 85
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	83 7f       	andi	r24, 0xF3	; 243
    13b6:	8c 93       	st	X, r24
    13b8:	25 c0       	rjmp	.+74     	; 0x1404 <INT1_RunTimeTransition+0xb6>
		break;
	case EDGE_CHANGE:
		MCUCR |= (1 << ISC11);
    13ba:	a5 e5       	ldi	r26, 0x55	; 85
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	e5 e5       	ldi	r30, 0x55	; 85
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	88 60       	ori	r24, 0x08	; 8
    13c6:	8c 93       	st	X, r24
		MCUCR &= ~(1 << ISC10);
    13c8:	a5 e5       	ldi	r26, 0x55	; 85
    13ca:	b0 e0       	ldi	r27, 0x00	; 0
    13cc:	e5 e5       	ldi	r30, 0x55	; 85
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	80 81       	ld	r24, Z
    13d2:	8b 7f       	andi	r24, 0xFB	; 251
    13d4:	8c 93       	st	X, r24
    13d6:	16 c0       	rjmp	.+44     	; 0x1404 <INT1_RunTimeTransition+0xb6>
		break;
	case FALLING_EDGE:
		MCUCR &= ~(1 << ISC11);
    13d8:	a5 e5       	ldi	r26, 0x55	; 85
    13da:	b0 e0       	ldi	r27, 0x00	; 0
    13dc:	e5 e5       	ldi	r30, 0x55	; 85
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	80 81       	ld	r24, Z
    13e2:	87 7f       	andi	r24, 0xF7	; 247
    13e4:	8c 93       	st	X, r24
		MCUCR |= (1 << ISC10);
    13e6:	a5 e5       	ldi	r26, 0x55	; 85
    13e8:	b0 e0       	ldi	r27, 0x00	; 0
    13ea:	e5 e5       	ldi	r30, 0x55	; 85
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	80 81       	ld	r24, Z
    13f0:	84 60       	ori	r24, 0x04	; 4
    13f2:	8c 93       	st	X, r24
    13f4:	07 c0       	rjmp	.+14     	; 0x1404 <INT1_RunTimeTransition+0xb6>
		break;
	case RISING_EDGE:
		MCUCR |= ((1 << ISC10) | (1 << ISC11));
    13f6:	a5 e5       	ldi	r26, 0x55	; 85
    13f8:	b0 e0       	ldi	r27, 0x00	; 0
    13fa:	e5 e5       	ldi	r30, 0x55	; 85
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	8c 60       	ori	r24, 0x0C	; 12
    1402:	8c 93       	st	X, r24
		break;
	}

	GIFR |= (1 << INTF1); // Clear INT1 flag
    1404:	aa e5       	ldi	r26, 0x5A	; 90
    1406:	b0 e0       	ldi	r27, 0x00	; 0
    1408:	ea e5       	ldi	r30, 0x5A	; 90
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	80 81       	ld	r24, Z
    140e:	80 68       	ori	r24, 0x80	; 128
    1410:	8c 93       	st	X, r24
	GICR |= (1 << INT1);  // Re-enable INT1
    1412:	ab e5       	ldi	r26, 0x5B	; 91
    1414:	b0 e0       	ldi	r27, 0x00	; 0
    1416:	eb e5       	ldi	r30, 0x5B	; 91
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	80 81       	ld	r24, Z
    141c:	80 68       	ori	r24, 0x80	; 128
    141e:	8c 93       	st	X, r24

	sei();
    1420:	78 94       	sei
}
    1422:	0f 90       	pop	r0
    1424:	0f 90       	pop	r0
    1426:	0f 90       	pop	r0
    1428:	cf 91       	pop	r28
    142a:	df 91       	pop	r29
    142c:	08 95       	ret

0000142e <INT2_RunTimeTransition>:
 * @brief Dynamically changes INT2 trigger condition during runtime.
 *
 * @param type New trigger type to apply.
 */
void INT2_RunTimeTransition(TriggerType type)
{
    142e:	df 93       	push	r29
    1430:	cf 93       	push	r28
    1432:	00 d0       	rcall	.+0      	; 0x1434 <INT2_RunTimeTransition+0x6>
    1434:	0f 92       	push	r0
    1436:	cd b7       	in	r28, 0x3d	; 61
    1438:	de b7       	in	r29, 0x3e	; 62
    143a:	89 83       	std	Y+1, r24	; 0x01
	cli();
    143c:	f8 94       	cli

	GICR &= ~(1 << INT2); // Disable INT2
    143e:	ab e5       	ldi	r26, 0x5B	; 91
    1440:	b0 e0       	ldi	r27, 0x00	; 0
    1442:	eb e5       	ldi	r30, 0x5B	; 91
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	80 81       	ld	r24, Z
    1448:	8f 7d       	andi	r24, 0xDF	; 223
    144a:	8c 93       	st	X, r24

	switch(type)
    144c:	89 81       	ldd	r24, Y+1	; 0x01
    144e:	28 2f       	mov	r18, r24
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	3b 83       	std	Y+3, r19	; 0x03
    1454:	2a 83       	std	Y+2, r18	; 0x02
    1456:	8a 81       	ldd	r24, Y+2	; 0x02
    1458:	9b 81       	ldd	r25, Y+3	; 0x03
    145a:	82 30       	cpi	r24, 0x02	; 2
    145c:	91 05       	cpc	r25, r1
    145e:	31 f0       	breq	.+12     	; 0x146c <INT2_RunTimeTransition+0x3e>
    1460:	2a 81       	ldd	r18, Y+2	; 0x02
    1462:	3b 81       	ldd	r19, Y+3	; 0x03
    1464:	23 30       	cpi	r18, 0x03	; 3
    1466:	31 05       	cpc	r19, r1
    1468:	49 f0       	breq	.+18     	; 0x147c <INT2_RunTimeTransition+0x4e>
    146a:	0f c0       	rjmp	.+30     	; 0x148a <INT2_RunTimeTransition+0x5c>
	{
	case FALLING_EDGE:
		MCUCSR &= ~(1 << ISC2);
    146c:	a4 e5       	ldi	r26, 0x54	; 84
    146e:	b0 e0       	ldi	r27, 0x00	; 0
    1470:	e4 e5       	ldi	r30, 0x54	; 84
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	80 81       	ld	r24, Z
    1476:	8f 7b       	andi	r24, 0xBF	; 191
    1478:	8c 93       	st	X, r24
    147a:	07 c0       	rjmp	.+14     	; 0x148a <INT2_RunTimeTransition+0x5c>
		break;
	case RISING_EDGE:
		MCUCSR |= (1 << ISC2);
    147c:	a4 e5       	ldi	r26, 0x54	; 84
    147e:	b0 e0       	ldi	r27, 0x00	; 0
    1480:	e4 e5       	ldi	r30, 0x54	; 84
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	80 64       	ori	r24, 0x40	; 64
    1488:	8c 93       	st	X, r24
		break;
	default:
		break;
	}

	GIFR |= (1 << INTF2); // Clear INT2 flag
    148a:	aa e5       	ldi	r26, 0x5A	; 90
    148c:	b0 e0       	ldi	r27, 0x00	; 0
    148e:	ea e5       	ldi	r30, 0x5A	; 90
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	80 81       	ld	r24, Z
    1494:	80 62       	ori	r24, 0x20	; 32
    1496:	8c 93       	st	X, r24
	GICR |= (1 << INT2);  // Re-enable INT2
    1498:	ab e5       	ldi	r26, 0x5B	; 91
    149a:	b0 e0       	ldi	r27, 0x00	; 0
    149c:	eb e5       	ldi	r30, 0x5B	; 91
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	80 81       	ld	r24, Z
    14a2:	80 62       	ori	r24, 0x20	; 32
    14a4:	8c 93       	st	X, r24

	sei();
    14a6:	78 94       	sei
}
    14a8:	0f 90       	pop	r0
    14aa:	0f 90       	pop	r0
    14ac:	0f 90       	pop	r0
    14ae:	cf 91       	pop	r28
    14b0:	df 91       	pop	r29
    14b2:	08 95       	ret

000014b4 <SetPin>:
 * @param port Character representing the port ('A' to 'D').
 * @param pin Pin number (0–7).
 * @param direction Either OUTPUT or INPUT.
 */
void SetPin(uint8 port, uint8 pin, Direction direction)
{
    14b4:	df 93       	push	r29
    14b6:	cf 93       	push	r28
    14b8:	cd b7       	in	r28, 0x3d	; 61
    14ba:	de b7       	in	r29, 0x3e	; 62
    14bc:	2d 97       	sbiw	r28, 0x0d	; 13
    14be:	0f b6       	in	r0, 0x3f	; 63
    14c0:	f8 94       	cli
    14c2:	de bf       	out	0x3e, r29	; 62
    14c4:	0f be       	out	0x3f, r0	; 63
    14c6:	cd bf       	out	0x3d, r28	; 61
    14c8:	89 83       	std	Y+1, r24	; 0x01
    14ca:	6a 83       	std	Y+2, r22	; 0x02
    14cc:	4b 83       	std	Y+3, r20	; 0x03
	if (pin > (NUM_PINS_PER_PORT - 1)) return;
    14ce:	8a 81       	ldd	r24, Y+2	; 0x02
    14d0:	88 30       	cpi	r24, 0x08	; 8
    14d2:	08 f0       	brcs	.+2      	; 0x14d6 <SetPin+0x22>
    14d4:	d8 c0       	rjmp	.+432    	; 0x1686 <SetPin+0x1d2>

	switch (port)
    14d6:	89 81       	ldd	r24, Y+1	; 0x01
    14d8:	28 2f       	mov	r18, r24
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	3d 87       	std	Y+13, r19	; 0x0d
    14de:	2c 87       	std	Y+12, r18	; 0x0c
    14e0:	8c 85       	ldd	r24, Y+12	; 0x0c
    14e2:	9d 85       	ldd	r25, Y+13	; 0x0d
    14e4:	82 34       	cpi	r24, 0x42	; 66
    14e6:	91 05       	cpc	r25, r1
    14e8:	09 f4       	brne	.+2      	; 0x14ec <SetPin+0x38>
    14ea:	45 c0       	rjmp	.+138    	; 0x1576 <SetPin+0xc2>
    14ec:	2c 85       	ldd	r18, Y+12	; 0x0c
    14ee:	3d 85       	ldd	r19, Y+13	; 0x0d
    14f0:	23 34       	cpi	r18, 0x43	; 67
    14f2:	31 05       	cpc	r19, r1
    14f4:	34 f4       	brge	.+12     	; 0x1502 <SetPin+0x4e>
    14f6:	8c 85       	ldd	r24, Y+12	; 0x0c
    14f8:	9d 85       	ldd	r25, Y+13	; 0x0d
    14fa:	81 34       	cpi	r24, 0x41	; 65
    14fc:	91 05       	cpc	r25, r1
    14fe:	71 f0       	breq	.+28     	; 0x151c <SetPin+0x68>
    1500:	c2 c0       	rjmp	.+388    	; 0x1686 <SetPin+0x1d2>
    1502:	2c 85       	ldd	r18, Y+12	; 0x0c
    1504:	3d 85       	ldd	r19, Y+13	; 0x0d
    1506:	23 34       	cpi	r18, 0x43	; 67
    1508:	31 05       	cpc	r19, r1
    150a:	09 f4       	brne	.+2      	; 0x150e <SetPin+0x5a>
    150c:	62 c0       	rjmp	.+196    	; 0x15d2 <SetPin+0x11e>
    150e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1510:	9d 85       	ldd	r25, Y+13	; 0x0d
    1512:	84 34       	cpi	r24, 0x44	; 68
    1514:	91 05       	cpc	r25, r1
    1516:	09 f4       	brne	.+2      	; 0x151a <SetPin+0x66>
    1518:	89 c0       	rjmp	.+274    	; 0x162c <SetPin+0x178>
    151a:	b5 c0       	rjmp	.+362    	; 0x1686 <SetPin+0x1d2>
	{
	case 'A': direction == OUTPUT ? SET(DDRA, pin) : CLEAR(DDRA, pin); break;
    151c:	8b 81       	ldd	r24, Y+3	; 0x03
    151e:	81 30       	cpi	r24, 0x01	; 1
    1520:	a9 f4       	brne	.+42     	; 0x154c <SetPin+0x98>
    1522:	aa e3       	ldi	r26, 0x3A	; 58
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	ea e3       	ldi	r30, 0x3A	; 58
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	48 2f       	mov	r20, r24
    152e:	8a 81       	ldd	r24, Y+2	; 0x02
    1530:	28 2f       	mov	r18, r24
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	81 e0       	ldi	r24, 0x01	; 1
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	02 2e       	mov	r0, r18
    153a:	02 c0       	rjmp	.+4      	; 0x1540 <SetPin+0x8c>
    153c:	88 0f       	add	r24, r24
    153e:	99 1f       	adc	r25, r25
    1540:	0a 94       	dec	r0
    1542:	e2 f7       	brpl	.-8      	; 0x153c <SetPin+0x88>
    1544:	84 2b       	or	r24, r20
    1546:	8c 93       	st	X, r24
    1548:	9c 91       	ld	r25, X
    154a:	9d c0       	rjmp	.+314    	; 0x1686 <SetPin+0x1d2>
    154c:	aa e3       	ldi	r26, 0x3A	; 58
    154e:	b0 e0       	ldi	r27, 0x00	; 0
    1550:	ea e3       	ldi	r30, 0x3A	; 58
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
    1556:	48 2f       	mov	r20, r24
    1558:	8a 81       	ldd	r24, Y+2	; 0x02
    155a:	28 2f       	mov	r18, r24
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	81 e0       	ldi	r24, 0x01	; 1
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	02 c0       	rjmp	.+4      	; 0x1568 <SetPin+0xb4>
    1564:	88 0f       	add	r24, r24
    1566:	99 1f       	adc	r25, r25
    1568:	2a 95       	dec	r18
    156a:	e2 f7       	brpl	.-8      	; 0x1564 <SetPin+0xb0>
    156c:	80 95       	com	r24
    156e:	84 23       	and	r24, r20
    1570:	8c 93       	st	X, r24
    1572:	2c 91       	ld	r18, X
    1574:	88 c0       	rjmp	.+272    	; 0x1686 <SetPin+0x1d2>
	case 'B': direction == OUTPUT ? SET(DDRB, pin) : CLEAR(DDRB, pin); break;
    1576:	8b 81       	ldd	r24, Y+3	; 0x03
    1578:	81 30       	cpi	r24, 0x01	; 1
    157a:	a9 f4       	brne	.+42     	; 0x15a6 <SetPin+0xf2>
    157c:	a7 e3       	ldi	r26, 0x37	; 55
    157e:	b0 e0       	ldi	r27, 0x00	; 0
    1580:	e7 e3       	ldi	r30, 0x37	; 55
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	80 81       	ld	r24, Z
    1586:	48 2f       	mov	r20, r24
    1588:	8a 81       	ldd	r24, Y+2	; 0x02
    158a:	28 2f       	mov	r18, r24
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	02 2e       	mov	r0, r18
    1594:	02 c0       	rjmp	.+4      	; 0x159a <SetPin+0xe6>
    1596:	88 0f       	add	r24, r24
    1598:	99 1f       	adc	r25, r25
    159a:	0a 94       	dec	r0
    159c:	e2 f7       	brpl	.-8      	; 0x1596 <SetPin+0xe2>
    159e:	84 2b       	or	r24, r20
    15a0:	8c 93       	st	X, r24
    15a2:	3c 91       	ld	r19, X
    15a4:	70 c0       	rjmp	.+224    	; 0x1686 <SetPin+0x1d2>
    15a6:	a7 e3       	ldi	r26, 0x37	; 55
    15a8:	b0 e0       	ldi	r27, 0x00	; 0
    15aa:	e7 e3       	ldi	r30, 0x37	; 55
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	80 81       	ld	r24, Z
    15b0:	48 2f       	mov	r20, r24
    15b2:	8a 81       	ldd	r24, Y+2	; 0x02
    15b4:	28 2f       	mov	r18, r24
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	81 e0       	ldi	r24, 0x01	; 1
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	02 2e       	mov	r0, r18
    15be:	02 c0       	rjmp	.+4      	; 0x15c4 <SetPin+0x110>
    15c0:	88 0f       	add	r24, r24
    15c2:	99 1f       	adc	r25, r25
    15c4:	0a 94       	dec	r0
    15c6:	e2 f7       	brpl	.-8      	; 0x15c0 <SetPin+0x10c>
    15c8:	80 95       	com	r24
    15ca:	84 23       	and	r24, r20
    15cc:	8c 93       	st	X, r24
    15ce:	8c 91       	ld	r24, X
    15d0:	5a c0       	rjmp	.+180    	; 0x1686 <SetPin+0x1d2>
	case 'C': direction == OUTPUT ? SET(DDRC, pin) : CLEAR(DDRC, pin); break;
    15d2:	8b 81       	ldd	r24, Y+3	; 0x03
    15d4:	81 30       	cpi	r24, 0x01	; 1
    15d6:	a9 f4       	brne	.+42     	; 0x1602 <SetPin+0x14e>
    15d8:	a4 e3       	ldi	r26, 0x34	; 52
    15da:	b0 e0       	ldi	r27, 0x00	; 0
    15dc:	e4 e3       	ldi	r30, 0x34	; 52
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	80 81       	ld	r24, Z
    15e2:	48 2f       	mov	r20, r24
    15e4:	8a 81       	ldd	r24, Y+2	; 0x02
    15e6:	28 2f       	mov	r18, r24
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	02 2e       	mov	r0, r18
    15f0:	02 c0       	rjmp	.+4      	; 0x15f6 <SetPin+0x142>
    15f2:	88 0f       	add	r24, r24
    15f4:	99 1f       	adc	r25, r25
    15f6:	0a 94       	dec	r0
    15f8:	e2 f7       	brpl	.-8      	; 0x15f2 <SetPin+0x13e>
    15fa:	84 2b       	or	r24, r20
    15fc:	8c 93       	st	X, r24
    15fe:	9c 91       	ld	r25, X
    1600:	42 c0       	rjmp	.+132    	; 0x1686 <SetPin+0x1d2>
    1602:	a4 e3       	ldi	r26, 0x34	; 52
    1604:	b0 e0       	ldi	r27, 0x00	; 0
    1606:	e4 e3       	ldi	r30, 0x34	; 52
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	80 81       	ld	r24, Z
    160c:	48 2f       	mov	r20, r24
    160e:	8a 81       	ldd	r24, Y+2	; 0x02
    1610:	28 2f       	mov	r18, r24
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	02 c0       	rjmp	.+4      	; 0x161e <SetPin+0x16a>
    161a:	88 0f       	add	r24, r24
    161c:	99 1f       	adc	r25, r25
    161e:	2a 95       	dec	r18
    1620:	e2 f7       	brpl	.-8      	; 0x161a <SetPin+0x166>
    1622:	80 95       	com	r24
    1624:	84 23       	and	r24, r20
    1626:	8c 93       	st	X, r24
    1628:	2c 91       	ld	r18, X
    162a:	2d c0       	rjmp	.+90     	; 0x1686 <SetPin+0x1d2>
	case 'D': direction == OUTPUT ? SET(DDRD, pin) : CLEAR(DDRD, pin); break;
    162c:	8b 81       	ldd	r24, Y+3	; 0x03
    162e:	81 30       	cpi	r24, 0x01	; 1
    1630:	a9 f4       	brne	.+42     	; 0x165c <SetPin+0x1a8>
    1632:	a1 e3       	ldi	r26, 0x31	; 49
    1634:	b0 e0       	ldi	r27, 0x00	; 0
    1636:	e1 e3       	ldi	r30, 0x31	; 49
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	80 81       	ld	r24, Z
    163c:	48 2f       	mov	r20, r24
    163e:	8a 81       	ldd	r24, Y+2	; 0x02
    1640:	28 2f       	mov	r18, r24
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	02 2e       	mov	r0, r18
    164a:	02 c0       	rjmp	.+4      	; 0x1650 <SetPin+0x19c>
    164c:	88 0f       	add	r24, r24
    164e:	99 1f       	adc	r25, r25
    1650:	0a 94       	dec	r0
    1652:	e2 f7       	brpl	.-8      	; 0x164c <SetPin+0x198>
    1654:	84 2b       	or	r24, r20
    1656:	8c 93       	st	X, r24
    1658:	3c 91       	ld	r19, X
    165a:	15 c0       	rjmp	.+42     	; 0x1686 <SetPin+0x1d2>
    165c:	a1 e3       	ldi	r26, 0x31	; 49
    165e:	b0 e0       	ldi	r27, 0x00	; 0
    1660:	e1 e3       	ldi	r30, 0x31	; 49
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	80 81       	ld	r24, Z
    1666:	48 2f       	mov	r20, r24
    1668:	8a 81       	ldd	r24, Y+2	; 0x02
    166a:	28 2f       	mov	r18, r24
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	02 2e       	mov	r0, r18
    1674:	02 c0       	rjmp	.+4      	; 0x167a <SetPin+0x1c6>
    1676:	88 0f       	add	r24, r24
    1678:	99 1f       	adc	r25, r25
    167a:	0a 94       	dec	r0
    167c:	e2 f7       	brpl	.-8      	; 0x1676 <SetPin+0x1c2>
    167e:	80 95       	com	r24
    1680:	84 23       	and	r24, r20
    1682:	8c 93       	st	X, r24
    1684:	8c 91       	ld	r24, X
	}
}
    1686:	2d 96       	adiw	r28, 0x0d	; 13
    1688:	0f b6       	in	r0, 0x3f	; 63
    168a:	f8 94       	cli
    168c:	de bf       	out	0x3e, r29	; 62
    168e:	0f be       	out	0x3f, r0	; 63
    1690:	cd bf       	out	0x3d, r28	; 61
    1692:	cf 91       	pop	r28
    1694:	df 91       	pop	r29
    1696:	08 95       	ret

00001698 <WritePin>:
 * @param port Port name ('A' to 'D').
 * @param pin Pin number (0–7).
 * @param val Value to write: HIGH or LOW.
 */
void WritePin(uint8 port, uint8 pin, uint8 val)
{
    1698:	df 93       	push	r29
    169a:	cf 93       	push	r28
    169c:	cd b7       	in	r28, 0x3d	; 61
    169e:	de b7       	in	r29, 0x3e	; 62
    16a0:	2d 97       	sbiw	r28, 0x0d	; 13
    16a2:	0f b6       	in	r0, 0x3f	; 63
    16a4:	f8 94       	cli
    16a6:	de bf       	out	0x3e, r29	; 62
    16a8:	0f be       	out	0x3f, r0	; 63
    16aa:	cd bf       	out	0x3d, r28	; 61
    16ac:	89 83       	std	Y+1, r24	; 0x01
    16ae:	6a 83       	std	Y+2, r22	; 0x02
    16b0:	4b 83       	std	Y+3, r20	; 0x03
	if (pin > (NUM_PINS_PER_PORT - 1)) return;
    16b2:	8a 81       	ldd	r24, Y+2	; 0x02
    16b4:	88 30       	cpi	r24, 0x08	; 8
    16b6:	08 f0       	brcs	.+2      	; 0x16ba <WritePin+0x22>
    16b8:	d8 c0       	rjmp	.+432    	; 0x186a <WritePin+0x1d2>

	switch (port)
    16ba:	89 81       	ldd	r24, Y+1	; 0x01
    16bc:	28 2f       	mov	r18, r24
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	3d 87       	std	Y+13, r19	; 0x0d
    16c2:	2c 87       	std	Y+12, r18	; 0x0c
    16c4:	8c 85       	ldd	r24, Y+12	; 0x0c
    16c6:	9d 85       	ldd	r25, Y+13	; 0x0d
    16c8:	82 34       	cpi	r24, 0x42	; 66
    16ca:	91 05       	cpc	r25, r1
    16cc:	09 f4       	brne	.+2      	; 0x16d0 <WritePin+0x38>
    16ce:	45 c0       	rjmp	.+138    	; 0x175a <WritePin+0xc2>
    16d0:	2c 85       	ldd	r18, Y+12	; 0x0c
    16d2:	3d 85       	ldd	r19, Y+13	; 0x0d
    16d4:	23 34       	cpi	r18, 0x43	; 67
    16d6:	31 05       	cpc	r19, r1
    16d8:	34 f4       	brge	.+12     	; 0x16e6 <WritePin+0x4e>
    16da:	8c 85       	ldd	r24, Y+12	; 0x0c
    16dc:	9d 85       	ldd	r25, Y+13	; 0x0d
    16de:	81 34       	cpi	r24, 0x41	; 65
    16e0:	91 05       	cpc	r25, r1
    16e2:	71 f0       	breq	.+28     	; 0x1700 <WritePin+0x68>
    16e4:	c2 c0       	rjmp	.+388    	; 0x186a <WritePin+0x1d2>
    16e6:	2c 85       	ldd	r18, Y+12	; 0x0c
    16e8:	3d 85       	ldd	r19, Y+13	; 0x0d
    16ea:	23 34       	cpi	r18, 0x43	; 67
    16ec:	31 05       	cpc	r19, r1
    16ee:	09 f4       	brne	.+2      	; 0x16f2 <WritePin+0x5a>
    16f0:	62 c0       	rjmp	.+196    	; 0x17b6 <WritePin+0x11e>
    16f2:	8c 85       	ldd	r24, Y+12	; 0x0c
    16f4:	9d 85       	ldd	r25, Y+13	; 0x0d
    16f6:	84 34       	cpi	r24, 0x44	; 68
    16f8:	91 05       	cpc	r25, r1
    16fa:	09 f4       	brne	.+2      	; 0x16fe <WritePin+0x66>
    16fc:	89 c0       	rjmp	.+274    	; 0x1810 <WritePin+0x178>
    16fe:	b5 c0       	rjmp	.+362    	; 0x186a <WritePin+0x1d2>
	{
	case 'A': val == HIGH ? SET(PORTA, pin) : CLEAR(PORTA, pin); break;
    1700:	8b 81       	ldd	r24, Y+3	; 0x03
    1702:	81 30       	cpi	r24, 0x01	; 1
    1704:	a9 f4       	brne	.+42     	; 0x1730 <WritePin+0x98>
    1706:	ab e3       	ldi	r26, 0x3B	; 59
    1708:	b0 e0       	ldi	r27, 0x00	; 0
    170a:	eb e3       	ldi	r30, 0x3B	; 59
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	80 81       	ld	r24, Z
    1710:	48 2f       	mov	r20, r24
    1712:	8a 81       	ldd	r24, Y+2	; 0x02
    1714:	28 2f       	mov	r18, r24
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	02 2e       	mov	r0, r18
    171e:	02 c0       	rjmp	.+4      	; 0x1724 <WritePin+0x8c>
    1720:	88 0f       	add	r24, r24
    1722:	99 1f       	adc	r25, r25
    1724:	0a 94       	dec	r0
    1726:	e2 f7       	brpl	.-8      	; 0x1720 <WritePin+0x88>
    1728:	84 2b       	or	r24, r20
    172a:	8c 93       	st	X, r24
    172c:	9c 91       	ld	r25, X
    172e:	9d c0       	rjmp	.+314    	; 0x186a <WritePin+0x1d2>
    1730:	ab e3       	ldi	r26, 0x3B	; 59
    1732:	b0 e0       	ldi	r27, 0x00	; 0
    1734:	eb e3       	ldi	r30, 0x3B	; 59
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	80 81       	ld	r24, Z
    173a:	48 2f       	mov	r20, r24
    173c:	8a 81       	ldd	r24, Y+2	; 0x02
    173e:	28 2f       	mov	r18, r24
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	02 c0       	rjmp	.+4      	; 0x174c <WritePin+0xb4>
    1748:	88 0f       	add	r24, r24
    174a:	99 1f       	adc	r25, r25
    174c:	2a 95       	dec	r18
    174e:	e2 f7       	brpl	.-8      	; 0x1748 <WritePin+0xb0>
    1750:	80 95       	com	r24
    1752:	84 23       	and	r24, r20
    1754:	8c 93       	st	X, r24
    1756:	2c 91       	ld	r18, X
    1758:	88 c0       	rjmp	.+272    	; 0x186a <WritePin+0x1d2>
	case 'B': val == HIGH ? SET(PORTB, pin) : CLEAR(PORTB, pin); break;
    175a:	8b 81       	ldd	r24, Y+3	; 0x03
    175c:	81 30       	cpi	r24, 0x01	; 1
    175e:	a9 f4       	brne	.+42     	; 0x178a <WritePin+0xf2>
    1760:	a8 e3       	ldi	r26, 0x38	; 56
    1762:	b0 e0       	ldi	r27, 0x00	; 0
    1764:	e8 e3       	ldi	r30, 0x38	; 56
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	80 81       	ld	r24, Z
    176a:	48 2f       	mov	r20, r24
    176c:	8a 81       	ldd	r24, Y+2	; 0x02
    176e:	28 2f       	mov	r18, r24
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	02 2e       	mov	r0, r18
    1778:	02 c0       	rjmp	.+4      	; 0x177e <WritePin+0xe6>
    177a:	88 0f       	add	r24, r24
    177c:	99 1f       	adc	r25, r25
    177e:	0a 94       	dec	r0
    1780:	e2 f7       	brpl	.-8      	; 0x177a <WritePin+0xe2>
    1782:	84 2b       	or	r24, r20
    1784:	8c 93       	st	X, r24
    1786:	3c 91       	ld	r19, X
    1788:	70 c0       	rjmp	.+224    	; 0x186a <WritePin+0x1d2>
    178a:	a8 e3       	ldi	r26, 0x38	; 56
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	e8 e3       	ldi	r30, 0x38	; 56
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	48 2f       	mov	r20, r24
    1796:	8a 81       	ldd	r24, Y+2	; 0x02
    1798:	28 2f       	mov	r18, r24
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	02 2e       	mov	r0, r18
    17a2:	02 c0       	rjmp	.+4      	; 0x17a8 <WritePin+0x110>
    17a4:	88 0f       	add	r24, r24
    17a6:	99 1f       	adc	r25, r25
    17a8:	0a 94       	dec	r0
    17aa:	e2 f7       	brpl	.-8      	; 0x17a4 <WritePin+0x10c>
    17ac:	80 95       	com	r24
    17ae:	84 23       	and	r24, r20
    17b0:	8c 93       	st	X, r24
    17b2:	8c 91       	ld	r24, X
    17b4:	5a c0       	rjmp	.+180    	; 0x186a <WritePin+0x1d2>
	case 'C': val == HIGH ? SET(PORTC, pin) : CLEAR(PORTC, pin); break;
    17b6:	8b 81       	ldd	r24, Y+3	; 0x03
    17b8:	81 30       	cpi	r24, 0x01	; 1
    17ba:	a9 f4       	brne	.+42     	; 0x17e6 <WritePin+0x14e>
    17bc:	a5 e3       	ldi	r26, 0x35	; 53
    17be:	b0 e0       	ldi	r27, 0x00	; 0
    17c0:	e5 e3       	ldi	r30, 0x35	; 53
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	80 81       	ld	r24, Z
    17c6:	48 2f       	mov	r20, r24
    17c8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ca:	28 2f       	mov	r18, r24
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	81 e0       	ldi	r24, 0x01	; 1
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	02 2e       	mov	r0, r18
    17d4:	02 c0       	rjmp	.+4      	; 0x17da <WritePin+0x142>
    17d6:	88 0f       	add	r24, r24
    17d8:	99 1f       	adc	r25, r25
    17da:	0a 94       	dec	r0
    17dc:	e2 f7       	brpl	.-8      	; 0x17d6 <WritePin+0x13e>
    17de:	84 2b       	or	r24, r20
    17e0:	8c 93       	st	X, r24
    17e2:	9c 91       	ld	r25, X
    17e4:	42 c0       	rjmp	.+132    	; 0x186a <WritePin+0x1d2>
    17e6:	a5 e3       	ldi	r26, 0x35	; 53
    17e8:	b0 e0       	ldi	r27, 0x00	; 0
    17ea:	e5 e3       	ldi	r30, 0x35	; 53
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	80 81       	ld	r24, Z
    17f0:	48 2f       	mov	r20, r24
    17f2:	8a 81       	ldd	r24, Y+2	; 0x02
    17f4:	28 2f       	mov	r18, r24
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	02 c0       	rjmp	.+4      	; 0x1802 <WritePin+0x16a>
    17fe:	88 0f       	add	r24, r24
    1800:	99 1f       	adc	r25, r25
    1802:	2a 95       	dec	r18
    1804:	e2 f7       	brpl	.-8      	; 0x17fe <WritePin+0x166>
    1806:	80 95       	com	r24
    1808:	84 23       	and	r24, r20
    180a:	8c 93       	st	X, r24
    180c:	2c 91       	ld	r18, X
    180e:	2d c0       	rjmp	.+90     	; 0x186a <WritePin+0x1d2>
	case 'D': val == HIGH ? SET(PORTD, pin) : CLEAR(PORTD, pin); break;
    1810:	8b 81       	ldd	r24, Y+3	; 0x03
    1812:	81 30       	cpi	r24, 0x01	; 1
    1814:	a9 f4       	brne	.+42     	; 0x1840 <WritePin+0x1a8>
    1816:	a2 e3       	ldi	r26, 0x32	; 50
    1818:	b0 e0       	ldi	r27, 0x00	; 0
    181a:	e2 e3       	ldi	r30, 0x32	; 50
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	80 81       	ld	r24, Z
    1820:	48 2f       	mov	r20, r24
    1822:	8a 81       	ldd	r24, Y+2	; 0x02
    1824:	28 2f       	mov	r18, r24
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	81 e0       	ldi	r24, 0x01	; 1
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	02 2e       	mov	r0, r18
    182e:	02 c0       	rjmp	.+4      	; 0x1834 <WritePin+0x19c>
    1830:	88 0f       	add	r24, r24
    1832:	99 1f       	adc	r25, r25
    1834:	0a 94       	dec	r0
    1836:	e2 f7       	brpl	.-8      	; 0x1830 <WritePin+0x198>
    1838:	84 2b       	or	r24, r20
    183a:	8c 93       	st	X, r24
    183c:	3c 91       	ld	r19, X
    183e:	15 c0       	rjmp	.+42     	; 0x186a <WritePin+0x1d2>
    1840:	a2 e3       	ldi	r26, 0x32	; 50
    1842:	b0 e0       	ldi	r27, 0x00	; 0
    1844:	e2 e3       	ldi	r30, 0x32	; 50
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	80 81       	ld	r24, Z
    184a:	48 2f       	mov	r20, r24
    184c:	8a 81       	ldd	r24, Y+2	; 0x02
    184e:	28 2f       	mov	r18, r24
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	81 e0       	ldi	r24, 0x01	; 1
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	02 2e       	mov	r0, r18
    1858:	02 c0       	rjmp	.+4      	; 0x185e <WritePin+0x1c6>
    185a:	88 0f       	add	r24, r24
    185c:	99 1f       	adc	r25, r25
    185e:	0a 94       	dec	r0
    1860:	e2 f7       	brpl	.-8      	; 0x185a <WritePin+0x1c2>
    1862:	80 95       	com	r24
    1864:	84 23       	and	r24, r20
    1866:	8c 93       	st	X, r24
    1868:	8c 91       	ld	r24, X
	}
}
    186a:	2d 96       	adiw	r28, 0x0d	; 13
    186c:	0f b6       	in	r0, 0x3f	; 63
    186e:	f8 94       	cli
    1870:	de bf       	out	0x3e, r29	; 62
    1872:	0f be       	out	0x3f, r0	; 63
    1874:	cd bf       	out	0x3d, r28	; 61
    1876:	cf 91       	pop	r28
    1878:	df 91       	pop	r29
    187a:	08 95       	ret

0000187c <ReadPin>:
 * @param port Port name ('A' to 'D').
 * @param pin Pin number (0–7).
 * @return uint8 Returns HIGH or LOW depending on the pin state.
 */
uint8 ReadPin(uint8 port, uint8 pin)
{
    187c:	df 93       	push	r29
    187e:	cf 93       	push	r28
    1880:	00 d0       	rcall	.+0      	; 0x1882 <ReadPin+0x6>
    1882:	00 d0       	rcall	.+0      	; 0x1884 <ReadPin+0x8>
    1884:	00 d0       	rcall	.+0      	; 0x1886 <ReadPin+0xa>
    1886:	cd b7       	in	r28, 0x3d	; 61
    1888:	de b7       	in	r29, 0x3e	; 62
    188a:	8a 83       	std	Y+2, r24	; 0x02
    188c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pinValue = LOW;
    188e:	19 82       	std	Y+1, r1	; 0x01

	if (pin > (NUM_PINS_PER_PORT - 1)) return pinValue;
    1890:	8b 81       	ldd	r24, Y+3	; 0x03
    1892:	88 30       	cpi	r24, 0x08	; 8
    1894:	18 f0       	brcs	.+6      	; 0x189c <ReadPin+0x20>
    1896:	29 81       	ldd	r18, Y+1	; 0x01
    1898:	2e 83       	std	Y+6, r18	; 0x06
    189a:	69 c0       	rjmp	.+210    	; 0x196e <ReadPin+0xf2>

	switch (port)
    189c:	8a 81       	ldd	r24, Y+2	; 0x02
    189e:	48 2f       	mov	r20, r24
    18a0:	50 e0       	ldi	r21, 0x00	; 0
    18a2:	5d 83       	std	Y+5, r21	; 0x05
    18a4:	4c 83       	std	Y+4, r20	; 0x04
    18a6:	8c 81       	ldd	r24, Y+4	; 0x04
    18a8:	9d 81       	ldd	r25, Y+5	; 0x05
    18aa:	82 34       	cpi	r24, 0x42	; 66
    18ac:	91 05       	cpc	r25, r1
    18ae:	41 f1       	breq	.+80     	; 0x1900 <ReadPin+0x84>
    18b0:	2c 81       	ldd	r18, Y+4	; 0x04
    18b2:	3d 81       	ldd	r19, Y+5	; 0x05
    18b4:	23 34       	cpi	r18, 0x43	; 67
    18b6:	31 05       	cpc	r19, r1
    18b8:	34 f4       	brge	.+12     	; 0x18c6 <ReadPin+0x4a>
    18ba:	4c 81       	ldd	r20, Y+4	; 0x04
    18bc:	5d 81       	ldd	r21, Y+5	; 0x05
    18be:	41 34       	cpi	r20, 0x41	; 65
    18c0:	51 05       	cpc	r21, r1
    18c2:	61 f0       	breq	.+24     	; 0x18dc <ReadPin+0x60>
    18c4:	52 c0       	rjmp	.+164    	; 0x196a <ReadPin+0xee>
    18c6:	8c 81       	ldd	r24, Y+4	; 0x04
    18c8:	9d 81       	ldd	r25, Y+5	; 0x05
    18ca:	83 34       	cpi	r24, 0x43	; 67
    18cc:	91 05       	cpc	r25, r1
    18ce:	51 f1       	breq	.+84     	; 0x1924 <ReadPin+0xa8>
    18d0:	2c 81       	ldd	r18, Y+4	; 0x04
    18d2:	3d 81       	ldd	r19, Y+5	; 0x05
    18d4:	24 34       	cpi	r18, 0x44	; 68
    18d6:	31 05       	cpc	r19, r1
    18d8:	b9 f1       	breq	.+110    	; 0x1948 <ReadPin+0xcc>
    18da:	47 c0       	rjmp	.+142    	; 0x196a <ReadPin+0xee>
	{
	case 'A': pinValue = IS_SET(PINA, pin) ? HIGH : LOW; break;
    18dc:	e9 e3       	ldi	r30, 0x39	; 57
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	80 81       	ld	r24, Z
    18e2:	28 2f       	mov	r18, r24
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	8b 81       	ldd	r24, Y+3	; 0x03
    18e8:	88 2f       	mov	r24, r24
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	a9 01       	movw	r20, r18
    18ee:	02 c0       	rjmp	.+4      	; 0x18f4 <ReadPin+0x78>
    18f0:	55 95       	asr	r21
    18f2:	47 95       	ror	r20
    18f4:	8a 95       	dec	r24
    18f6:	e2 f7       	brpl	.-8      	; 0x18f0 <ReadPin+0x74>
    18f8:	ca 01       	movw	r24, r20
    18fa:	81 70       	andi	r24, 0x01	; 1
    18fc:	89 83       	std	Y+1, r24	; 0x01
    18fe:	35 c0       	rjmp	.+106    	; 0x196a <ReadPin+0xee>
	case 'B': pinValue = IS_SET(PINB, pin) ? HIGH : LOW; break;
    1900:	e6 e3       	ldi	r30, 0x36	; 54
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	80 81       	ld	r24, Z
    1906:	28 2f       	mov	r18, r24
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	8b 81       	ldd	r24, Y+3	; 0x03
    190c:	88 2f       	mov	r24, r24
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	a9 01       	movw	r20, r18
    1912:	02 c0       	rjmp	.+4      	; 0x1918 <ReadPin+0x9c>
    1914:	55 95       	asr	r21
    1916:	47 95       	ror	r20
    1918:	8a 95       	dec	r24
    191a:	e2 f7       	brpl	.-8      	; 0x1914 <ReadPin+0x98>
    191c:	ca 01       	movw	r24, r20
    191e:	81 70       	andi	r24, 0x01	; 1
    1920:	89 83       	std	Y+1, r24	; 0x01
    1922:	23 c0       	rjmp	.+70     	; 0x196a <ReadPin+0xee>
	case 'C': pinValue = IS_SET(PINC, pin) ? HIGH : LOW; break;
    1924:	e3 e3       	ldi	r30, 0x33	; 51
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	80 81       	ld	r24, Z
    192a:	28 2f       	mov	r18, r24
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	8b 81       	ldd	r24, Y+3	; 0x03
    1930:	88 2f       	mov	r24, r24
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	a9 01       	movw	r20, r18
    1936:	02 c0       	rjmp	.+4      	; 0x193c <ReadPin+0xc0>
    1938:	55 95       	asr	r21
    193a:	47 95       	ror	r20
    193c:	8a 95       	dec	r24
    193e:	e2 f7       	brpl	.-8      	; 0x1938 <ReadPin+0xbc>
    1940:	ca 01       	movw	r24, r20
    1942:	81 70       	andi	r24, 0x01	; 1
    1944:	89 83       	std	Y+1, r24	; 0x01
    1946:	11 c0       	rjmp	.+34     	; 0x196a <ReadPin+0xee>
	case 'D': pinValue = IS_SET(PIND, pin) ? HIGH : LOW; break;
    1948:	e0 e3       	ldi	r30, 0x30	; 48
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	80 81       	ld	r24, Z
    194e:	28 2f       	mov	r18, r24
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	8b 81       	ldd	r24, Y+3	; 0x03
    1954:	88 2f       	mov	r24, r24
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	a9 01       	movw	r20, r18
    195a:	02 c0       	rjmp	.+4      	; 0x1960 <ReadPin+0xe4>
    195c:	55 95       	asr	r21
    195e:	47 95       	ror	r20
    1960:	8a 95       	dec	r24
    1962:	e2 f7       	brpl	.-8      	; 0x195c <ReadPin+0xe0>
    1964:	ca 01       	movw	r24, r20
    1966:	81 70       	andi	r24, 0x01	; 1
    1968:	89 83       	std	Y+1, r24	; 0x01
	}

	return pinValue;
    196a:	59 81       	ldd	r21, Y+1	; 0x01
    196c:	5e 83       	std	Y+6, r21	; 0x06
    196e:	8e 81       	ldd	r24, Y+6	; 0x06
}
    1970:	26 96       	adiw	r28, 0x06	; 6
    1972:	0f b6       	in	r0, 0x3f	; 63
    1974:	f8 94       	cli
    1976:	de bf       	out	0x3e, r29	; 62
    1978:	0f be       	out	0x3f, r0	; 63
    197a:	cd bf       	out	0x3d, r28	; 61
    197c:	cf 91       	pop	r28
    197e:	df 91       	pop	r29
    1980:	08 95       	ret

00001982 <TogglePin>:
 * @brief Toggles the value of a pin.
 * @param port Port name ('A' to 'D').
 * @param pin Pin number (0–7).
 */
void TogglePin(uint8 port, uint8 pin)
{
    1982:	df 93       	push	r29
    1984:	cf 93       	push	r28
    1986:	00 d0       	rcall	.+0      	; 0x1988 <TogglePin+0x6>
    1988:	00 d0       	rcall	.+0      	; 0x198a <TogglePin+0x8>
    198a:	cd b7       	in	r28, 0x3d	; 61
    198c:	de b7       	in	r29, 0x3e	; 62
    198e:	89 83       	std	Y+1, r24	; 0x01
    1990:	6a 83       	std	Y+2, r22	; 0x02
	if (pin > (NUM_PINS_PER_PORT - 1)) return;
    1992:	8a 81       	ldd	r24, Y+2	; 0x02
    1994:	88 30       	cpi	r24, 0x08	; 8
    1996:	08 f0       	brcs	.+2      	; 0x199a <TogglePin+0x18>
    1998:	6f c0       	rjmp	.+222    	; 0x1a78 <TogglePin+0xf6>

	switch (port)
    199a:	89 81       	ldd	r24, Y+1	; 0x01
    199c:	28 2f       	mov	r18, r24
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	3c 83       	std	Y+4, r19	; 0x04
    19a2:	2b 83       	std	Y+3, r18	; 0x03
    19a4:	8b 81       	ldd	r24, Y+3	; 0x03
    19a6:	9c 81       	ldd	r25, Y+4	; 0x04
    19a8:	82 34       	cpi	r24, 0x42	; 66
    19aa:	91 05       	cpc	r25, r1
    19ac:	51 f1       	breq	.+84     	; 0x1a02 <TogglePin+0x80>
    19ae:	2b 81       	ldd	r18, Y+3	; 0x03
    19b0:	3c 81       	ldd	r19, Y+4	; 0x04
    19b2:	23 34       	cpi	r18, 0x43	; 67
    19b4:	31 05       	cpc	r19, r1
    19b6:	34 f4       	brge	.+12     	; 0x19c4 <TogglePin+0x42>
    19b8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ba:	9c 81       	ldd	r25, Y+4	; 0x04
    19bc:	81 34       	cpi	r24, 0x41	; 65
    19be:	91 05       	cpc	r25, r1
    19c0:	61 f0       	breq	.+24     	; 0x19da <TogglePin+0x58>
    19c2:	5a c0       	rjmp	.+180    	; 0x1a78 <TogglePin+0xf6>
    19c4:	2b 81       	ldd	r18, Y+3	; 0x03
    19c6:	3c 81       	ldd	r19, Y+4	; 0x04
    19c8:	23 34       	cpi	r18, 0x43	; 67
    19ca:	31 05       	cpc	r19, r1
    19cc:	71 f1       	breq	.+92     	; 0x1a2a <TogglePin+0xa8>
    19ce:	8b 81       	ldd	r24, Y+3	; 0x03
    19d0:	9c 81       	ldd	r25, Y+4	; 0x04
    19d2:	84 34       	cpi	r24, 0x44	; 68
    19d4:	91 05       	cpc	r25, r1
    19d6:	e9 f1       	breq	.+122    	; 0x1a52 <TogglePin+0xd0>
    19d8:	4f c0       	rjmp	.+158    	; 0x1a78 <TogglePin+0xf6>
	{
	case 'A': TOGGLE(PORTA, pin); break;
    19da:	ab e3       	ldi	r26, 0x3B	; 59
    19dc:	b0 e0       	ldi	r27, 0x00	; 0
    19de:	eb e3       	ldi	r30, 0x3B	; 59
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	80 81       	ld	r24, Z
    19e4:	48 2f       	mov	r20, r24
    19e6:	8a 81       	ldd	r24, Y+2	; 0x02
    19e8:	28 2f       	mov	r18, r24
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	81 e0       	ldi	r24, 0x01	; 1
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	02 2e       	mov	r0, r18
    19f2:	02 c0       	rjmp	.+4      	; 0x19f8 <TogglePin+0x76>
    19f4:	88 0f       	add	r24, r24
    19f6:	99 1f       	adc	r25, r25
    19f8:	0a 94       	dec	r0
    19fa:	e2 f7       	brpl	.-8      	; 0x19f4 <TogglePin+0x72>
    19fc:	84 27       	eor	r24, r20
    19fe:	8c 93       	st	X, r24
    1a00:	3b c0       	rjmp	.+118    	; 0x1a78 <TogglePin+0xf6>
	case 'B': TOGGLE(PORTB, pin); break;
    1a02:	a8 e3       	ldi	r26, 0x38	; 56
    1a04:	b0 e0       	ldi	r27, 0x00	; 0
    1a06:	e8 e3       	ldi	r30, 0x38	; 56
    1a08:	f0 e0       	ldi	r31, 0x00	; 0
    1a0a:	80 81       	ld	r24, Z
    1a0c:	48 2f       	mov	r20, r24
    1a0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a10:	28 2f       	mov	r18, r24
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	81 e0       	ldi	r24, 0x01	; 1
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	02 2e       	mov	r0, r18
    1a1a:	02 c0       	rjmp	.+4      	; 0x1a20 <TogglePin+0x9e>
    1a1c:	88 0f       	add	r24, r24
    1a1e:	99 1f       	adc	r25, r25
    1a20:	0a 94       	dec	r0
    1a22:	e2 f7       	brpl	.-8      	; 0x1a1c <TogglePin+0x9a>
    1a24:	84 27       	eor	r24, r20
    1a26:	8c 93       	st	X, r24
    1a28:	27 c0       	rjmp	.+78     	; 0x1a78 <TogglePin+0xf6>
	case 'C': TOGGLE(PORTC, pin); break;
    1a2a:	a5 e3       	ldi	r26, 0x35	; 53
    1a2c:	b0 e0       	ldi	r27, 0x00	; 0
    1a2e:	e5 e3       	ldi	r30, 0x35	; 53
    1a30:	f0 e0       	ldi	r31, 0x00	; 0
    1a32:	80 81       	ld	r24, Z
    1a34:	48 2f       	mov	r20, r24
    1a36:	8a 81       	ldd	r24, Y+2	; 0x02
    1a38:	28 2f       	mov	r18, r24
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	81 e0       	ldi	r24, 0x01	; 1
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	02 2e       	mov	r0, r18
    1a42:	02 c0       	rjmp	.+4      	; 0x1a48 <TogglePin+0xc6>
    1a44:	88 0f       	add	r24, r24
    1a46:	99 1f       	adc	r25, r25
    1a48:	0a 94       	dec	r0
    1a4a:	e2 f7       	brpl	.-8      	; 0x1a44 <TogglePin+0xc2>
    1a4c:	84 27       	eor	r24, r20
    1a4e:	8c 93       	st	X, r24
    1a50:	13 c0       	rjmp	.+38     	; 0x1a78 <TogglePin+0xf6>
	case 'D': TOGGLE(PORTD, pin); break;
    1a52:	a2 e3       	ldi	r26, 0x32	; 50
    1a54:	b0 e0       	ldi	r27, 0x00	; 0
    1a56:	e2 e3       	ldi	r30, 0x32	; 50
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	80 81       	ld	r24, Z
    1a5c:	48 2f       	mov	r20, r24
    1a5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a60:	28 2f       	mov	r18, r24
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	81 e0       	ldi	r24, 0x01	; 1
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	02 2e       	mov	r0, r18
    1a6a:	02 c0       	rjmp	.+4      	; 0x1a70 <TogglePin+0xee>
    1a6c:	88 0f       	add	r24, r24
    1a6e:	99 1f       	adc	r25, r25
    1a70:	0a 94       	dec	r0
    1a72:	e2 f7       	brpl	.-8      	; 0x1a6c <TogglePin+0xea>
    1a74:	84 27       	eor	r24, r20
    1a76:	8c 93       	st	X, r24
	}
}
    1a78:	0f 90       	pop	r0
    1a7a:	0f 90       	pop	r0
    1a7c:	0f 90       	pop	r0
    1a7e:	0f 90       	pop	r0
    1a80:	cf 91       	pop	r28
    1a82:	df 91       	pop	r29
    1a84:	08 95       	ret

00001a86 <SetPort>:
 * @brief Sets the direction of all 8 pins of a port.
 * @param port Port name ('A' to 'D').
 * @param direction OUTPUT to set all pins as outputs, INPUT for all inputs.
 */
void SetPort(uint8 port, Direction direction)
{
    1a86:	df 93       	push	r29
    1a88:	cf 93       	push	r28
    1a8a:	cd b7       	in	r28, 0x3d	; 61
    1a8c:	de b7       	in	r29, 0x3e	; 62
    1a8e:	60 97       	sbiw	r28, 0x10	; 16
    1a90:	0f b6       	in	r0, 0x3f	; 63
    1a92:	f8 94       	cli
    1a94:	de bf       	out	0x3e, r29	; 62
    1a96:	0f be       	out	0x3f, r0	; 63
    1a98:	cd bf       	out	0x3d, r28	; 61
    1a9a:	89 83       	std	Y+1, r24	; 0x01
    1a9c:	6a 83       	std	Y+2, r22	; 0x02
	switch (port)
    1a9e:	89 81       	ldd	r24, Y+1	; 0x01
    1aa0:	28 2f       	mov	r18, r24
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	38 8b       	std	Y+16, r19	; 0x10
    1aa6:	2f 87       	std	Y+15, r18	; 0x0f
    1aa8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1aaa:	98 89       	ldd	r25, Y+16	; 0x10
    1aac:	82 34       	cpi	r24, 0x42	; 66
    1aae:	91 05       	cpc	r25, r1
    1ab0:	31 f1       	breq	.+76     	; 0x1afe <SetPort+0x78>
    1ab2:	ef 85       	ldd	r30, Y+15	; 0x0f
    1ab4:	f8 89       	ldd	r31, Y+16	; 0x10
    1ab6:	e3 34       	cpi	r30, 0x43	; 67
    1ab8:	f1 05       	cpc	r31, r1
    1aba:	34 f4       	brge	.+12     	; 0x1ac8 <SetPort+0x42>
    1abc:	2f 85       	ldd	r18, Y+15	; 0x0f
    1abe:	38 89       	ldd	r19, Y+16	; 0x10
    1ac0:	21 34       	cpi	r18, 0x41	; 65
    1ac2:	31 05       	cpc	r19, r1
    1ac4:	61 f0       	breq	.+24     	; 0x1ade <SetPort+0x58>
    1ac6:	4a c0       	rjmp	.+148    	; 0x1b5c <SetPort+0xd6>
    1ac8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1aca:	98 89       	ldd	r25, Y+16	; 0x10
    1acc:	83 34       	cpi	r24, 0x43	; 67
    1ace:	91 05       	cpc	r25, r1
    1ad0:	31 f1       	breq	.+76     	; 0x1b1e <SetPort+0x98>
    1ad2:	ef 85       	ldd	r30, Y+15	; 0x0f
    1ad4:	f8 89       	ldd	r31, Y+16	; 0x10
    1ad6:	e4 34       	cpi	r30, 0x44	; 68
    1ad8:	f1 05       	cpc	r31, r1
    1ada:	89 f1       	breq	.+98     	; 0x1b3e <SetPort+0xb8>
    1adc:	3f c0       	rjmp	.+126    	; 0x1b5c <SetPort+0xd6>
	{
	case 'A': DDRA = (direction == OUTPUT) ? 0xFF : 0x00; break;
    1ade:	2a e3       	ldi	r18, 0x3A	; 58
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	3e 87       	std	Y+14, r19	; 0x0e
    1ae4:	2d 87       	std	Y+13, r18	; 0x0d
    1ae6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae8:	81 30       	cpi	r24, 0x01	; 1
    1aea:	19 f4       	brne	.+6      	; 0x1af2 <SetPort+0x6c>
    1aec:	3f ef       	ldi	r19, 0xFF	; 255
    1aee:	3c 87       	std	Y+12, r19	; 0x0c
    1af0:	01 c0       	rjmp	.+2      	; 0x1af4 <SetPort+0x6e>
    1af2:	1c 86       	std	Y+12, r1	; 0x0c
    1af4:	2c 85       	ldd	r18, Y+12	; 0x0c
    1af6:	ed 85       	ldd	r30, Y+13	; 0x0d
    1af8:	fe 85       	ldd	r31, Y+14	; 0x0e
    1afa:	20 83       	st	Z, r18
    1afc:	2f c0       	rjmp	.+94     	; 0x1b5c <SetPort+0xd6>
	case 'B': DDRB = (direction == OUTPUT) ? 0xFF : 0x00; break;
    1afe:	87 e3       	ldi	r24, 0x37	; 55
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	9b 87       	std	Y+11, r25	; 0x0b
    1b04:	8a 87       	std	Y+10, r24	; 0x0a
    1b06:	8a 81       	ldd	r24, Y+2	; 0x02
    1b08:	81 30       	cpi	r24, 0x01	; 1
    1b0a:	19 f4       	brne	.+6      	; 0x1b12 <SetPort+0x8c>
    1b0c:	9f ef       	ldi	r25, 0xFF	; 255
    1b0e:	99 87       	std	Y+9, r25	; 0x09
    1b10:	01 c0       	rjmp	.+2      	; 0x1b14 <SetPort+0x8e>
    1b12:	19 86       	std	Y+9, r1	; 0x09
    1b14:	29 85       	ldd	r18, Y+9	; 0x09
    1b16:	ea 85       	ldd	r30, Y+10	; 0x0a
    1b18:	fb 85       	ldd	r31, Y+11	; 0x0b
    1b1a:	20 83       	st	Z, r18
    1b1c:	1f c0       	rjmp	.+62     	; 0x1b5c <SetPort+0xd6>
	case 'C': DDRC = (direction == OUTPUT) ? 0xFF : 0x00; break;
    1b1e:	84 e3       	ldi	r24, 0x34	; 52
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	98 87       	std	Y+8, r25	; 0x08
    1b24:	8f 83       	std	Y+7, r24	; 0x07
    1b26:	8a 81       	ldd	r24, Y+2	; 0x02
    1b28:	81 30       	cpi	r24, 0x01	; 1
    1b2a:	19 f4       	brne	.+6      	; 0x1b32 <SetPort+0xac>
    1b2c:	9f ef       	ldi	r25, 0xFF	; 255
    1b2e:	9e 83       	std	Y+6, r25	; 0x06
    1b30:	01 c0       	rjmp	.+2      	; 0x1b34 <SetPort+0xae>
    1b32:	1e 82       	std	Y+6, r1	; 0x06
    1b34:	2e 81       	ldd	r18, Y+6	; 0x06
    1b36:	ef 81       	ldd	r30, Y+7	; 0x07
    1b38:	f8 85       	ldd	r31, Y+8	; 0x08
    1b3a:	20 83       	st	Z, r18
    1b3c:	0f c0       	rjmp	.+30     	; 0x1b5c <SetPort+0xd6>
	case 'D': DDRD = (direction == OUTPUT) ? 0xFF : 0x00; break;
    1b3e:	81 e3       	ldi	r24, 0x31	; 49
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	9d 83       	std	Y+5, r25	; 0x05
    1b44:	8c 83       	std	Y+4, r24	; 0x04
    1b46:	8a 81       	ldd	r24, Y+2	; 0x02
    1b48:	81 30       	cpi	r24, 0x01	; 1
    1b4a:	19 f4       	brne	.+6      	; 0x1b52 <SetPort+0xcc>
    1b4c:	9f ef       	ldi	r25, 0xFF	; 255
    1b4e:	9b 83       	std	Y+3, r25	; 0x03
    1b50:	01 c0       	rjmp	.+2      	; 0x1b54 <SetPort+0xce>
    1b52:	1b 82       	std	Y+3, r1	; 0x03
    1b54:	2b 81       	ldd	r18, Y+3	; 0x03
    1b56:	ec 81       	ldd	r30, Y+4	; 0x04
    1b58:	fd 81       	ldd	r31, Y+5	; 0x05
    1b5a:	20 83       	st	Z, r18
	}
}
    1b5c:	60 96       	adiw	r28, 0x10	; 16
    1b5e:	0f b6       	in	r0, 0x3f	; 63
    1b60:	f8 94       	cli
    1b62:	de bf       	out	0x3e, r29	; 62
    1b64:	0f be       	out	0x3f, r0	; 63
    1b66:	cd bf       	out	0x3d, r28	; 61
    1b68:	cf 91       	pop	r28
    1b6a:	df 91       	pop	r29
    1b6c:	08 95       	ret

00001b6e <WritePort>:
 * @brief Writes a value to an entire port (8 pins).
 * @param port Port name ('A' to 'D').
 * @param val HIGH to set all pins, LOW to clear all pins.
 */
void WritePort(uint8 port, uint8 val)
{
    1b6e:	df 93       	push	r29
    1b70:	cf 93       	push	r28
    1b72:	cd b7       	in	r28, 0x3d	; 61
    1b74:	de b7       	in	r29, 0x3e	; 62
    1b76:	60 97       	sbiw	r28, 0x10	; 16
    1b78:	0f b6       	in	r0, 0x3f	; 63
    1b7a:	f8 94       	cli
    1b7c:	de bf       	out	0x3e, r29	; 62
    1b7e:	0f be       	out	0x3f, r0	; 63
    1b80:	cd bf       	out	0x3d, r28	; 61
    1b82:	89 83       	std	Y+1, r24	; 0x01
    1b84:	6a 83       	std	Y+2, r22	; 0x02
	switch (port)
    1b86:	89 81       	ldd	r24, Y+1	; 0x01
    1b88:	28 2f       	mov	r18, r24
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	38 8b       	std	Y+16, r19	; 0x10
    1b8e:	2f 87       	std	Y+15, r18	; 0x0f
    1b90:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b92:	98 89       	ldd	r25, Y+16	; 0x10
    1b94:	82 34       	cpi	r24, 0x42	; 66
    1b96:	91 05       	cpc	r25, r1
    1b98:	31 f1       	breq	.+76     	; 0x1be6 <WritePort+0x78>
    1b9a:	ef 85       	ldd	r30, Y+15	; 0x0f
    1b9c:	f8 89       	ldd	r31, Y+16	; 0x10
    1b9e:	e3 34       	cpi	r30, 0x43	; 67
    1ba0:	f1 05       	cpc	r31, r1
    1ba2:	34 f4       	brge	.+12     	; 0x1bb0 <WritePort+0x42>
    1ba4:	2f 85       	ldd	r18, Y+15	; 0x0f
    1ba6:	38 89       	ldd	r19, Y+16	; 0x10
    1ba8:	21 34       	cpi	r18, 0x41	; 65
    1baa:	31 05       	cpc	r19, r1
    1bac:	61 f0       	breq	.+24     	; 0x1bc6 <WritePort+0x58>
    1bae:	4a c0       	rjmp	.+148    	; 0x1c44 <WritePort+0xd6>
    1bb0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bb2:	98 89       	ldd	r25, Y+16	; 0x10
    1bb4:	83 34       	cpi	r24, 0x43	; 67
    1bb6:	91 05       	cpc	r25, r1
    1bb8:	31 f1       	breq	.+76     	; 0x1c06 <WritePort+0x98>
    1bba:	ef 85       	ldd	r30, Y+15	; 0x0f
    1bbc:	f8 89       	ldd	r31, Y+16	; 0x10
    1bbe:	e4 34       	cpi	r30, 0x44	; 68
    1bc0:	f1 05       	cpc	r31, r1
    1bc2:	89 f1       	breq	.+98     	; 0x1c26 <WritePort+0xb8>
    1bc4:	3f c0       	rjmp	.+126    	; 0x1c44 <WritePort+0xd6>
	{
	case 'A': PORTA = (val == HIGH) ? 0xFF : 0x00; break;
    1bc6:	2b e3       	ldi	r18, 0x3B	; 59
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	3e 87       	std	Y+14, r19	; 0x0e
    1bcc:	2d 87       	std	Y+13, r18	; 0x0d
    1bce:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd0:	81 30       	cpi	r24, 0x01	; 1
    1bd2:	19 f4       	brne	.+6      	; 0x1bda <WritePort+0x6c>
    1bd4:	3f ef       	ldi	r19, 0xFF	; 255
    1bd6:	3c 87       	std	Y+12, r19	; 0x0c
    1bd8:	01 c0       	rjmp	.+2      	; 0x1bdc <WritePort+0x6e>
    1bda:	1c 86       	std	Y+12, r1	; 0x0c
    1bdc:	2c 85       	ldd	r18, Y+12	; 0x0c
    1bde:	ed 85       	ldd	r30, Y+13	; 0x0d
    1be0:	fe 85       	ldd	r31, Y+14	; 0x0e
    1be2:	20 83       	st	Z, r18
    1be4:	2f c0       	rjmp	.+94     	; 0x1c44 <WritePort+0xd6>
	case 'B': PORTB = (val == HIGH) ? 0xFF : 0x00; break;
    1be6:	88 e3       	ldi	r24, 0x38	; 56
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	9b 87       	std	Y+11, r25	; 0x0b
    1bec:	8a 87       	std	Y+10, r24	; 0x0a
    1bee:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf0:	81 30       	cpi	r24, 0x01	; 1
    1bf2:	19 f4       	brne	.+6      	; 0x1bfa <WritePort+0x8c>
    1bf4:	9f ef       	ldi	r25, 0xFF	; 255
    1bf6:	99 87       	std	Y+9, r25	; 0x09
    1bf8:	01 c0       	rjmp	.+2      	; 0x1bfc <WritePort+0x8e>
    1bfa:	19 86       	std	Y+9, r1	; 0x09
    1bfc:	29 85       	ldd	r18, Y+9	; 0x09
    1bfe:	ea 85       	ldd	r30, Y+10	; 0x0a
    1c00:	fb 85       	ldd	r31, Y+11	; 0x0b
    1c02:	20 83       	st	Z, r18
    1c04:	1f c0       	rjmp	.+62     	; 0x1c44 <WritePort+0xd6>
	case 'C': PORTC = (val == HIGH) ? 0xFF : 0x00; break;
    1c06:	85 e3       	ldi	r24, 0x35	; 53
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	98 87       	std	Y+8, r25	; 0x08
    1c0c:	8f 83       	std	Y+7, r24	; 0x07
    1c0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c10:	81 30       	cpi	r24, 0x01	; 1
    1c12:	19 f4       	brne	.+6      	; 0x1c1a <WritePort+0xac>
    1c14:	9f ef       	ldi	r25, 0xFF	; 255
    1c16:	9e 83       	std	Y+6, r25	; 0x06
    1c18:	01 c0       	rjmp	.+2      	; 0x1c1c <WritePort+0xae>
    1c1a:	1e 82       	std	Y+6, r1	; 0x06
    1c1c:	2e 81       	ldd	r18, Y+6	; 0x06
    1c1e:	ef 81       	ldd	r30, Y+7	; 0x07
    1c20:	f8 85       	ldd	r31, Y+8	; 0x08
    1c22:	20 83       	st	Z, r18
    1c24:	0f c0       	rjmp	.+30     	; 0x1c44 <WritePort+0xd6>
	case 'D': PORTD = (val == HIGH) ? 0xFF : 0x00; break;
    1c26:	82 e3       	ldi	r24, 0x32	; 50
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	9d 83       	std	Y+5, r25	; 0x05
    1c2c:	8c 83       	std	Y+4, r24	; 0x04
    1c2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c30:	81 30       	cpi	r24, 0x01	; 1
    1c32:	19 f4       	brne	.+6      	; 0x1c3a <WritePort+0xcc>
    1c34:	9f ef       	ldi	r25, 0xFF	; 255
    1c36:	9b 83       	std	Y+3, r25	; 0x03
    1c38:	01 c0       	rjmp	.+2      	; 0x1c3c <WritePort+0xce>
    1c3a:	1b 82       	std	Y+3, r1	; 0x03
    1c3c:	2b 81       	ldd	r18, Y+3	; 0x03
    1c3e:	ec 81       	ldd	r30, Y+4	; 0x04
    1c40:	fd 81       	ldd	r31, Y+5	; 0x05
    1c42:	20 83       	st	Z, r18
	}
}
    1c44:	60 96       	adiw	r28, 0x10	; 16
    1c46:	0f b6       	in	r0, 0x3f	; 63
    1c48:	f8 94       	cli
    1c4a:	de bf       	out	0x3e, r29	; 62
    1c4c:	0f be       	out	0x3f, r0	; 63
    1c4e:	cd bf       	out	0x3d, r28	; 61
    1c50:	cf 91       	pop	r28
    1c52:	df 91       	pop	r29
    1c54:	08 95       	ret

00001c56 <ReadPort>:
 * @brief Reads the current value of an entire port.
 * @param port Port name ('A' to 'D').
 * @return uint8 8-bit value representing the port state.
 */
uint8 ReadPort(uint8 port)
{
    1c56:	df 93       	push	r29
    1c58:	cf 93       	push	r28
    1c5a:	00 d0       	rcall	.+0      	; 0x1c5c <ReadPort+0x6>
    1c5c:	00 d0       	rcall	.+0      	; 0x1c5e <ReadPort+0x8>
    1c5e:	cd b7       	in	r28, 0x3d	; 61
    1c60:	de b7       	in	r29, 0x3e	; 62
    1c62:	89 83       	std	Y+1, r24	; 0x01
	switch (port)
    1c64:	89 81       	ldd	r24, Y+1	; 0x01
    1c66:	28 2f       	mov	r18, r24
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	3c 83       	std	Y+4, r19	; 0x04
    1c6c:	2b 83       	std	Y+3, r18	; 0x03
    1c6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c70:	9c 81       	ldd	r25, Y+4	; 0x04
    1c72:	82 34       	cpi	r24, 0x42	; 66
    1c74:	91 05       	cpc	r25, r1
    1c76:	d9 f0       	breq	.+54     	; 0x1cae <ReadPort+0x58>
    1c78:	2b 81       	ldd	r18, Y+3	; 0x03
    1c7a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c7c:	23 34       	cpi	r18, 0x43	; 67
    1c7e:	31 05       	cpc	r19, r1
    1c80:	34 f4       	brge	.+12     	; 0x1c8e <ReadPort+0x38>
    1c82:	8b 81       	ldd	r24, Y+3	; 0x03
    1c84:	9c 81       	ldd	r25, Y+4	; 0x04
    1c86:	81 34       	cpi	r24, 0x41	; 65
    1c88:	91 05       	cpc	r25, r1
    1c8a:	61 f0       	breq	.+24     	; 0x1ca4 <ReadPort+0x4e>
    1c8c:	1f c0       	rjmp	.+62     	; 0x1ccc <ReadPort+0x76>
    1c8e:	2b 81       	ldd	r18, Y+3	; 0x03
    1c90:	3c 81       	ldd	r19, Y+4	; 0x04
    1c92:	23 34       	cpi	r18, 0x43	; 67
    1c94:	31 05       	cpc	r19, r1
    1c96:	81 f0       	breq	.+32     	; 0x1cb8 <ReadPort+0x62>
    1c98:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c9c:	84 34       	cpi	r24, 0x44	; 68
    1c9e:	91 05       	cpc	r25, r1
    1ca0:	81 f0       	breq	.+32     	; 0x1cc2 <ReadPort+0x6c>
    1ca2:	14 c0       	rjmp	.+40     	; 0x1ccc <ReadPort+0x76>
	{
	case 'A': return PORTA;
    1ca4:	eb e3       	ldi	r30, 0x3B	; 59
    1ca6:	f0 e0       	ldi	r31, 0x00	; 0
    1ca8:	90 81       	ld	r25, Z
    1caa:	9a 83       	std	Y+2, r25	; 0x02
    1cac:	10 c0       	rjmp	.+32     	; 0x1cce <ReadPort+0x78>
	case 'B': return PORTB;
    1cae:	e8 e3       	ldi	r30, 0x38	; 56
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	20 81       	ld	r18, Z
    1cb4:	2a 83       	std	Y+2, r18	; 0x02
    1cb6:	0b c0       	rjmp	.+22     	; 0x1cce <ReadPort+0x78>
	case 'C': return PORTC;
    1cb8:	e5 e3       	ldi	r30, 0x35	; 53
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	30 81       	ld	r19, Z
    1cbe:	3a 83       	std	Y+2, r19	; 0x02
    1cc0:	06 c0       	rjmp	.+12     	; 0x1cce <ReadPort+0x78>
	case 'D': return PORTD;
    1cc2:	e2 e3       	ldi	r30, 0x32	; 50
    1cc4:	f0 e0       	ldi	r31, 0x00	; 0
    1cc6:	80 81       	ld	r24, Z
    1cc8:	8a 83       	std	Y+2, r24	; 0x02
    1cca:	01 c0       	rjmp	.+2      	; 0x1cce <ReadPort+0x78>
	default:  return 0x00;
    1ccc:	1a 82       	std	Y+2, r1	; 0x02
    1cce:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    1cd0:	0f 90       	pop	r0
    1cd2:	0f 90       	pop	r0
    1cd4:	0f 90       	pop	r0
    1cd6:	0f 90       	pop	r0
    1cd8:	cf 91       	pop	r28
    1cda:	df 91       	pop	r29
    1cdc:	08 95       	ret

00001cde <Led_Init>:
 * @param port Port where the LED is connected ('A', 'B', 'C', or 'D').
 * @param pin Pin number (0–7) for the LED.
 * @param type LED logic type (POSITIVE_LOGIC or NEGATIVE_LOGIC).
 */
void Led_Init(Led* myLed, uint8 port, uint8 pin, LedType type)
{
    1cde:	df 93       	push	r29
    1ce0:	cf 93       	push	r28
    1ce2:	00 d0       	rcall	.+0      	; 0x1ce4 <Led_Init+0x6>
    1ce4:	00 d0       	rcall	.+0      	; 0x1ce6 <Led_Init+0x8>
    1ce6:	0f 92       	push	r0
    1ce8:	cd b7       	in	r28, 0x3d	; 61
    1cea:	de b7       	in	r29, 0x3e	; 62
    1cec:	9a 83       	std	Y+2, r25	; 0x02
    1cee:	89 83       	std	Y+1, r24	; 0x01
    1cf0:	6b 83       	std	Y+3, r22	; 0x03
    1cf2:	4c 83       	std	Y+4, r20	; 0x04
    1cf4:	2d 83       	std	Y+5, r18	; 0x05
	myLed->port = port;
    1cf6:	e9 81       	ldd	r30, Y+1	; 0x01
    1cf8:	fa 81       	ldd	r31, Y+2	; 0x02
    1cfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfc:	80 83       	st	Z, r24
	myLed->pin = pin;
    1cfe:	e9 81       	ldd	r30, Y+1	; 0x01
    1d00:	fa 81       	ldd	r31, Y+2	; 0x02
    1d02:	8c 81       	ldd	r24, Y+4	; 0x04
    1d04:	81 83       	std	Z+1, r24	; 0x01
	myLed->type = type;
    1d06:	e9 81       	ldd	r30, Y+1	; 0x01
    1d08:	fa 81       	ldd	r31, Y+2	; 0x02
    1d0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d0c:	82 83       	std	Z+2, r24	; 0x02

	SetPin(port, pin, OUTPUT);
    1d0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d10:	6c 81       	ldd	r22, Y+4	; 0x04
    1d12:	41 e0       	ldi	r20, 0x01	; 1
    1d14:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <SetPin>
	TurnOffLed(myLed);
    1d18:	89 81       	ldd	r24, Y+1	; 0x01
    1d1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d1c:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <TurnOffLed>
}
    1d20:	0f 90       	pop	r0
    1d22:	0f 90       	pop	r0
    1d24:	0f 90       	pop	r0
    1d26:	0f 90       	pop	r0
    1d28:	0f 90       	pop	r0
    1d2a:	cf 91       	pop	r28
    1d2c:	df 91       	pop	r29
    1d2e:	08 95       	ret

00001d30 <TurnOnLed>:
 * Handles positive and negative logic configurations accordingly.
 *
 * @param myLed Pointer to the initialized Led structure.
 */
void TurnOnLed(Led* myLed)
{
    1d30:	df 93       	push	r29
    1d32:	cf 93       	push	r28
    1d34:	00 d0       	rcall	.+0      	; 0x1d36 <TurnOnLed+0x6>
    1d36:	00 d0       	rcall	.+0      	; 0x1d38 <TurnOnLed+0x8>
    1d38:	cd b7       	in	r28, 0x3d	; 61
    1d3a:	de b7       	in	r29, 0x3e	; 62
    1d3c:	9a 83       	std	Y+2, r25	; 0x02
    1d3e:	89 83       	std	Y+1, r24	; 0x01
	switch(myLed->type)
    1d40:	e9 81       	ldd	r30, Y+1	; 0x01
    1d42:	fa 81       	ldd	r31, Y+2	; 0x02
    1d44:	82 81       	ldd	r24, Z+2	; 0x02
    1d46:	28 2f       	mov	r18, r24
    1d48:	30 e0       	ldi	r19, 0x00	; 0
    1d4a:	3c 83       	std	Y+4, r19	; 0x04
    1d4c:	2b 83       	std	Y+3, r18	; 0x03
    1d4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d50:	9c 81       	ldd	r25, Y+4	; 0x04
    1d52:	00 97       	sbiw	r24, 0x00	; 0
    1d54:	31 f0       	breq	.+12     	; 0x1d62 <TurnOnLed+0x32>
    1d56:	2b 81       	ldd	r18, Y+3	; 0x03
    1d58:	3c 81       	ldd	r19, Y+4	; 0x04
    1d5a:	21 30       	cpi	r18, 0x01	; 1
    1d5c:	31 05       	cpc	r19, r1
    1d5e:	61 f0       	breq	.+24     	; 0x1d78 <TurnOnLed+0x48>
    1d60:	15 c0       	rjmp	.+42     	; 0x1d8c <TurnOnLed+0x5c>
	{
	case POSITIVE_LOGIC:
		WritePin(myLed->port, myLed->pin, HIGH);
    1d62:	e9 81       	ldd	r30, Y+1	; 0x01
    1d64:	fa 81       	ldd	r31, Y+2	; 0x02
    1d66:	80 81       	ld	r24, Z
    1d68:	e9 81       	ldd	r30, Y+1	; 0x01
    1d6a:	fa 81       	ldd	r31, Y+2	; 0x02
    1d6c:	91 81       	ldd	r25, Z+1	; 0x01
    1d6e:	69 2f       	mov	r22, r25
    1d70:	41 e0       	ldi	r20, 0x01	; 1
    1d72:	0e 94 4c 0b 	call	0x1698	; 0x1698 <WritePin>
    1d76:	0a c0       	rjmp	.+20     	; 0x1d8c <TurnOnLed+0x5c>
		break;
	case NEGATIVE_LOGIC:
		WritePin(myLed->port, myLed->pin, LOW);
    1d78:	e9 81       	ldd	r30, Y+1	; 0x01
    1d7a:	fa 81       	ldd	r31, Y+2	; 0x02
    1d7c:	80 81       	ld	r24, Z
    1d7e:	e9 81       	ldd	r30, Y+1	; 0x01
    1d80:	fa 81       	ldd	r31, Y+2	; 0x02
    1d82:	91 81       	ldd	r25, Z+1	; 0x01
    1d84:	69 2f       	mov	r22, r25
    1d86:	40 e0       	ldi	r20, 0x00	; 0
    1d88:	0e 94 4c 0b 	call	0x1698	; 0x1698 <WritePin>
		break;
	}
}
    1d8c:	0f 90       	pop	r0
    1d8e:	0f 90       	pop	r0
    1d90:	0f 90       	pop	r0
    1d92:	0f 90       	pop	r0
    1d94:	cf 91       	pop	r28
    1d96:	df 91       	pop	r29
    1d98:	08 95       	ret

00001d9a <TurnOffLed>:
 * Handles positive and negative logic configurations accordingly.
 *
 * @param myLed Pointer to the initialized Led structure.
 */
void TurnOffLed(Led* myLed)
{
    1d9a:	df 93       	push	r29
    1d9c:	cf 93       	push	r28
    1d9e:	00 d0       	rcall	.+0      	; 0x1da0 <TurnOffLed+0x6>
    1da0:	00 d0       	rcall	.+0      	; 0x1da2 <TurnOffLed+0x8>
    1da2:	cd b7       	in	r28, 0x3d	; 61
    1da4:	de b7       	in	r29, 0x3e	; 62
    1da6:	9a 83       	std	Y+2, r25	; 0x02
    1da8:	89 83       	std	Y+1, r24	; 0x01
	switch(myLed->type)
    1daa:	e9 81       	ldd	r30, Y+1	; 0x01
    1dac:	fa 81       	ldd	r31, Y+2	; 0x02
    1dae:	82 81       	ldd	r24, Z+2	; 0x02
    1db0:	28 2f       	mov	r18, r24
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	3c 83       	std	Y+4, r19	; 0x04
    1db6:	2b 83       	std	Y+3, r18	; 0x03
    1db8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dba:	9c 81       	ldd	r25, Y+4	; 0x04
    1dbc:	00 97       	sbiw	r24, 0x00	; 0
    1dbe:	31 f0       	breq	.+12     	; 0x1dcc <TurnOffLed+0x32>
    1dc0:	2b 81       	ldd	r18, Y+3	; 0x03
    1dc2:	3c 81       	ldd	r19, Y+4	; 0x04
    1dc4:	21 30       	cpi	r18, 0x01	; 1
    1dc6:	31 05       	cpc	r19, r1
    1dc8:	61 f0       	breq	.+24     	; 0x1de2 <TurnOffLed+0x48>
    1dca:	15 c0       	rjmp	.+42     	; 0x1df6 <TurnOffLed+0x5c>
	{
	case POSITIVE_LOGIC:
		WritePin(myLed->port, myLed->pin, LOW);
    1dcc:	e9 81       	ldd	r30, Y+1	; 0x01
    1dce:	fa 81       	ldd	r31, Y+2	; 0x02
    1dd0:	80 81       	ld	r24, Z
    1dd2:	e9 81       	ldd	r30, Y+1	; 0x01
    1dd4:	fa 81       	ldd	r31, Y+2	; 0x02
    1dd6:	91 81       	ldd	r25, Z+1	; 0x01
    1dd8:	69 2f       	mov	r22, r25
    1dda:	40 e0       	ldi	r20, 0x00	; 0
    1ddc:	0e 94 4c 0b 	call	0x1698	; 0x1698 <WritePin>
    1de0:	0a c0       	rjmp	.+20     	; 0x1df6 <TurnOffLed+0x5c>
		break;
	case NEGATIVE_LOGIC:
		WritePin(myLed->port, myLed->pin, HIGH);
    1de2:	e9 81       	ldd	r30, Y+1	; 0x01
    1de4:	fa 81       	ldd	r31, Y+2	; 0x02
    1de6:	80 81       	ld	r24, Z
    1de8:	e9 81       	ldd	r30, Y+1	; 0x01
    1dea:	fa 81       	ldd	r31, Y+2	; 0x02
    1dec:	91 81       	ldd	r25, Z+1	; 0x01
    1dee:	69 2f       	mov	r22, r25
    1df0:	41 e0       	ldi	r20, 0x01	; 1
    1df2:	0e 94 4c 0b 	call	0x1698	; 0x1698 <WritePin>
		break;
	}
}
    1df6:	0f 90       	pop	r0
    1df8:	0f 90       	pop	r0
    1dfa:	0f 90       	pop	r0
    1dfc:	0f 90       	pop	r0
    1dfe:	cf 91       	pop	r28
    1e00:	df 91       	pop	r29
    1e02:	08 95       	ret

00001e04 <ToggleLed>:
 * Independently of logic type, toggles the current state of the LED pin.
 *
 * @param myLED Pointer to the initialized Led structure.
 */
void ToggleLed(Led* myLED)
{
    1e04:	df 93       	push	r29
    1e06:	cf 93       	push	r28
    1e08:	00 d0       	rcall	.+0      	; 0x1e0a <ToggleLed+0x6>
    1e0a:	cd b7       	in	r28, 0x3d	; 61
    1e0c:	de b7       	in	r29, 0x3e	; 62
    1e0e:	9a 83       	std	Y+2, r25	; 0x02
    1e10:	89 83       	std	Y+1, r24	; 0x01
	TogglePin(myLED->port, myLED->pin);
    1e12:	e9 81       	ldd	r30, Y+1	; 0x01
    1e14:	fa 81       	ldd	r31, Y+2	; 0x02
    1e16:	80 81       	ld	r24, Z
    1e18:	e9 81       	ldd	r30, Y+1	; 0x01
    1e1a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e1c:	91 81       	ldd	r25, Z+1	; 0x01
    1e1e:	69 2f       	mov	r22, r25
    1e20:	0e 94 c1 0c 	call	0x1982	; 0x1982 <TogglePin>
}
    1e24:	0f 90       	pop	r0
    1e26:	0f 90       	pop	r0
    1e28:	cf 91       	pop	r28
    1e2a:	df 91       	pop	r29
    1e2c:	08 95       	ret

00001e2e <PushButton_Init>:
 * @param port Character representing the port ('A' to 'D').
 * @param pin Pin number (0–7).
 * @param type Button type: PULL_DOWN or INTERNAL_PULL_UP.
 */
void PushButton_Init(PushButton* button, uint8 port, uint8 pin, ButtonType type)
{
    1e2e:	df 93       	push	r29
    1e30:	cf 93       	push	r28
    1e32:	cd b7       	in	r28, 0x3d	; 61
    1e34:	de b7       	in	r29, 0x3e	; 62
    1e36:	27 97       	sbiw	r28, 0x07	; 7
    1e38:	0f b6       	in	r0, 0x3f	; 63
    1e3a:	f8 94       	cli
    1e3c:	de bf       	out	0x3e, r29	; 62
    1e3e:	0f be       	out	0x3f, r0	; 63
    1e40:	cd bf       	out	0x3d, r28	; 61
    1e42:	9a 83       	std	Y+2, r25	; 0x02
    1e44:	89 83       	std	Y+1, r24	; 0x01
    1e46:	6b 83       	std	Y+3, r22	; 0x03
    1e48:	4c 83       	std	Y+4, r20	; 0x04
    1e4a:	2d 83       	std	Y+5, r18	; 0x05
	button->port = port;
    1e4c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e4e:	fa 81       	ldd	r31, Y+2	; 0x02
    1e50:	8b 81       	ldd	r24, Y+3	; 0x03
    1e52:	80 83       	st	Z, r24
	button->pin  = pin;
    1e54:	e9 81       	ldd	r30, Y+1	; 0x01
    1e56:	fa 81       	ldd	r31, Y+2	; 0x02
    1e58:	8c 81       	ldd	r24, Y+4	; 0x04
    1e5a:	81 83       	std	Z+1, r24	; 0x01
	button->type = type;
    1e5c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e5e:	fa 81       	ldd	r31, Y+2	; 0x02
    1e60:	8d 81       	ldd	r24, Y+5	; 0x05
    1e62:	82 83       	std	Z+2, r24	; 0x02

	SetPin(port, pin, INPUT); // Set as input
    1e64:	8b 81       	ldd	r24, Y+3	; 0x03
    1e66:	6c 81       	ldd	r22, Y+4	; 0x04
    1e68:	40 e0       	ldi	r20, 0x00	; 0
    1e6a:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <SetPin>

	// Enable internal pull-up if needed
	switch (port)
    1e6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e70:	28 2f       	mov	r18, r24
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	3f 83       	std	Y+7, r19	; 0x07
    1e76:	2e 83       	std	Y+6, r18	; 0x06
    1e78:	8e 81       	ldd	r24, Y+6	; 0x06
    1e7a:	9f 81       	ldd	r25, Y+7	; 0x07
    1e7c:	82 34       	cpi	r24, 0x42	; 66
    1e7e:	91 05       	cpc	r25, r1
    1e80:	79 f1       	breq	.+94     	; 0x1ee0 <PushButton_Init+0xb2>
    1e82:	2e 81       	ldd	r18, Y+6	; 0x06
    1e84:	3f 81       	ldd	r19, Y+7	; 0x07
    1e86:	23 34       	cpi	r18, 0x43	; 67
    1e88:	31 05       	cpc	r19, r1
    1e8a:	34 f4       	brge	.+12     	; 0x1e98 <PushButton_Init+0x6a>
    1e8c:	8e 81       	ldd	r24, Y+6	; 0x06
    1e8e:	9f 81       	ldd	r25, Y+7	; 0x07
    1e90:	81 34       	cpi	r24, 0x41	; 65
    1e92:	91 05       	cpc	r25, r1
    1e94:	69 f0       	breq	.+26     	; 0x1eb0 <PushButton_Init+0x82>
    1e96:	69 c0       	rjmp	.+210    	; 0x1f6a <PushButton_Init+0x13c>
    1e98:	2e 81       	ldd	r18, Y+6	; 0x06
    1e9a:	3f 81       	ldd	r19, Y+7	; 0x07
    1e9c:	23 34       	cpi	r18, 0x43	; 67
    1e9e:	31 05       	cpc	r19, r1
    1ea0:	b9 f1       	breq	.+110    	; 0x1f10 <PushButton_Init+0xe2>
    1ea2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ea4:	9f 81       	ldd	r25, Y+7	; 0x07
    1ea6:	84 34       	cpi	r24, 0x44	; 68
    1ea8:	91 05       	cpc	r25, r1
    1eaa:	09 f4       	brne	.+2      	; 0x1eae <PushButton_Init+0x80>
    1eac:	48 c0       	rjmp	.+144    	; 0x1f3e <PushButton_Init+0x110>
    1eae:	5d c0       	rjmp	.+186    	; 0x1f6a <PushButton_Init+0x13c>
	{
	case 'A':
		if (type == INTERNAL_PULL_UP) SET(PORTA, pin);
    1eb0:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb2:	82 30       	cpi	r24, 0x02	; 2
    1eb4:	09 f0       	breq	.+2      	; 0x1eb8 <PushButton_Init+0x8a>
    1eb6:	59 c0       	rjmp	.+178    	; 0x1f6a <PushButton_Init+0x13c>
    1eb8:	ab e3       	ldi	r26, 0x3B	; 59
    1eba:	b0 e0       	ldi	r27, 0x00	; 0
    1ebc:	eb e3       	ldi	r30, 0x3B	; 59
    1ebe:	f0 e0       	ldi	r31, 0x00	; 0
    1ec0:	80 81       	ld	r24, Z
    1ec2:	48 2f       	mov	r20, r24
    1ec4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ec6:	28 2f       	mov	r18, r24
    1ec8:	30 e0       	ldi	r19, 0x00	; 0
    1eca:	81 e0       	ldi	r24, 0x01	; 1
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	02 2e       	mov	r0, r18
    1ed0:	02 c0       	rjmp	.+4      	; 0x1ed6 <PushButton_Init+0xa8>
    1ed2:	88 0f       	add	r24, r24
    1ed4:	99 1f       	adc	r25, r25
    1ed6:	0a 94       	dec	r0
    1ed8:	e2 f7       	brpl	.-8      	; 0x1ed2 <PushButton_Init+0xa4>
    1eda:	84 2b       	or	r24, r20
    1edc:	8c 93       	st	X, r24
    1ede:	45 c0       	rjmp	.+138    	; 0x1f6a <PushButton_Init+0x13c>
		break;
	case 'B':
		if (type == INTERNAL_PULL_UP) SET(PORTB, pin);
    1ee0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee2:	82 30       	cpi	r24, 0x02	; 2
    1ee4:	09 f0       	breq	.+2      	; 0x1ee8 <PushButton_Init+0xba>
    1ee6:	41 c0       	rjmp	.+130    	; 0x1f6a <PushButton_Init+0x13c>
    1ee8:	a8 e3       	ldi	r26, 0x38	; 56
    1eea:	b0 e0       	ldi	r27, 0x00	; 0
    1eec:	e8 e3       	ldi	r30, 0x38	; 56
    1eee:	f0 e0       	ldi	r31, 0x00	; 0
    1ef0:	80 81       	ld	r24, Z
    1ef2:	48 2f       	mov	r20, r24
    1ef4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ef6:	28 2f       	mov	r18, r24
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	81 e0       	ldi	r24, 0x01	; 1
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	02 2e       	mov	r0, r18
    1f00:	02 c0       	rjmp	.+4      	; 0x1f06 <PushButton_Init+0xd8>
    1f02:	88 0f       	add	r24, r24
    1f04:	99 1f       	adc	r25, r25
    1f06:	0a 94       	dec	r0
    1f08:	e2 f7       	brpl	.-8      	; 0x1f02 <PushButton_Init+0xd4>
    1f0a:	84 2b       	or	r24, r20
    1f0c:	8c 93       	st	X, r24
    1f0e:	2d c0       	rjmp	.+90     	; 0x1f6a <PushButton_Init+0x13c>
		break;
	case 'C':
		if (type == INTERNAL_PULL_UP) SET(PORTC, pin);
    1f10:	8d 81       	ldd	r24, Y+5	; 0x05
    1f12:	82 30       	cpi	r24, 0x02	; 2
    1f14:	51 f5       	brne	.+84     	; 0x1f6a <PushButton_Init+0x13c>
    1f16:	a5 e3       	ldi	r26, 0x35	; 53
    1f18:	b0 e0       	ldi	r27, 0x00	; 0
    1f1a:	e5 e3       	ldi	r30, 0x35	; 53
    1f1c:	f0 e0       	ldi	r31, 0x00	; 0
    1f1e:	80 81       	ld	r24, Z
    1f20:	48 2f       	mov	r20, r24
    1f22:	8c 81       	ldd	r24, Y+4	; 0x04
    1f24:	28 2f       	mov	r18, r24
    1f26:	30 e0       	ldi	r19, 0x00	; 0
    1f28:	81 e0       	ldi	r24, 0x01	; 1
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	02 2e       	mov	r0, r18
    1f2e:	02 c0       	rjmp	.+4      	; 0x1f34 <PushButton_Init+0x106>
    1f30:	88 0f       	add	r24, r24
    1f32:	99 1f       	adc	r25, r25
    1f34:	0a 94       	dec	r0
    1f36:	e2 f7       	brpl	.-8      	; 0x1f30 <PushButton_Init+0x102>
    1f38:	84 2b       	or	r24, r20
    1f3a:	8c 93       	st	X, r24
    1f3c:	16 c0       	rjmp	.+44     	; 0x1f6a <PushButton_Init+0x13c>
		break;
	case 'D':
		if (type == INTERNAL_PULL_UP) SET(PORTD, pin);
    1f3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f40:	82 30       	cpi	r24, 0x02	; 2
    1f42:	99 f4       	brne	.+38     	; 0x1f6a <PushButton_Init+0x13c>
    1f44:	a2 e3       	ldi	r26, 0x32	; 50
    1f46:	b0 e0       	ldi	r27, 0x00	; 0
    1f48:	e2 e3       	ldi	r30, 0x32	; 50
    1f4a:	f0 e0       	ldi	r31, 0x00	; 0
    1f4c:	80 81       	ld	r24, Z
    1f4e:	48 2f       	mov	r20, r24
    1f50:	8c 81       	ldd	r24, Y+4	; 0x04
    1f52:	28 2f       	mov	r18, r24
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	02 2e       	mov	r0, r18
    1f5c:	02 c0       	rjmp	.+4      	; 0x1f62 <PushButton_Init+0x134>
    1f5e:	88 0f       	add	r24, r24
    1f60:	99 1f       	adc	r25, r25
    1f62:	0a 94       	dec	r0
    1f64:	e2 f7       	brpl	.-8      	; 0x1f5e <PushButton_Init+0x130>
    1f66:	84 2b       	or	r24, r20
    1f68:	8c 93       	st	X, r24
		break;
	}
}
    1f6a:	27 96       	adiw	r28, 0x07	; 7
    1f6c:	0f b6       	in	r0, 0x3f	; 63
    1f6e:	f8 94       	cli
    1f70:	de bf       	out	0x3e, r29	; 62
    1f72:	0f be       	out	0x3f, r0	; 63
    1f74:	cd bf       	out	0x3d, r28	; 61
    1f76:	cf 91       	pop	r28
    1f78:	df 91       	pop	r29
    1f7a:	08 95       	ret

00001f7c <ReadButton>:
 *
 * @param button Pointer to the initialized PushButton struct.
 * @return uint8 Returns PRESSED or RELEASED.
 */
uint8 ReadButton(PushButton* button)
{
    1f7c:	df 93       	push	r29
    1f7e:	cf 93       	push	r28
    1f80:	00 d0       	rcall	.+0      	; 0x1f82 <ReadButton+0x6>
    1f82:	00 d0       	rcall	.+0      	; 0x1f84 <ReadButton+0x8>
    1f84:	cd b7       	in	r28, 0x3d	; 61
    1f86:	de b7       	in	r29, 0x3e	; 62
    1f88:	9c 83       	std	Y+4, r25	; 0x04
    1f8a:	8b 83       	std	Y+3, r24	; 0x03
	uint8 PinBinaryState = ReadPin(button->port, button->pin);
    1f8c:	eb 81       	ldd	r30, Y+3	; 0x03
    1f8e:	fc 81       	ldd	r31, Y+4	; 0x04
    1f90:	80 81       	ld	r24, Z
    1f92:	eb 81       	ldd	r30, Y+3	; 0x03
    1f94:	fc 81       	ldd	r31, Y+4	; 0x04
    1f96:	91 81       	ldd	r25, Z+1	; 0x01
    1f98:	69 2f       	mov	r22, r25
    1f9a:	0e 94 3e 0c 	call	0x187c	; 0x187c <ReadPin>
    1f9e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 ButtonReading = RELEASED;
    1fa0:	19 82       	std	Y+1, r1	; 0x01

	switch (button->type)
    1fa2:	eb 81       	ldd	r30, Y+3	; 0x03
    1fa4:	fc 81       	ldd	r31, Y+4	; 0x04
    1fa6:	82 81       	ldd	r24, Z+2	; 0x02
    1fa8:	88 2f       	mov	r24, r24
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	00 97       	sbiw	r24, 0x00	; 0
    1fae:	39 f4       	brne	.+14     	; 0x1fbe <ReadButton+0x42>
	{
	case PULL_DOWN:
		ButtonReading = (PinBinaryState == HIGH) ? PRESSED : RELEASED;
    1fb0:	19 82       	std	Y+1, r1	; 0x01
    1fb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb4:	81 30       	cpi	r24, 0x01	; 1
    1fb6:	49 f4       	brne	.+18     	; 0x1fca <ReadButton+0x4e>
    1fb8:	81 e0       	ldi	r24, 0x01	; 1
    1fba:	89 83       	std	Y+1, r24	; 0x01
    1fbc:	06 c0       	rjmp	.+12     	; 0x1fca <ReadButton+0x4e>
		break;
	default: // INTERNAL_PULL_UP
		ButtonReading = (PinBinaryState == LOW) ? PRESSED : RELEASED;
    1fbe:	19 82       	std	Y+1, r1	; 0x01
    1fc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc2:	88 23       	and	r24, r24
    1fc4:	11 f4       	brne	.+4      	; 0x1fca <ReadButton+0x4e>
    1fc6:	81 e0       	ldi	r24, 0x01	; 1
    1fc8:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return ButtonReading;
    1fca:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fcc:	0f 90       	pop	r0
    1fce:	0f 90       	pop	r0
    1fd0:	0f 90       	pop	r0
    1fd2:	0f 90       	pop	r0
    1fd4:	cf 91       	pop	r28
    1fd6:	df 91       	pop	r29
    1fd8:	08 95       	ret

00001fda <SevenSegment_Init>:
 * @param mySeg Pointer to the SevenSegment struct to initialize.
 * @param dataPort Port character ('A', 'B', 'C', or 'D') used for data lines.
 * @param dataPins Bitmask indicating which pins on the port are used (e.g., 0x0F for pins 0–3).
 */
void SevenSegment_Init(SevenSegment* mySeg, uint8 dataPort, uint8 dataPins)
{
    1fda:	df 93       	push	r29
    1fdc:	cf 93       	push	r28
    1fde:	cd b7       	in	r28, 0x3d	; 61
    1fe0:	de b7       	in	r29, 0x3e	; 62
    1fe2:	2a 97       	sbiw	r28, 0x0a	; 10
    1fe4:	0f b6       	in	r0, 0x3f	; 63
    1fe6:	f8 94       	cli
    1fe8:	de bf       	out	0x3e, r29	; 62
    1fea:	0f be       	out	0x3f, r0	; 63
    1fec:	cd bf       	out	0x3d, r28	; 61
    1fee:	98 87       	std	Y+8, r25	; 0x08
    1ff0:	8f 83       	std	Y+7, r24	; 0x07
    1ff2:	69 87       	std	Y+9, r22	; 0x09
    1ff4:	4a 87       	std	Y+10, r20	; 0x0a
	mySeg->dataPort = dataPort;
    1ff6:	ef 81       	ldd	r30, Y+7	; 0x07
    1ff8:	f8 85       	ldd	r31, Y+8	; 0x08
    1ffa:	89 85       	ldd	r24, Y+9	; 0x09
    1ffc:	80 83       	st	Z, r24
	mySeg->dataMusk = dataPins;
    1ffe:	ef 81       	ldd	r30, Y+7	; 0x07
    2000:	f8 85       	ldd	r31, Y+8	; 0x08
    2002:	8a 85       	ldd	r24, Y+10	; 0x0a
    2004:	85 83       	std	Z+5, r24	; 0x05

	// Extract and store pin numbers from bitmask
	for (int i = 0, j = 0; i < REGISTER_SIZE; i++)
    2006:	1e 82       	std	Y+6, r1	; 0x06
    2008:	1d 82       	std	Y+5, r1	; 0x05
    200a:	1c 82       	std	Y+4, r1	; 0x04
    200c:	1b 82       	std	Y+3, r1	; 0x03
    200e:	21 c0       	rjmp	.+66     	; 0x2052 <SevenSegment_Init+0x78>
	{
		if (dataPins & (1 << i))
    2010:	8a 85       	ldd	r24, Y+10	; 0x0a
    2012:	88 2f       	mov	r24, r24
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	0d 80       	ldd	r0, Y+5	; 0x05
    2018:	02 c0       	rjmp	.+4      	; 0x201e <SevenSegment_Init+0x44>
    201a:	95 95       	asr	r25
    201c:	87 95       	ror	r24
    201e:	0a 94       	dec	r0
    2020:	e2 f7       	brpl	.-8      	; 0x201a <SevenSegment_Init+0x40>
    2022:	81 70       	andi	r24, 0x01	; 1
    2024:	90 70       	andi	r25, 0x00	; 0
    2026:	88 23       	and	r24, r24
    2028:	79 f0       	breq	.+30     	; 0x2048 <SevenSegment_Init+0x6e>
		{
			mySeg->dataPins[j++] = i;
    202a:	2b 81       	ldd	r18, Y+3	; 0x03
    202c:	3c 81       	ldd	r19, Y+4	; 0x04
    202e:	4d 81       	ldd	r20, Y+5	; 0x05
    2030:	8f 81       	ldd	r24, Y+7	; 0x07
    2032:	98 85       	ldd	r25, Y+8	; 0x08
    2034:	82 0f       	add	r24, r18
    2036:	93 1f       	adc	r25, r19
    2038:	fc 01       	movw	r30, r24
    203a:	31 96       	adiw	r30, 0x01	; 1
    203c:	40 83       	st	Z, r20
    203e:	8b 81       	ldd	r24, Y+3	; 0x03
    2040:	9c 81       	ldd	r25, Y+4	; 0x04
    2042:	01 96       	adiw	r24, 0x01	; 1
    2044:	9c 83       	std	Y+4, r25	; 0x04
    2046:	8b 83       	std	Y+3, r24	; 0x03
{
	mySeg->dataPort = dataPort;
	mySeg->dataMusk = dataPins;

	// Extract and store pin numbers from bitmask
	for (int i = 0, j = 0; i < REGISTER_SIZE; i++)
    2048:	8d 81       	ldd	r24, Y+5	; 0x05
    204a:	9e 81       	ldd	r25, Y+6	; 0x06
    204c:	01 96       	adiw	r24, 0x01	; 1
    204e:	9e 83       	std	Y+6, r25	; 0x06
    2050:	8d 83       	std	Y+5, r24	; 0x05
    2052:	8d 81       	ldd	r24, Y+5	; 0x05
    2054:	9e 81       	ldd	r25, Y+6	; 0x06
    2056:	88 30       	cpi	r24, 0x08	; 8
    2058:	91 05       	cpc	r25, r1
    205a:	d4 f2       	brlt	.-76     	; 0x2010 <SevenSegment_Init+0x36>
			mySeg->dataPins[j++] = i;
		}
	}

	// Set each of the data pins as output
	for (int i = 0; i < NUM_DATA_PINS; i++)
    205c:	1a 82       	std	Y+2, r1	; 0x02
    205e:	19 82       	std	Y+1, r1	; 0x01
    2060:	16 c0       	rjmp	.+44     	; 0x208e <SevenSegment_Init+0xb4>
	{
		SetPin(mySeg->dataPort, mySeg->dataPins[i], OUTPUT);
    2062:	ef 81       	ldd	r30, Y+7	; 0x07
    2064:	f8 85       	ldd	r31, Y+8	; 0x08
    2066:	40 81       	ld	r20, Z
    2068:	29 81       	ldd	r18, Y+1	; 0x01
    206a:	3a 81       	ldd	r19, Y+2	; 0x02
    206c:	8f 81       	ldd	r24, Y+7	; 0x07
    206e:	98 85       	ldd	r25, Y+8	; 0x08
    2070:	82 0f       	add	r24, r18
    2072:	93 1f       	adc	r25, r19
    2074:	fc 01       	movw	r30, r24
    2076:	31 96       	adiw	r30, 0x01	; 1
    2078:	90 81       	ld	r25, Z
    207a:	84 2f       	mov	r24, r20
    207c:	69 2f       	mov	r22, r25
    207e:	41 e0       	ldi	r20, 0x01	; 1
    2080:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <SetPin>
			mySeg->dataPins[j++] = i;
		}
	}

	// Set each of the data pins as output
	for (int i = 0; i < NUM_DATA_PINS; i++)
    2084:	89 81       	ldd	r24, Y+1	; 0x01
    2086:	9a 81       	ldd	r25, Y+2	; 0x02
    2088:	01 96       	adiw	r24, 0x01	; 1
    208a:	9a 83       	std	Y+2, r25	; 0x02
    208c:	89 83       	std	Y+1, r24	; 0x01
    208e:	89 81       	ldd	r24, Y+1	; 0x01
    2090:	9a 81       	ldd	r25, Y+2	; 0x02
    2092:	84 30       	cpi	r24, 0x04	; 4
    2094:	91 05       	cpc	r25, r1
    2096:	2c f3       	brlt	.-54     	; 0x2062 <SevenSegment_Init+0x88>
	{
		SetPin(mySeg->dataPort, mySeg->dataPins[i], OUTPUT);
	}

	WriteSevenSegment(mySeg, 0); // Display 0 initially
    2098:	8f 81       	ldd	r24, Y+7	; 0x07
    209a:	98 85       	ldd	r25, Y+8	; 0x08
    209c:	60 e0       	ldi	r22, 0x00	; 0
    209e:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <WriteSevenSegment>
}
    20a2:	2a 96       	adiw	r28, 0x0a	; 10
    20a4:	0f b6       	in	r0, 0x3f	; 63
    20a6:	f8 94       	cli
    20a8:	de bf       	out	0x3e, r29	; 62
    20aa:	0f be       	out	0x3f, r0	; 63
    20ac:	cd bf       	out	0x3d, r28	; 61
    20ae:	cf 91       	pop	r28
    20b0:	df 91       	pop	r29
    20b2:	08 95       	ret

000020b4 <WriteSevenSegment>:
 *
 * @param mySeg Pointer to the initialized SevenSegment struct.
 * @param data 4-bit number to display (usually 0–9 for digits).
 */
void WriteSevenSegment(SevenSegment* mySeg, uint8 data)
{
    20b4:	df 93       	push	r29
    20b6:	cf 93       	push	r28
    20b8:	00 d0       	rcall	.+0      	; 0x20ba <WriteSevenSegment+0x6>
    20ba:	00 d0       	rcall	.+0      	; 0x20bc <WriteSevenSegment+0x8>
    20bc:	0f 92       	push	r0
    20be:	cd b7       	in	r28, 0x3d	; 61
    20c0:	de b7       	in	r29, 0x3e	; 62
    20c2:	9c 83       	std	Y+4, r25	; 0x04
    20c4:	8b 83       	std	Y+3, r24	; 0x03
    20c6:	6d 83       	std	Y+5, r22	; 0x05
	for (int i = 0; i < NUM_DATA_PINS; i++)
    20c8:	1a 82       	std	Y+2, r1	; 0x02
    20ca:	19 82       	std	Y+1, r1	; 0x01
    20cc:	21 c0       	rjmp	.+66     	; 0x2110 <WriteSevenSegment+0x5c>
	{
		WritePin(mySeg->dataPort, mySeg->dataPins[i], (data & (1 << i)) ? HIGH : LOW);
    20ce:	eb 81       	ldd	r30, Y+3	; 0x03
    20d0:	fc 81       	ldd	r31, Y+4	; 0x04
    20d2:	40 81       	ld	r20, Z
    20d4:	29 81       	ldd	r18, Y+1	; 0x01
    20d6:	3a 81       	ldd	r19, Y+2	; 0x02
    20d8:	8b 81       	ldd	r24, Y+3	; 0x03
    20da:	9c 81       	ldd	r25, Y+4	; 0x04
    20dc:	82 0f       	add	r24, r18
    20de:	93 1f       	adc	r25, r19
    20e0:	fc 01       	movw	r30, r24
    20e2:	31 96       	adiw	r30, 0x01	; 1
    20e4:	20 81       	ld	r18, Z
    20e6:	8d 81       	ldd	r24, Y+5	; 0x05
    20e8:	88 2f       	mov	r24, r24
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	09 80       	ldd	r0, Y+1	; 0x01
    20ee:	02 c0       	rjmp	.+4      	; 0x20f4 <WriteSevenSegment+0x40>
    20f0:	95 95       	asr	r25
    20f2:	87 95       	ror	r24
    20f4:	0a 94       	dec	r0
    20f6:	e2 f7       	brpl	.-8      	; 0x20f0 <WriteSevenSegment+0x3c>
    20f8:	98 2f       	mov	r25, r24
    20fa:	91 70       	andi	r25, 0x01	; 1
    20fc:	84 2f       	mov	r24, r20
    20fe:	62 2f       	mov	r22, r18
    2100:	49 2f       	mov	r20, r25
    2102:	0e 94 4c 0b 	call	0x1698	; 0x1698 <WritePin>
 * @param mySeg Pointer to the initialized SevenSegment struct.
 * @param data 4-bit number to display (usually 0–9 for digits).
 */
void WriteSevenSegment(SevenSegment* mySeg, uint8 data)
{
	for (int i = 0; i < NUM_DATA_PINS; i++)
    2106:	89 81       	ldd	r24, Y+1	; 0x01
    2108:	9a 81       	ldd	r25, Y+2	; 0x02
    210a:	01 96       	adiw	r24, 0x01	; 1
    210c:	9a 83       	std	Y+2, r25	; 0x02
    210e:	89 83       	std	Y+1, r24	; 0x01
    2110:	89 81       	ldd	r24, Y+1	; 0x01
    2112:	9a 81       	ldd	r25, Y+2	; 0x02
    2114:	84 30       	cpi	r24, 0x04	; 4
    2116:	91 05       	cpc	r25, r1
    2118:	d4 f2       	brlt	.-76     	; 0x20ce <WriteSevenSegment+0x1a>
	{
		WritePin(mySeg->dataPort, mySeg->dataPins[i], (data & (1 << i)) ? HIGH : LOW);
	}
}
    211a:	0f 90       	pop	r0
    211c:	0f 90       	pop	r0
    211e:	0f 90       	pop	r0
    2120:	0f 90       	pop	r0
    2122:	0f 90       	pop	r0
    2124:	cf 91       	pop	r28
    2126:	df 91       	pop	r29
    2128:	08 95       	ret

0000212a <Timer0_Normal_Init>:
static TimerSetting Timer1_Pre;
static TimerSetting Timer2_Pre;


void Timer0_Normal_Init(TimerSetting preScalar, TimerTechnique technique)
{
    212a:	df 93       	push	r29
    212c:	cf 93       	push	r28
    212e:	00 d0       	rcall	.+0      	; 0x2130 <Timer0_Normal_Init+0x6>
    2130:	cd b7       	in	r28, 0x3d	; 61
    2132:	de b7       	in	r29, 0x3e	; 62
    2134:	89 83       	std	Y+1, r24	; 0x01
    2136:	6a 83       	std	Y+2, r22	; 0x02
	// store pre-scalar for resume function
	Timer0_Pre = preScalar;
    2138:	89 81       	ldd	r24, Y+1	; 0x01
    213a:	80 93 6c 00 	sts	0x006C, r24

	//Set Timer initial value to 0
	TCNT0 = 0;
    213e:	e2 e5       	ldi	r30, 0x52	; 82
    2140:	f0 e0       	ldi	r31, 0x00	; 0
    2142:	10 82       	st	Z, r1

	// specify timer mode
	CLEAR(TCCR0, WGM00);
    2144:	a3 e5       	ldi	r26, 0x53	; 83
    2146:	b0 e0       	ldi	r27, 0x00	; 0
    2148:	e3 e5       	ldi	r30, 0x53	; 83
    214a:	f0 e0       	ldi	r31, 0x00	; 0
    214c:	80 81       	ld	r24, Z
    214e:	8f 7b       	andi	r24, 0xBF	; 191
    2150:	8c 93       	st	X, r24
	CLEAR(TCCR0, WGM01);
    2152:	a3 e5       	ldi	r26, 0x53	; 83
    2154:	b0 e0       	ldi	r27, 0x00	; 0
    2156:	e3 e5       	ldi	r30, 0x53	; 83
    2158:	f0 e0       	ldi	r31, 0x00	; 0
    215a:	80 81       	ld	r24, Z
    215c:	87 7f       	andi	r24, 0xF7	; 247
    215e:	8c 93       	st	X, r24

	SetPreScalar(Timer0, preScalar);
    2160:	80 e0       	ldi	r24, 0x00	; 0
    2162:	69 81       	ldd	r22, Y+1	; 0x01
    2164:	0e 94 8b 12 	call	0x2516	; 0x2516 <SetPreScalar>

	// for Non PWM mode FOC0=1
	SET(TCCR0, FOC0);
    2168:	a3 e5       	ldi	r26, 0x53	; 83
    216a:	b0 e0       	ldi	r27, 0x00	; 0
    216c:	e3 e5       	ldi	r30, 0x53	; 83
    216e:	f0 e0       	ldi	r31, 0x00	; 0
    2170:	80 81       	ld	r24, Z
    2172:	80 68       	ori	r24, 0x80	; 128
    2174:	8c 93       	st	X, r24

	if (technique == INTERRUPT)
    2176:	8a 81       	ldd	r24, Y+2	; 0x02
    2178:	81 30       	cpi	r24, 0x01	; 1
    217a:	41 f4       	brne	.+16     	; 0x218c <Timer0_Normal_Init+0x62>
	{
		SET(TIMSK, TOIE0); // Enable Timer0 Overflow Interrupt
    217c:	a9 e5       	ldi	r26, 0x59	; 89
    217e:	b0 e0       	ldi	r27, 0x00	; 0
    2180:	e9 e5       	ldi	r30, 0x59	; 89
    2182:	f0 e0       	ldi	r31, 0x00	; 0
    2184:	80 81       	ld	r24, Z
    2186:	81 60       	ori	r24, 0x01	; 1
    2188:	8c 93       	st	X, r24
		sei();
    218a:	78 94       	sei
	}
}
    218c:	0f 90       	pop	r0
    218e:	0f 90       	pop	r0
    2190:	cf 91       	pop	r28
    2192:	df 91       	pop	r29
    2194:	08 95       	ret

00002196 <Timer1_Normal_Init>:
void Timer1_Normal_Init(TimerSetting preScalar, TimerTechnique technique)
{
    2196:	df 93       	push	r29
    2198:	cf 93       	push	r28
    219a:	00 d0       	rcall	.+0      	; 0x219c <Timer1_Normal_Init+0x6>
    219c:	cd b7       	in	r28, 0x3d	; 61
    219e:	de b7       	in	r29, 0x3e	; 62
    21a0:	89 83       	std	Y+1, r24	; 0x01
    21a2:	6a 83       	std	Y+2, r22	; 0x02
	// store pre-scalar for resume function
	Timer1_Pre = preScalar;
    21a4:	89 81       	ldd	r24, Y+1	; 0x01
    21a6:	80 93 6d 00 	sts	0x006D, r24

    // Set Timer initial value to 0
    TCNT1 = 0;
    21aa:	ec e4       	ldi	r30, 0x4C	; 76
    21ac:	f0 e0       	ldi	r31, 0x00	; 0
    21ae:	11 82       	std	Z+1, r1	; 0x01
    21b0:	10 82       	st	Z, r1

    // Specify timer mode (Normal mode)
    CLEAR(TCCR1A, WGM10);
    21b2:	af e4       	ldi	r26, 0x4F	; 79
    21b4:	b0 e0       	ldi	r27, 0x00	; 0
    21b6:	ef e4       	ldi	r30, 0x4F	; 79
    21b8:	f0 e0       	ldi	r31, 0x00	; 0
    21ba:	80 81       	ld	r24, Z
    21bc:	8e 7f       	andi	r24, 0xFE	; 254
    21be:	8c 93       	st	X, r24
    CLEAR(TCCR1A, WGM11);
    21c0:	af e4       	ldi	r26, 0x4F	; 79
    21c2:	b0 e0       	ldi	r27, 0x00	; 0
    21c4:	ef e4       	ldi	r30, 0x4F	; 79
    21c6:	f0 e0       	ldi	r31, 0x00	; 0
    21c8:	80 81       	ld	r24, Z
    21ca:	8d 7f       	andi	r24, 0xFD	; 253
    21cc:	8c 93       	st	X, r24
    CLEAR(TCCR1B, WGM12);
    21ce:	ae e4       	ldi	r26, 0x4E	; 78
    21d0:	b0 e0       	ldi	r27, 0x00	; 0
    21d2:	ee e4       	ldi	r30, 0x4E	; 78
    21d4:	f0 e0       	ldi	r31, 0x00	; 0
    21d6:	80 81       	ld	r24, Z
    21d8:	87 7f       	andi	r24, 0xF7	; 247
    21da:	8c 93       	st	X, r24
    CLEAR(TCCR1B, WGM13);
    21dc:	ae e4       	ldi	r26, 0x4E	; 78
    21de:	b0 e0       	ldi	r27, 0x00	; 0
    21e0:	ee e4       	ldi	r30, 0x4E	; 78
    21e2:	f0 e0       	ldi	r31, 0x00	; 0
    21e4:	80 81       	ld	r24, Z
    21e6:	8f 7e       	andi	r24, 0xEF	; 239
    21e8:	8c 93       	st	X, r24

    SetPreScalar(Timer1, preScalar);
    21ea:	81 e0       	ldi	r24, 0x01	; 1
    21ec:	69 81       	ldd	r22, Y+1	; 0x01
    21ee:	0e 94 8b 12 	call	0x2516	; 0x2516 <SetPreScalar>

    // For Non-PWM mode, force compare
    SET(TCCR1A, FOC1A);
    21f2:	af e4       	ldi	r26, 0x4F	; 79
    21f4:	b0 e0       	ldi	r27, 0x00	; 0
    21f6:	ef e4       	ldi	r30, 0x4F	; 79
    21f8:	f0 e0       	ldi	r31, 0x00	; 0
    21fa:	80 81       	ld	r24, Z
    21fc:	88 60       	ori	r24, 0x08	; 8
    21fe:	8c 93       	st	X, r24
    SET(TCCR1A, FOC1B);
    2200:	af e4       	ldi	r26, 0x4F	; 79
    2202:	b0 e0       	ldi	r27, 0x00	; 0
    2204:	ef e4       	ldi	r30, 0x4F	; 79
    2206:	f0 e0       	ldi	r31, 0x00	; 0
    2208:	80 81       	ld	r24, Z
    220a:	84 60       	ori	r24, 0x04	; 4
    220c:	8c 93       	st	X, r24

    if (technique == INTERRUPT)
    220e:	8a 81       	ldd	r24, Y+2	; 0x02
    2210:	81 30       	cpi	r24, 0x01	; 1
    2212:	41 f4       	brne	.+16     	; 0x2224 <Timer1_Normal_Init+0x8e>
    {
        SET(TIMSK, TOIE1); // Enable Timer1 Overflow Interrupt
    2214:	a9 e5       	ldi	r26, 0x59	; 89
    2216:	b0 e0       	ldi	r27, 0x00	; 0
    2218:	e9 e5       	ldi	r30, 0x59	; 89
    221a:	f0 e0       	ldi	r31, 0x00	; 0
    221c:	80 81       	ld	r24, Z
    221e:	84 60       	ori	r24, 0x04	; 4
    2220:	8c 93       	st	X, r24
		sei();
    2222:	78 94       	sei
    }
}
    2224:	0f 90       	pop	r0
    2226:	0f 90       	pop	r0
    2228:	cf 91       	pop	r28
    222a:	df 91       	pop	r29
    222c:	08 95       	ret

0000222e <Timer2_Normal_Init>:

void Timer2_Normal_Init(TimerSetting preScalar, TimerTechnique technique)
{
    222e:	df 93       	push	r29
    2230:	cf 93       	push	r28
    2232:	00 d0       	rcall	.+0      	; 0x2234 <Timer2_Normal_Init+0x6>
    2234:	cd b7       	in	r28, 0x3d	; 61
    2236:	de b7       	in	r29, 0x3e	; 62
    2238:	89 83       	std	Y+1, r24	; 0x01
    223a:	6a 83       	std	Y+2, r22	; 0x02
	// store pre-scalar for resume function
	Timer2_Pre = preScalar;
    223c:	89 81       	ldd	r24, Y+1	; 0x01
    223e:	80 93 6e 00 	sts	0x006E, r24

    // Set Timer initial value to 0
    TCNT2 = 0;
    2242:	e4 e4       	ldi	r30, 0x44	; 68
    2244:	f0 e0       	ldi	r31, 0x00	; 0
    2246:	10 82       	st	Z, r1

    // Specify timer mode (Normal mode)
    CLEAR(TCCR2, WGM20);
    2248:	a5 e4       	ldi	r26, 0x45	; 69
    224a:	b0 e0       	ldi	r27, 0x00	; 0
    224c:	e5 e4       	ldi	r30, 0x45	; 69
    224e:	f0 e0       	ldi	r31, 0x00	; 0
    2250:	80 81       	ld	r24, Z
    2252:	8f 7b       	andi	r24, 0xBF	; 191
    2254:	8c 93       	st	X, r24
    CLEAR(TCCR2, WGM21);
    2256:	a5 e4       	ldi	r26, 0x45	; 69
    2258:	b0 e0       	ldi	r27, 0x00	; 0
    225a:	e5 e4       	ldi	r30, 0x45	; 69
    225c:	f0 e0       	ldi	r31, 0x00	; 0
    225e:	80 81       	ld	r24, Z
    2260:	87 7f       	andi	r24, 0xF7	; 247
    2262:	8c 93       	st	X, r24

    SetPreScalar(Timer2, preScalar);
    2264:	82 e0       	ldi	r24, 0x02	; 2
    2266:	69 81       	ldd	r22, Y+1	; 0x01
    2268:	0e 94 8b 12 	call	0x2516	; 0x2516 <SetPreScalar>

    // For Non-PWM mode, force compare
    SET(TCCR2, FOC2);
    226c:	a5 e4       	ldi	r26, 0x45	; 69
    226e:	b0 e0       	ldi	r27, 0x00	; 0
    2270:	e5 e4       	ldi	r30, 0x45	; 69
    2272:	f0 e0       	ldi	r31, 0x00	; 0
    2274:	80 81       	ld	r24, Z
    2276:	80 68       	ori	r24, 0x80	; 128
    2278:	8c 93       	st	X, r24

    if (technique == INTERRUPT)
    227a:	8a 81       	ldd	r24, Y+2	; 0x02
    227c:	81 30       	cpi	r24, 0x01	; 1
    227e:	41 f4       	brne	.+16     	; 0x2290 <Timer2_Normal_Init+0x62>
    {
        SET(TIMSK, TOIE2); // Enable Timer2 Overflow Interrupt
    2280:	a9 e5       	ldi	r26, 0x59	; 89
    2282:	b0 e0       	ldi	r27, 0x00	; 0
    2284:	e9 e5       	ldi	r30, 0x59	; 89
    2286:	f0 e0       	ldi	r31, 0x00	; 0
    2288:	80 81       	ld	r24, Z
    228a:	80 64       	ori	r24, 0x40	; 64
    228c:	8c 93       	st	X, r24
		sei();
    228e:	78 94       	sei
    }
}
    2290:	0f 90       	pop	r0
    2292:	0f 90       	pop	r0
    2294:	cf 91       	pop	r28
    2296:	df 91       	pop	r29
    2298:	08 95       	ret

0000229a <Timer0_CTC_Init>:


void Timer0_CTC_Init(uint8 compareVal, TimerSetting preScalar)
{
    229a:	df 93       	push	r29
    229c:	cf 93       	push	r28
    229e:	00 d0       	rcall	.+0      	; 0x22a0 <Timer0_CTC_Init+0x6>
    22a0:	cd b7       	in	r28, 0x3d	; 61
    22a2:	de b7       	in	r29, 0x3e	; 62
    22a4:	89 83       	std	Y+1, r24	; 0x01
    22a6:	6a 83       	std	Y+2, r22	; 0x02
    cli();
    22a8:	f8 94       	cli
	// store pre-scalar for resume function
	Timer0_Pre = preScalar;
    22aa:	8a 81       	ldd	r24, Y+2	; 0x02
    22ac:	80 93 6c 00 	sts	0x006C, r24

	// Set Timer initial value to 0
    TCNT0 = 0;
    22b0:	e2 e5       	ldi	r30, 0x52	; 82
    22b2:	f0 e0       	ldi	r31, 0x00	; 0
    22b4:	10 82       	st	Z, r1

    OCR0 = compareVal; // Set Compare Value
    22b6:	ec e5       	ldi	r30, 0x5C	; 92
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	89 81       	ldd	r24, Y+1	; 0x01
    22bc:	80 83       	st	Z, r24

    CLEAR(TCCR0, WGM00);
    22be:	a3 e5       	ldi	r26, 0x53	; 83
    22c0:	b0 e0       	ldi	r27, 0x00	; 0
    22c2:	e3 e5       	ldi	r30, 0x53	; 83
    22c4:	f0 e0       	ldi	r31, 0x00	; 0
    22c6:	80 81       	ld	r24, Z
    22c8:	8f 7b       	andi	r24, 0xBF	; 191
    22ca:	8c 93       	st	X, r24
    SET(TCCR0, WGM01);
    22cc:	a3 e5       	ldi	r26, 0x53	; 83
    22ce:	b0 e0       	ldi	r27, 0x00	; 0
    22d0:	e3 e5       	ldi	r30, 0x53	; 83
    22d2:	f0 e0       	ldi	r31, 0x00	; 0
    22d4:	80 81       	ld	r24, Z
    22d6:	88 60       	ori	r24, 0x08	; 8
    22d8:	8c 93       	st	X, r24

    SetPreScalar(Timer0, preScalar);
    22da:	80 e0       	ldi	r24, 0x00	; 0
    22dc:	6a 81       	ldd	r22, Y+2	; 0x02
    22de:	0e 94 8b 12 	call	0x2516	; 0x2516 <SetPreScalar>

    SET(TCCR0, FOC0);
    22e2:	a3 e5       	ldi	r26, 0x53	; 83
    22e4:	b0 e0       	ldi	r27, 0x00	; 0
    22e6:	e3 e5       	ldi	r30, 0x53	; 83
    22e8:	f0 e0       	ldi	r31, 0x00	; 0
    22ea:	80 81       	ld	r24, Z
    22ec:	80 68       	ori	r24, 0x80	; 128
    22ee:	8c 93       	st	X, r24

    SET(TIMSK, OCIE0); // Enable Timer0 Compare Interrupt
    22f0:	a9 e5       	ldi	r26, 0x59	; 89
    22f2:	b0 e0       	ldi	r27, 0x00	; 0
    22f4:	e9 e5       	ldi	r30, 0x59	; 89
    22f6:	f0 e0       	ldi	r31, 0x00	; 0
    22f8:	80 81       	ld	r24, Z
    22fa:	82 60       	ori	r24, 0x02	; 2
    22fc:	8c 93       	st	X, r24
    sei();
    22fe:	78 94       	sei
}
    2300:	0f 90       	pop	r0
    2302:	0f 90       	pop	r0
    2304:	cf 91       	pop	r28
    2306:	df 91       	pop	r29
    2308:	08 95       	ret

0000230a <Timer1_CTC_Init>:

void Timer1_CTC_Init(uint16 compareVal, TimerSetting preScalar)
{
    230a:	df 93       	push	r29
    230c:	cf 93       	push	r28
    230e:	00 d0       	rcall	.+0      	; 0x2310 <Timer1_CTC_Init+0x6>
    2310:	0f 92       	push	r0
    2312:	cd b7       	in	r28, 0x3d	; 61
    2314:	de b7       	in	r29, 0x3e	; 62
    2316:	9a 83       	std	Y+2, r25	; 0x02
    2318:	89 83       	std	Y+1, r24	; 0x01
    231a:	6b 83       	std	Y+3, r22	; 0x03

    cli();                      // Disable interrupts
    231c:	f8 94       	cli
	Timer1_Pre = preScalar;		// store pre-scalar for resume function
    231e:	8b 81       	ldd	r24, Y+3	; 0x03
    2320:	80 93 6d 00 	sts	0x006D, r24
    TCNT1 = 0;                  // Reset Timer1 counter
    2324:	ec e4       	ldi	r30, 0x4C	; 76
    2326:	f0 e0       	ldi	r31, 0x00	; 0
    2328:	11 82       	std	Z+1, r1	; 0x01
    232a:	10 82       	st	Z, r1

    OCR1A = compareVal;         // Set compare value for Channel A
    232c:	ea e4       	ldi	r30, 0x4A	; 74
    232e:	f0 e0       	ldi	r31, 0x00	; 0
    2330:	89 81       	ldd	r24, Y+1	; 0x01
    2332:	9a 81       	ldd	r25, Y+2	; 0x02
    2334:	91 83       	std	Z+1, r25	; 0x01
    2336:	80 83       	st	Z, r24

    // Configure CTC mode (WGM13:0 = 0100)
    CLEAR(TCCR1A, WGM10);
    2338:	af e4       	ldi	r26, 0x4F	; 79
    233a:	b0 e0       	ldi	r27, 0x00	; 0
    233c:	ef e4       	ldi	r30, 0x4F	; 79
    233e:	f0 e0       	ldi	r31, 0x00	; 0
    2340:	80 81       	ld	r24, Z
    2342:	8e 7f       	andi	r24, 0xFE	; 254
    2344:	8c 93       	st	X, r24
    CLEAR(TCCR1A, WGM11);
    2346:	af e4       	ldi	r26, 0x4F	; 79
    2348:	b0 e0       	ldi	r27, 0x00	; 0
    234a:	ef e4       	ldi	r30, 0x4F	; 79
    234c:	f0 e0       	ldi	r31, 0x00	; 0
    234e:	80 81       	ld	r24, Z
    2350:	8d 7f       	andi	r24, 0xFD	; 253
    2352:	8c 93       	st	X, r24
    SET(TCCR1B, WGM12);
    2354:	ae e4       	ldi	r26, 0x4E	; 78
    2356:	b0 e0       	ldi	r27, 0x00	; 0
    2358:	ee e4       	ldi	r30, 0x4E	; 78
    235a:	f0 e0       	ldi	r31, 0x00	; 0
    235c:	80 81       	ld	r24, Z
    235e:	88 60       	ori	r24, 0x08	; 8
    2360:	8c 93       	st	X, r24
    CLEAR(TCCR1B, WGM13);
    2362:	ae e4       	ldi	r26, 0x4E	; 78
    2364:	b0 e0       	ldi	r27, 0x00	; 0
    2366:	ee e4       	ldi	r30, 0x4E	; 78
    2368:	f0 e0       	ldi	r31, 0x00	; 0
    236a:	80 81       	ld	r24, Z
    236c:	8f 7e       	andi	r24, 0xEF	; 239
    236e:	8c 93       	st	X, r24

    SetPreScalar(Timer1, preScalar);
    2370:	81 e0       	ldi	r24, 0x01	; 1
    2372:	6b 81       	ldd	r22, Y+3	; 0x03
    2374:	0e 94 8b 12 	call	0x2516	; 0x2516 <SetPreScalar>

    // Force compare (non-PWM mode)
    SET(TCCR1A, FOC1A);
    2378:	af e4       	ldi	r26, 0x4F	; 79
    237a:	b0 e0       	ldi	r27, 0x00	; 0
    237c:	ef e4       	ldi	r30, 0x4F	; 79
    237e:	f0 e0       	ldi	r31, 0x00	; 0
    2380:	80 81       	ld	r24, Z
    2382:	88 60       	ori	r24, 0x08	; 8
    2384:	8c 93       	st	X, r24
    SET(TCCR1A, FOC1B);
    2386:	af e4       	ldi	r26, 0x4F	; 79
    2388:	b0 e0       	ldi	r27, 0x00	; 0
    238a:	ef e4       	ldi	r30, 0x4F	; 79
    238c:	f0 e0       	ldi	r31, 0x00	; 0
    238e:	80 81       	ld	r24, Z
    2390:	84 60       	ori	r24, 0x04	; 4
    2392:	8c 93       	st	X, r24

    SET(TIMSK, OCIE1A);     	// Enable Timer1 Compare A Match Interrupt
    2394:	a9 e5       	ldi	r26, 0x59	; 89
    2396:	b0 e0       	ldi	r27, 0x00	; 0
    2398:	e9 e5       	ldi	r30, 0x59	; 89
    239a:	f0 e0       	ldi	r31, 0x00	; 0
    239c:	80 81       	ld	r24, Z
    239e:	80 61       	ori	r24, 0x10	; 16
    23a0:	8c 93       	st	X, r24

    sei();                      // Enable interrupts
    23a2:	78 94       	sei
}
    23a4:	0f 90       	pop	r0
    23a6:	0f 90       	pop	r0
    23a8:	0f 90       	pop	r0
    23aa:	cf 91       	pop	r28
    23ac:	df 91       	pop	r29
    23ae:	08 95       	ret

000023b0 <Timer2_CTC_Init>:

void Timer2_CTC_Init(uint8 compareVal, TimerSetting preScalar)
{
    23b0:	df 93       	push	r29
    23b2:	cf 93       	push	r28
    23b4:	00 d0       	rcall	.+0      	; 0x23b6 <Timer2_CTC_Init+0x6>
    23b6:	cd b7       	in	r28, 0x3d	; 61
    23b8:	de b7       	in	r29, 0x3e	; 62
    23ba:	89 83       	std	Y+1, r24	; 0x01
    23bc:	6a 83       	std	Y+2, r22	; 0x02
    cli();                      // Disable interrupts
    23be:	f8 94       	cli
	Timer2_Pre = preScalar;		// store pre-scalar for resume function
    23c0:	8a 81       	ldd	r24, Y+2	; 0x02
    23c2:	80 93 6e 00 	sts	0x006E, r24
    TCNT2 = 0;                  // Reset Timer2 counter
    23c6:	e4 e4       	ldi	r30, 0x44	; 68
    23c8:	f0 e0       	ldi	r31, 0x00	; 0
    23ca:	10 82       	st	Z, r1

    OCR2 = compareVal;          // Set compare value
    23cc:	e3 e4       	ldi	r30, 0x43	; 67
    23ce:	f0 e0       	ldi	r31, 0x00	; 0
    23d0:	89 81       	ldd	r24, Y+1	; 0x01
    23d2:	80 83       	st	Z, r24

    // Configure CTC mode (WGM21:20 = 01)
    CLEAR(TCCR2, WGM20);
    23d4:	a5 e4       	ldi	r26, 0x45	; 69
    23d6:	b0 e0       	ldi	r27, 0x00	; 0
    23d8:	e5 e4       	ldi	r30, 0x45	; 69
    23da:	f0 e0       	ldi	r31, 0x00	; 0
    23dc:	80 81       	ld	r24, Z
    23de:	8f 7b       	andi	r24, 0xBF	; 191
    23e0:	8c 93       	st	X, r24
    SET(TCCR2, WGM21);
    23e2:	a5 e4       	ldi	r26, 0x45	; 69
    23e4:	b0 e0       	ldi	r27, 0x00	; 0
    23e6:	e5 e4       	ldi	r30, 0x45	; 69
    23e8:	f0 e0       	ldi	r31, 0x00	; 0
    23ea:	80 81       	ld	r24, Z
    23ec:	88 60       	ori	r24, 0x08	; 8
    23ee:	8c 93       	st	X, r24

    SetPreScalar(Timer2, preScalar);
    23f0:	82 e0       	ldi	r24, 0x02	; 2
    23f2:	6a 81       	ldd	r22, Y+2	; 0x02
    23f4:	0e 94 8b 12 	call	0x2516	; 0x2516 <SetPreScalar>

    // Force compare (non-PWM mode)
    SET(TCCR2, FOC2);
    23f8:	a5 e4       	ldi	r26, 0x45	; 69
    23fa:	b0 e0       	ldi	r27, 0x00	; 0
    23fc:	e5 e4       	ldi	r30, 0x45	; 69
    23fe:	f0 e0       	ldi	r31, 0x00	; 0
    2400:	80 81       	ld	r24, Z
    2402:	80 68       	ori	r24, 0x80	; 128
    2404:	8c 93       	st	X, r24

    SET(TIMSK, OCIE2);      // Enable Timer2 Compare Match Interrupt
    2406:	a9 e5       	ldi	r26, 0x59	; 89
    2408:	b0 e0       	ldi	r27, 0x00	; 0
    240a:	e9 e5       	ldi	r30, 0x59	; 89
    240c:	f0 e0       	ldi	r31, 0x00	; 0
    240e:	80 81       	ld	r24, Z
    2410:	80 68       	ori	r24, 0x80	; 128
    2412:	8c 93       	st	X, r24

    sei();                      // Enable interrupts
    2414:	78 94       	sei
}
    2416:	0f 90       	pop	r0
    2418:	0f 90       	pop	r0
    241a:	cf 91       	pop	r28
    241c:	df 91       	pop	r29
    241e:	08 95       	ret

00002420 <Timer0_OFF>:

void Timer0_OFF()
{
    2420:	df 93       	push	r29
    2422:	cf 93       	push	r28
    2424:	cd b7       	in	r28, 0x3d	; 61
    2426:	de b7       	in	r29, 0x3e	; 62
    // Stop Timer0 by clearing pre-scaler bits (CS02:00 = 0)
    CLEAR(TCCR0, CS00);
    2428:	a3 e5       	ldi	r26, 0x53	; 83
    242a:	b0 e0       	ldi	r27, 0x00	; 0
    242c:	e3 e5       	ldi	r30, 0x53	; 83
    242e:	f0 e0       	ldi	r31, 0x00	; 0
    2430:	80 81       	ld	r24, Z
    2432:	8e 7f       	andi	r24, 0xFE	; 254
    2434:	8c 93       	st	X, r24
    CLEAR(TCCR0, CS01);
    2436:	a3 e5       	ldi	r26, 0x53	; 83
    2438:	b0 e0       	ldi	r27, 0x00	; 0
    243a:	e3 e5       	ldi	r30, 0x53	; 83
    243c:	f0 e0       	ldi	r31, 0x00	; 0
    243e:	80 81       	ld	r24, Z
    2440:	8d 7f       	andi	r24, 0xFD	; 253
    2442:	8c 93       	st	X, r24
    CLEAR(TCCR0, CS02);
    2444:	a3 e5       	ldi	r26, 0x53	; 83
    2446:	b0 e0       	ldi	r27, 0x00	; 0
    2448:	e3 e5       	ldi	r30, 0x53	; 83
    244a:	f0 e0       	ldi	r31, 0x00	; 0
    244c:	80 81       	ld	r24, Z
    244e:	8b 7f       	andi	r24, 0xFB	; 251
    2450:	8c 93       	st	X, r24
}
    2452:	cf 91       	pop	r28
    2454:	df 91       	pop	r29
    2456:	08 95       	ret

00002458 <Timer0_ON>:

void Timer0_ON()
{
    2458:	df 93       	push	r29
    245a:	cf 93       	push	r28
    245c:	cd b7       	in	r28, 0x3d	; 61
    245e:	de b7       	in	r29, 0x3e	; 62
    SetPreScalar(Timer0, Timer0_Pre);
    2460:	90 91 6c 00 	lds	r25, 0x006C
    2464:	80 e0       	ldi	r24, 0x00	; 0
    2466:	69 2f       	mov	r22, r25
    2468:	0e 94 8b 12 	call	0x2516	; 0x2516 <SetPreScalar>
}
    246c:	cf 91       	pop	r28
    246e:	df 91       	pop	r29
    2470:	08 95       	ret

00002472 <Timer1_OFF>:

void Timer1_OFF()
{
    2472:	df 93       	push	r29
    2474:	cf 93       	push	r28
    2476:	cd b7       	in	r28, 0x3d	; 61
    2478:	de b7       	in	r29, 0x3e	; 62
    // Stop Timer1 by clearing pre-scaler bits (CS12:10 = 0)
    CLEAR(TCCR1B, CS10);
    247a:	ae e4       	ldi	r26, 0x4E	; 78
    247c:	b0 e0       	ldi	r27, 0x00	; 0
    247e:	ee e4       	ldi	r30, 0x4E	; 78
    2480:	f0 e0       	ldi	r31, 0x00	; 0
    2482:	80 81       	ld	r24, Z
    2484:	8e 7f       	andi	r24, 0xFE	; 254
    2486:	8c 93       	st	X, r24
    CLEAR(TCCR1B, CS11);
    2488:	ae e4       	ldi	r26, 0x4E	; 78
    248a:	b0 e0       	ldi	r27, 0x00	; 0
    248c:	ee e4       	ldi	r30, 0x4E	; 78
    248e:	f0 e0       	ldi	r31, 0x00	; 0
    2490:	80 81       	ld	r24, Z
    2492:	8d 7f       	andi	r24, 0xFD	; 253
    2494:	8c 93       	st	X, r24
    CLEAR(TCCR1B, CS12);
    2496:	ae e4       	ldi	r26, 0x4E	; 78
    2498:	b0 e0       	ldi	r27, 0x00	; 0
    249a:	ee e4       	ldi	r30, 0x4E	; 78
    249c:	f0 e0       	ldi	r31, 0x00	; 0
    249e:	80 81       	ld	r24, Z
    24a0:	8b 7f       	andi	r24, 0xFB	; 251
    24a2:	8c 93       	st	X, r24
}
    24a4:	cf 91       	pop	r28
    24a6:	df 91       	pop	r29
    24a8:	08 95       	ret

000024aa <Timer1_ON>:

void Timer1_ON()
{
    24aa:	df 93       	push	r29
    24ac:	cf 93       	push	r28
    24ae:	cd b7       	in	r28, 0x3d	; 61
    24b0:	de b7       	in	r29, 0x3e	; 62
    SetPreScalar(Timer1, Timer1_Pre);
    24b2:	90 91 6d 00 	lds	r25, 0x006D
    24b6:	81 e0       	ldi	r24, 0x01	; 1
    24b8:	69 2f       	mov	r22, r25
    24ba:	0e 94 8b 12 	call	0x2516	; 0x2516 <SetPreScalar>
}
    24be:	cf 91       	pop	r28
    24c0:	df 91       	pop	r29
    24c2:	08 95       	ret

000024c4 <Timer2_OFF>:

void Timer2_OFF()
{
    24c4:	df 93       	push	r29
    24c6:	cf 93       	push	r28
    24c8:	cd b7       	in	r28, 0x3d	; 61
    24ca:	de b7       	in	r29, 0x3e	; 62
    // Stop Timer2 by clearing pre-scaler bits (CS22:20 = 0)
    CLEAR(TCCR2, CS20);
    24cc:	a5 e4       	ldi	r26, 0x45	; 69
    24ce:	b0 e0       	ldi	r27, 0x00	; 0
    24d0:	e5 e4       	ldi	r30, 0x45	; 69
    24d2:	f0 e0       	ldi	r31, 0x00	; 0
    24d4:	80 81       	ld	r24, Z
    24d6:	8e 7f       	andi	r24, 0xFE	; 254
    24d8:	8c 93       	st	X, r24
    CLEAR(TCCR2, CS21);
    24da:	a5 e4       	ldi	r26, 0x45	; 69
    24dc:	b0 e0       	ldi	r27, 0x00	; 0
    24de:	e5 e4       	ldi	r30, 0x45	; 69
    24e0:	f0 e0       	ldi	r31, 0x00	; 0
    24e2:	80 81       	ld	r24, Z
    24e4:	8d 7f       	andi	r24, 0xFD	; 253
    24e6:	8c 93       	st	X, r24
    CLEAR(TCCR2, CS22);
    24e8:	a5 e4       	ldi	r26, 0x45	; 69
    24ea:	b0 e0       	ldi	r27, 0x00	; 0
    24ec:	e5 e4       	ldi	r30, 0x45	; 69
    24ee:	f0 e0       	ldi	r31, 0x00	; 0
    24f0:	80 81       	ld	r24, Z
    24f2:	8b 7f       	andi	r24, 0xFB	; 251
    24f4:	8c 93       	st	X, r24
}
    24f6:	cf 91       	pop	r28
    24f8:	df 91       	pop	r29
    24fa:	08 95       	ret

000024fc <Timer2_ON>:

void Timer2_ON()
{
    24fc:	df 93       	push	r29
    24fe:	cf 93       	push	r28
    2500:	cd b7       	in	r28, 0x3d	; 61
    2502:	de b7       	in	r29, 0x3e	; 62
    SetPreScalar(Timer2, Timer2_Pre);
    2504:	90 91 6e 00 	lds	r25, 0x006E
    2508:	82 e0       	ldi	r24, 0x02	; 2
    250a:	69 2f       	mov	r22, r25
    250c:	0e 94 8b 12 	call	0x2516	; 0x2516 <SetPreScalar>
}
    2510:	cf 91       	pop	r28
    2512:	df 91       	pop	r29
    2514:	08 95       	ret

00002516 <SetPreScalar>:

static void SetPreScalar(Timer timer,  TimerSetting preScalar)
{
    2516:	df 93       	push	r29
    2518:	cf 93       	push	r28
    251a:	cd b7       	in	r28, 0x3d	; 61
    251c:	de b7       	in	r29, 0x3e	; 62
    251e:	2a 97       	sbiw	r28, 0x0a	; 10
    2520:	0f b6       	in	r0, 0x3f	; 63
    2522:	f8 94       	cli
    2524:	de bf       	out	0x3e, r29	; 62
    2526:	0f be       	out	0x3f, r0	; 63
    2528:	cd bf       	out	0x3d, r28	; 61
    252a:	89 83       	std	Y+1, r24	; 0x01
    252c:	6a 83       	std	Y+2, r22	; 0x02
    switch(timer)
    252e:	89 81       	ldd	r24, Y+1	; 0x01
    2530:	28 2f       	mov	r18, r24
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	3a 87       	std	Y+10, r19	; 0x0a
    2536:	29 87       	std	Y+9, r18	; 0x09
    2538:	89 85       	ldd	r24, Y+9	; 0x09
    253a:	9a 85       	ldd	r25, Y+10	; 0x0a
    253c:	81 30       	cpi	r24, 0x01	; 1
    253e:	91 05       	cpc	r25, r1
    2540:	09 f4       	brne	.+2      	; 0x2544 <SetPreScalar+0x2e>
    2542:	d8 c0       	rjmp	.+432    	; 0x26f4 <SetPreScalar+0x1de>
    2544:	29 85       	ldd	r18, Y+9	; 0x09
    2546:	3a 85       	ldd	r19, Y+10	; 0x0a
    2548:	22 30       	cpi	r18, 0x02	; 2
    254a:	31 05       	cpc	r19, r1
    254c:	09 f4       	brne	.+2      	; 0x2550 <SetPreScalar+0x3a>
    254e:	9f c1       	rjmp	.+830    	; 0x288e <SetPreScalar+0x378>
    2550:	89 85       	ldd	r24, Y+9	; 0x09
    2552:	9a 85       	ldd	r25, Y+10	; 0x0a
    2554:	00 97       	sbiw	r24, 0x00	; 0
    2556:	09 f0       	breq	.+2      	; 0x255a <SetPreScalar+0x44>
    2558:	66 c2       	rjmp	.+1228   	; 0x2a26 <SetPreScalar+0x510>
    {
        case Timer0:
            switch (preScalar)
    255a:	8a 81       	ldd	r24, Y+2	; 0x02
    255c:	28 2f       	mov	r18, r24
    255e:	30 e0       	ldi	r19, 0x00	; 0
    2560:	38 87       	std	Y+8, r19	; 0x08
    2562:	2f 83       	std	Y+7, r18	; 0x07
    2564:	8f 81       	ldd	r24, Y+7	; 0x07
    2566:	98 85       	ldd	r25, Y+8	; 0x08
    2568:	83 30       	cpi	r24, 0x03	; 3
    256a:	91 05       	cpc	r25, r1
    256c:	09 f4       	brne	.+2      	; 0x2570 <SetPreScalar+0x5a>
    256e:	6a c0       	rjmp	.+212    	; 0x2644 <SetPreScalar+0x12e>
    2570:	2f 81       	ldd	r18, Y+7	; 0x07
    2572:	38 85       	ldd	r19, Y+8	; 0x08
    2574:	24 30       	cpi	r18, 0x04	; 4
    2576:	31 05       	cpc	r19, r1
    2578:	84 f4       	brge	.+32     	; 0x259a <SetPreScalar+0x84>
    257a:	8f 81       	ldd	r24, Y+7	; 0x07
    257c:	98 85       	ldd	r25, Y+8	; 0x08
    257e:	81 30       	cpi	r24, 0x01	; 1
    2580:	91 05       	cpc	r25, r1
    2582:	a1 f1       	breq	.+104    	; 0x25ec <SetPreScalar+0xd6>
    2584:	2f 81       	ldd	r18, Y+7	; 0x07
    2586:	38 85       	ldd	r19, Y+8	; 0x08
    2588:	22 30       	cpi	r18, 0x02	; 2
    258a:	31 05       	cpc	r19, r1
    258c:	0c f0       	brlt	.+2      	; 0x2590 <SetPreScalar+0x7a>
    258e:	44 c0       	rjmp	.+136    	; 0x2618 <SetPreScalar+0x102>
    2590:	8f 81       	ldd	r24, Y+7	; 0x07
    2592:	98 85       	ldd	r25, Y+8	; 0x08
    2594:	00 97       	sbiw	r24, 0x00	; 0
    2596:	a1 f0       	breq	.+40     	; 0x25c0 <SetPreScalar+0xaa>
    2598:	46 c2       	rjmp	.+1164   	; 0x2a26 <SetPreScalar+0x510>
    259a:	2f 81       	ldd	r18, Y+7	; 0x07
    259c:	38 85       	ldd	r19, Y+8	; 0x08
    259e:	25 30       	cpi	r18, 0x05	; 5
    25a0:	31 05       	cpc	r19, r1
    25a2:	09 f4       	brne	.+2      	; 0x25a6 <SetPreScalar+0x90>
    25a4:	7b c0       	rjmp	.+246    	; 0x269c <SetPreScalar+0x186>
    25a6:	8f 81       	ldd	r24, Y+7	; 0x07
    25a8:	98 85       	ldd	r25, Y+8	; 0x08
    25aa:	85 30       	cpi	r24, 0x05	; 5
    25ac:	91 05       	cpc	r25, r1
    25ae:	0c f4       	brge	.+2      	; 0x25b2 <SetPreScalar+0x9c>
    25b0:	5f c0       	rjmp	.+190    	; 0x2670 <SetPreScalar+0x15a>
    25b2:	2f 81       	ldd	r18, Y+7	; 0x07
    25b4:	38 85       	ldd	r19, Y+8	; 0x08
    25b6:	26 30       	cpi	r18, 0x06	; 6
    25b8:	31 05       	cpc	r19, r1
    25ba:	09 f4       	brne	.+2      	; 0x25be <SetPreScalar+0xa8>
    25bc:	85 c0       	rjmp	.+266    	; 0x26c8 <SetPreScalar+0x1b2>
    25be:	33 c2       	rjmp	.+1126   	; 0x2a26 <SetPreScalar+0x510>
            {
                case NO_PRESCALAR:      CLEAR(TCCR0,CS02); CLEAR(TCCR0,CS01); SET(TCCR0,CS00); break;
    25c0:	a3 e5       	ldi	r26, 0x53	; 83
    25c2:	b0 e0       	ldi	r27, 0x00	; 0
    25c4:	e3 e5       	ldi	r30, 0x53	; 83
    25c6:	f0 e0       	ldi	r31, 0x00	; 0
    25c8:	80 81       	ld	r24, Z
    25ca:	8b 7f       	andi	r24, 0xFB	; 251
    25cc:	8c 93       	st	X, r24
    25ce:	a3 e5       	ldi	r26, 0x53	; 83
    25d0:	b0 e0       	ldi	r27, 0x00	; 0
    25d2:	e3 e5       	ldi	r30, 0x53	; 83
    25d4:	f0 e0       	ldi	r31, 0x00	; 0
    25d6:	80 81       	ld	r24, Z
    25d8:	8d 7f       	andi	r24, 0xFD	; 253
    25da:	8c 93       	st	X, r24
    25dc:	a3 e5       	ldi	r26, 0x53	; 83
    25de:	b0 e0       	ldi	r27, 0x00	; 0
    25e0:	e3 e5       	ldi	r30, 0x53	; 83
    25e2:	f0 e0       	ldi	r31, 0x00	; 0
    25e4:	80 81       	ld	r24, Z
    25e6:	81 60       	ori	r24, 0x01	; 1
    25e8:	8c 93       	st	X, r24
    25ea:	1d c2       	rjmp	.+1082   	; 0x2a26 <SetPreScalar+0x510>
                case PRESCALAR_8:       CLEAR(TCCR0,CS02); SET(TCCR0,CS01); CLEAR(TCCR0,CS00); break;
    25ec:	a3 e5       	ldi	r26, 0x53	; 83
    25ee:	b0 e0       	ldi	r27, 0x00	; 0
    25f0:	e3 e5       	ldi	r30, 0x53	; 83
    25f2:	f0 e0       	ldi	r31, 0x00	; 0
    25f4:	80 81       	ld	r24, Z
    25f6:	8b 7f       	andi	r24, 0xFB	; 251
    25f8:	8c 93       	st	X, r24
    25fa:	a3 e5       	ldi	r26, 0x53	; 83
    25fc:	b0 e0       	ldi	r27, 0x00	; 0
    25fe:	e3 e5       	ldi	r30, 0x53	; 83
    2600:	f0 e0       	ldi	r31, 0x00	; 0
    2602:	80 81       	ld	r24, Z
    2604:	82 60       	ori	r24, 0x02	; 2
    2606:	8c 93       	st	X, r24
    2608:	a3 e5       	ldi	r26, 0x53	; 83
    260a:	b0 e0       	ldi	r27, 0x00	; 0
    260c:	e3 e5       	ldi	r30, 0x53	; 83
    260e:	f0 e0       	ldi	r31, 0x00	; 0
    2610:	80 81       	ld	r24, Z
    2612:	8e 7f       	andi	r24, 0xFE	; 254
    2614:	8c 93       	st	X, r24
    2616:	07 c2       	rjmp	.+1038   	; 0x2a26 <SetPreScalar+0x510>
                case PRESCALAR_64:      CLEAR(TCCR0,CS02); SET(TCCR0,CS01); SET(TCCR0,CS00); break;
    2618:	a3 e5       	ldi	r26, 0x53	; 83
    261a:	b0 e0       	ldi	r27, 0x00	; 0
    261c:	e3 e5       	ldi	r30, 0x53	; 83
    261e:	f0 e0       	ldi	r31, 0x00	; 0
    2620:	80 81       	ld	r24, Z
    2622:	8b 7f       	andi	r24, 0xFB	; 251
    2624:	8c 93       	st	X, r24
    2626:	a3 e5       	ldi	r26, 0x53	; 83
    2628:	b0 e0       	ldi	r27, 0x00	; 0
    262a:	e3 e5       	ldi	r30, 0x53	; 83
    262c:	f0 e0       	ldi	r31, 0x00	; 0
    262e:	80 81       	ld	r24, Z
    2630:	82 60       	ori	r24, 0x02	; 2
    2632:	8c 93       	st	X, r24
    2634:	a3 e5       	ldi	r26, 0x53	; 83
    2636:	b0 e0       	ldi	r27, 0x00	; 0
    2638:	e3 e5       	ldi	r30, 0x53	; 83
    263a:	f0 e0       	ldi	r31, 0x00	; 0
    263c:	80 81       	ld	r24, Z
    263e:	81 60       	ori	r24, 0x01	; 1
    2640:	8c 93       	st	X, r24
    2642:	f1 c1       	rjmp	.+994    	; 0x2a26 <SetPreScalar+0x510>
                case PRESCALAR_256:     SET(TCCR0,CS02); CLEAR(TCCR0,CS01); CLEAR(TCCR0,CS00); break;
    2644:	a3 e5       	ldi	r26, 0x53	; 83
    2646:	b0 e0       	ldi	r27, 0x00	; 0
    2648:	e3 e5       	ldi	r30, 0x53	; 83
    264a:	f0 e0       	ldi	r31, 0x00	; 0
    264c:	80 81       	ld	r24, Z
    264e:	84 60       	ori	r24, 0x04	; 4
    2650:	8c 93       	st	X, r24
    2652:	a3 e5       	ldi	r26, 0x53	; 83
    2654:	b0 e0       	ldi	r27, 0x00	; 0
    2656:	e3 e5       	ldi	r30, 0x53	; 83
    2658:	f0 e0       	ldi	r31, 0x00	; 0
    265a:	80 81       	ld	r24, Z
    265c:	8d 7f       	andi	r24, 0xFD	; 253
    265e:	8c 93       	st	X, r24
    2660:	a3 e5       	ldi	r26, 0x53	; 83
    2662:	b0 e0       	ldi	r27, 0x00	; 0
    2664:	e3 e5       	ldi	r30, 0x53	; 83
    2666:	f0 e0       	ldi	r31, 0x00	; 0
    2668:	80 81       	ld	r24, Z
    266a:	8e 7f       	andi	r24, 0xFE	; 254
    266c:	8c 93       	st	X, r24
    266e:	db c1       	rjmp	.+950    	; 0x2a26 <SetPreScalar+0x510>
                case PRESCALAR_1024:    SET(TCCR0,CS02); CLEAR(TCCR0,CS01); SET(TCCR0,CS00); break;
    2670:	a3 e5       	ldi	r26, 0x53	; 83
    2672:	b0 e0       	ldi	r27, 0x00	; 0
    2674:	e3 e5       	ldi	r30, 0x53	; 83
    2676:	f0 e0       	ldi	r31, 0x00	; 0
    2678:	80 81       	ld	r24, Z
    267a:	84 60       	ori	r24, 0x04	; 4
    267c:	8c 93       	st	X, r24
    267e:	a3 e5       	ldi	r26, 0x53	; 83
    2680:	b0 e0       	ldi	r27, 0x00	; 0
    2682:	e3 e5       	ldi	r30, 0x53	; 83
    2684:	f0 e0       	ldi	r31, 0x00	; 0
    2686:	80 81       	ld	r24, Z
    2688:	8d 7f       	andi	r24, 0xFD	; 253
    268a:	8c 93       	st	X, r24
    268c:	a3 e5       	ldi	r26, 0x53	; 83
    268e:	b0 e0       	ldi	r27, 0x00	; 0
    2690:	e3 e5       	ldi	r30, 0x53	; 83
    2692:	f0 e0       	ldi	r31, 0x00	; 0
    2694:	80 81       	ld	r24, Z
    2696:	81 60       	ori	r24, 0x01	; 1
    2698:	8c 93       	st	X, r24
    269a:	c5 c1       	rjmp	.+906    	; 0x2a26 <SetPreScalar+0x510>
                case EXT_FALLING_EDGE:  SET(TCCR0,CS02); SET(TCCR0,CS01); CLEAR(TCCR0,CS00); break;
    269c:	a3 e5       	ldi	r26, 0x53	; 83
    269e:	b0 e0       	ldi	r27, 0x00	; 0
    26a0:	e3 e5       	ldi	r30, 0x53	; 83
    26a2:	f0 e0       	ldi	r31, 0x00	; 0
    26a4:	80 81       	ld	r24, Z
    26a6:	84 60       	ori	r24, 0x04	; 4
    26a8:	8c 93       	st	X, r24
    26aa:	a3 e5       	ldi	r26, 0x53	; 83
    26ac:	b0 e0       	ldi	r27, 0x00	; 0
    26ae:	e3 e5       	ldi	r30, 0x53	; 83
    26b0:	f0 e0       	ldi	r31, 0x00	; 0
    26b2:	80 81       	ld	r24, Z
    26b4:	82 60       	ori	r24, 0x02	; 2
    26b6:	8c 93       	st	X, r24
    26b8:	a3 e5       	ldi	r26, 0x53	; 83
    26ba:	b0 e0       	ldi	r27, 0x00	; 0
    26bc:	e3 e5       	ldi	r30, 0x53	; 83
    26be:	f0 e0       	ldi	r31, 0x00	; 0
    26c0:	80 81       	ld	r24, Z
    26c2:	8e 7f       	andi	r24, 0xFE	; 254
    26c4:	8c 93       	st	X, r24
    26c6:	af c1       	rjmp	.+862    	; 0x2a26 <SetPreScalar+0x510>
                case EXT_RISING_EDGE:   SET(TCCR0,CS02); SET(TCCR0,CS01); SET(TCCR0,CS00); break;
    26c8:	a3 e5       	ldi	r26, 0x53	; 83
    26ca:	b0 e0       	ldi	r27, 0x00	; 0
    26cc:	e3 e5       	ldi	r30, 0x53	; 83
    26ce:	f0 e0       	ldi	r31, 0x00	; 0
    26d0:	80 81       	ld	r24, Z
    26d2:	84 60       	ori	r24, 0x04	; 4
    26d4:	8c 93       	st	X, r24
    26d6:	a3 e5       	ldi	r26, 0x53	; 83
    26d8:	b0 e0       	ldi	r27, 0x00	; 0
    26da:	e3 e5       	ldi	r30, 0x53	; 83
    26dc:	f0 e0       	ldi	r31, 0x00	; 0
    26de:	80 81       	ld	r24, Z
    26e0:	82 60       	ori	r24, 0x02	; 2
    26e2:	8c 93       	st	X, r24
    26e4:	a3 e5       	ldi	r26, 0x53	; 83
    26e6:	b0 e0       	ldi	r27, 0x00	; 0
    26e8:	e3 e5       	ldi	r30, 0x53	; 83
    26ea:	f0 e0       	ldi	r31, 0x00	; 0
    26ec:	80 81       	ld	r24, Z
    26ee:	81 60       	ori	r24, 0x01	; 1
    26f0:	8c 93       	st	X, r24
    26f2:	99 c1       	rjmp	.+818    	; 0x2a26 <SetPreScalar+0x510>
            }
            break;

        case Timer1:
            switch (preScalar)
    26f4:	8a 81       	ldd	r24, Y+2	; 0x02
    26f6:	28 2f       	mov	r18, r24
    26f8:	30 e0       	ldi	r19, 0x00	; 0
    26fa:	3e 83       	std	Y+6, r19	; 0x06
    26fc:	2d 83       	std	Y+5, r18	; 0x05
    26fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2700:	9e 81       	ldd	r25, Y+6	; 0x06
    2702:	83 30       	cpi	r24, 0x03	; 3
    2704:	91 05       	cpc	r25, r1
    2706:	09 f4       	brne	.+2      	; 0x270a <SetPreScalar+0x1f4>
    2708:	6a c0       	rjmp	.+212    	; 0x27de <SetPreScalar+0x2c8>
    270a:	2d 81       	ldd	r18, Y+5	; 0x05
    270c:	3e 81       	ldd	r19, Y+6	; 0x06
    270e:	24 30       	cpi	r18, 0x04	; 4
    2710:	31 05       	cpc	r19, r1
    2712:	84 f4       	brge	.+32     	; 0x2734 <SetPreScalar+0x21e>
    2714:	8d 81       	ldd	r24, Y+5	; 0x05
    2716:	9e 81       	ldd	r25, Y+6	; 0x06
    2718:	81 30       	cpi	r24, 0x01	; 1
    271a:	91 05       	cpc	r25, r1
    271c:	a1 f1       	breq	.+104    	; 0x2786 <SetPreScalar+0x270>
    271e:	2d 81       	ldd	r18, Y+5	; 0x05
    2720:	3e 81       	ldd	r19, Y+6	; 0x06
    2722:	22 30       	cpi	r18, 0x02	; 2
    2724:	31 05       	cpc	r19, r1
    2726:	0c f0       	brlt	.+2      	; 0x272a <SetPreScalar+0x214>
    2728:	44 c0       	rjmp	.+136    	; 0x27b2 <SetPreScalar+0x29c>
    272a:	8d 81       	ldd	r24, Y+5	; 0x05
    272c:	9e 81       	ldd	r25, Y+6	; 0x06
    272e:	00 97       	sbiw	r24, 0x00	; 0
    2730:	a1 f0       	breq	.+40     	; 0x275a <SetPreScalar+0x244>
    2732:	79 c1       	rjmp	.+754    	; 0x2a26 <SetPreScalar+0x510>
    2734:	2d 81       	ldd	r18, Y+5	; 0x05
    2736:	3e 81       	ldd	r19, Y+6	; 0x06
    2738:	25 30       	cpi	r18, 0x05	; 5
    273a:	31 05       	cpc	r19, r1
    273c:	09 f4       	brne	.+2      	; 0x2740 <SetPreScalar+0x22a>
    273e:	7b c0       	rjmp	.+246    	; 0x2836 <SetPreScalar+0x320>
    2740:	8d 81       	ldd	r24, Y+5	; 0x05
    2742:	9e 81       	ldd	r25, Y+6	; 0x06
    2744:	85 30       	cpi	r24, 0x05	; 5
    2746:	91 05       	cpc	r25, r1
    2748:	0c f4       	brge	.+2      	; 0x274c <SetPreScalar+0x236>
    274a:	5f c0       	rjmp	.+190    	; 0x280a <SetPreScalar+0x2f4>
    274c:	2d 81       	ldd	r18, Y+5	; 0x05
    274e:	3e 81       	ldd	r19, Y+6	; 0x06
    2750:	26 30       	cpi	r18, 0x06	; 6
    2752:	31 05       	cpc	r19, r1
    2754:	09 f4       	brne	.+2      	; 0x2758 <SetPreScalar+0x242>
    2756:	85 c0       	rjmp	.+266    	; 0x2862 <SetPreScalar+0x34c>
    2758:	66 c1       	rjmp	.+716    	; 0x2a26 <SetPreScalar+0x510>
            {
                case NO_PRESCALAR:      CLEAR(TCCR1B,CS12); CLEAR(TCCR1B,CS11); SET(TCCR1B,CS10); break;
    275a:	ae e4       	ldi	r26, 0x4E	; 78
    275c:	b0 e0       	ldi	r27, 0x00	; 0
    275e:	ee e4       	ldi	r30, 0x4E	; 78
    2760:	f0 e0       	ldi	r31, 0x00	; 0
    2762:	80 81       	ld	r24, Z
    2764:	8b 7f       	andi	r24, 0xFB	; 251
    2766:	8c 93       	st	X, r24
    2768:	ae e4       	ldi	r26, 0x4E	; 78
    276a:	b0 e0       	ldi	r27, 0x00	; 0
    276c:	ee e4       	ldi	r30, 0x4E	; 78
    276e:	f0 e0       	ldi	r31, 0x00	; 0
    2770:	80 81       	ld	r24, Z
    2772:	8d 7f       	andi	r24, 0xFD	; 253
    2774:	8c 93       	st	X, r24
    2776:	ae e4       	ldi	r26, 0x4E	; 78
    2778:	b0 e0       	ldi	r27, 0x00	; 0
    277a:	ee e4       	ldi	r30, 0x4E	; 78
    277c:	f0 e0       	ldi	r31, 0x00	; 0
    277e:	80 81       	ld	r24, Z
    2780:	81 60       	ori	r24, 0x01	; 1
    2782:	8c 93       	st	X, r24
    2784:	50 c1       	rjmp	.+672    	; 0x2a26 <SetPreScalar+0x510>
                case PRESCALAR_8:       CLEAR(TCCR1B,CS12); SET(TCCR1B,CS11); CLEAR(TCCR1B,CS10); break;
    2786:	ae e4       	ldi	r26, 0x4E	; 78
    2788:	b0 e0       	ldi	r27, 0x00	; 0
    278a:	ee e4       	ldi	r30, 0x4E	; 78
    278c:	f0 e0       	ldi	r31, 0x00	; 0
    278e:	80 81       	ld	r24, Z
    2790:	8b 7f       	andi	r24, 0xFB	; 251
    2792:	8c 93       	st	X, r24
    2794:	ae e4       	ldi	r26, 0x4E	; 78
    2796:	b0 e0       	ldi	r27, 0x00	; 0
    2798:	ee e4       	ldi	r30, 0x4E	; 78
    279a:	f0 e0       	ldi	r31, 0x00	; 0
    279c:	80 81       	ld	r24, Z
    279e:	82 60       	ori	r24, 0x02	; 2
    27a0:	8c 93       	st	X, r24
    27a2:	ae e4       	ldi	r26, 0x4E	; 78
    27a4:	b0 e0       	ldi	r27, 0x00	; 0
    27a6:	ee e4       	ldi	r30, 0x4E	; 78
    27a8:	f0 e0       	ldi	r31, 0x00	; 0
    27aa:	80 81       	ld	r24, Z
    27ac:	8e 7f       	andi	r24, 0xFE	; 254
    27ae:	8c 93       	st	X, r24
    27b0:	3a c1       	rjmp	.+628    	; 0x2a26 <SetPreScalar+0x510>
                case PRESCALAR_64:      CLEAR(TCCR1B,CS12); SET(TCCR1B,CS11); SET(TCCR1B,CS10); break;
    27b2:	ae e4       	ldi	r26, 0x4E	; 78
    27b4:	b0 e0       	ldi	r27, 0x00	; 0
    27b6:	ee e4       	ldi	r30, 0x4E	; 78
    27b8:	f0 e0       	ldi	r31, 0x00	; 0
    27ba:	80 81       	ld	r24, Z
    27bc:	8b 7f       	andi	r24, 0xFB	; 251
    27be:	8c 93       	st	X, r24
    27c0:	ae e4       	ldi	r26, 0x4E	; 78
    27c2:	b0 e0       	ldi	r27, 0x00	; 0
    27c4:	ee e4       	ldi	r30, 0x4E	; 78
    27c6:	f0 e0       	ldi	r31, 0x00	; 0
    27c8:	80 81       	ld	r24, Z
    27ca:	82 60       	ori	r24, 0x02	; 2
    27cc:	8c 93       	st	X, r24
    27ce:	ae e4       	ldi	r26, 0x4E	; 78
    27d0:	b0 e0       	ldi	r27, 0x00	; 0
    27d2:	ee e4       	ldi	r30, 0x4E	; 78
    27d4:	f0 e0       	ldi	r31, 0x00	; 0
    27d6:	80 81       	ld	r24, Z
    27d8:	81 60       	ori	r24, 0x01	; 1
    27da:	8c 93       	st	X, r24
    27dc:	24 c1       	rjmp	.+584    	; 0x2a26 <SetPreScalar+0x510>
                case PRESCALAR_256:     SET(TCCR1B,CS12); CLEAR(TCCR1B,CS11); CLEAR(TCCR1B,CS10); break;
    27de:	ae e4       	ldi	r26, 0x4E	; 78
    27e0:	b0 e0       	ldi	r27, 0x00	; 0
    27e2:	ee e4       	ldi	r30, 0x4E	; 78
    27e4:	f0 e0       	ldi	r31, 0x00	; 0
    27e6:	80 81       	ld	r24, Z
    27e8:	84 60       	ori	r24, 0x04	; 4
    27ea:	8c 93       	st	X, r24
    27ec:	ae e4       	ldi	r26, 0x4E	; 78
    27ee:	b0 e0       	ldi	r27, 0x00	; 0
    27f0:	ee e4       	ldi	r30, 0x4E	; 78
    27f2:	f0 e0       	ldi	r31, 0x00	; 0
    27f4:	80 81       	ld	r24, Z
    27f6:	8d 7f       	andi	r24, 0xFD	; 253
    27f8:	8c 93       	st	X, r24
    27fa:	ae e4       	ldi	r26, 0x4E	; 78
    27fc:	b0 e0       	ldi	r27, 0x00	; 0
    27fe:	ee e4       	ldi	r30, 0x4E	; 78
    2800:	f0 e0       	ldi	r31, 0x00	; 0
    2802:	80 81       	ld	r24, Z
    2804:	8e 7f       	andi	r24, 0xFE	; 254
    2806:	8c 93       	st	X, r24
    2808:	0e c1       	rjmp	.+540    	; 0x2a26 <SetPreScalar+0x510>
                case PRESCALAR_1024:    SET(TCCR1B,CS12); CLEAR(TCCR1B,CS11); SET(TCCR1B,CS10); break;
    280a:	ae e4       	ldi	r26, 0x4E	; 78
    280c:	b0 e0       	ldi	r27, 0x00	; 0
    280e:	ee e4       	ldi	r30, 0x4E	; 78
    2810:	f0 e0       	ldi	r31, 0x00	; 0
    2812:	80 81       	ld	r24, Z
    2814:	84 60       	ori	r24, 0x04	; 4
    2816:	8c 93       	st	X, r24
    2818:	ae e4       	ldi	r26, 0x4E	; 78
    281a:	b0 e0       	ldi	r27, 0x00	; 0
    281c:	ee e4       	ldi	r30, 0x4E	; 78
    281e:	f0 e0       	ldi	r31, 0x00	; 0
    2820:	80 81       	ld	r24, Z
    2822:	8d 7f       	andi	r24, 0xFD	; 253
    2824:	8c 93       	st	X, r24
    2826:	ae e4       	ldi	r26, 0x4E	; 78
    2828:	b0 e0       	ldi	r27, 0x00	; 0
    282a:	ee e4       	ldi	r30, 0x4E	; 78
    282c:	f0 e0       	ldi	r31, 0x00	; 0
    282e:	80 81       	ld	r24, Z
    2830:	81 60       	ori	r24, 0x01	; 1
    2832:	8c 93       	st	X, r24
    2834:	f8 c0       	rjmp	.+496    	; 0x2a26 <SetPreScalar+0x510>
                case EXT_FALLING_EDGE:  SET(TCCR1B,CS12); SET(TCCR1B,CS11); CLEAR(TCCR1B,CS10); break;
    2836:	ae e4       	ldi	r26, 0x4E	; 78
    2838:	b0 e0       	ldi	r27, 0x00	; 0
    283a:	ee e4       	ldi	r30, 0x4E	; 78
    283c:	f0 e0       	ldi	r31, 0x00	; 0
    283e:	80 81       	ld	r24, Z
    2840:	84 60       	ori	r24, 0x04	; 4
    2842:	8c 93       	st	X, r24
    2844:	ae e4       	ldi	r26, 0x4E	; 78
    2846:	b0 e0       	ldi	r27, 0x00	; 0
    2848:	ee e4       	ldi	r30, 0x4E	; 78
    284a:	f0 e0       	ldi	r31, 0x00	; 0
    284c:	80 81       	ld	r24, Z
    284e:	82 60       	ori	r24, 0x02	; 2
    2850:	8c 93       	st	X, r24
    2852:	ae e4       	ldi	r26, 0x4E	; 78
    2854:	b0 e0       	ldi	r27, 0x00	; 0
    2856:	ee e4       	ldi	r30, 0x4E	; 78
    2858:	f0 e0       	ldi	r31, 0x00	; 0
    285a:	80 81       	ld	r24, Z
    285c:	8e 7f       	andi	r24, 0xFE	; 254
    285e:	8c 93       	st	X, r24
    2860:	e2 c0       	rjmp	.+452    	; 0x2a26 <SetPreScalar+0x510>
                case EXT_RISING_EDGE:   SET(TCCR1B,CS12); SET(TCCR1B,CS11); SET(TCCR1B,CS10); break;
    2862:	ae e4       	ldi	r26, 0x4E	; 78
    2864:	b0 e0       	ldi	r27, 0x00	; 0
    2866:	ee e4       	ldi	r30, 0x4E	; 78
    2868:	f0 e0       	ldi	r31, 0x00	; 0
    286a:	80 81       	ld	r24, Z
    286c:	84 60       	ori	r24, 0x04	; 4
    286e:	8c 93       	st	X, r24
    2870:	ae e4       	ldi	r26, 0x4E	; 78
    2872:	b0 e0       	ldi	r27, 0x00	; 0
    2874:	ee e4       	ldi	r30, 0x4E	; 78
    2876:	f0 e0       	ldi	r31, 0x00	; 0
    2878:	80 81       	ld	r24, Z
    287a:	82 60       	ori	r24, 0x02	; 2
    287c:	8c 93       	st	X, r24
    287e:	ae e4       	ldi	r26, 0x4E	; 78
    2880:	b0 e0       	ldi	r27, 0x00	; 0
    2882:	ee e4       	ldi	r30, 0x4E	; 78
    2884:	f0 e0       	ldi	r31, 0x00	; 0
    2886:	80 81       	ld	r24, Z
    2888:	81 60       	ori	r24, 0x01	; 1
    288a:	8c 93       	st	X, r24
    288c:	cc c0       	rjmp	.+408    	; 0x2a26 <SetPreScalar+0x510>
            }
            break;

        case Timer2:
            switch (preScalar)
    288e:	8a 81       	ldd	r24, Y+2	; 0x02
    2890:	28 2f       	mov	r18, r24
    2892:	30 e0       	ldi	r19, 0x00	; 0
    2894:	3c 83       	std	Y+4, r19	; 0x04
    2896:	2b 83       	std	Y+3, r18	; 0x03
    2898:	8b 81       	ldd	r24, Y+3	; 0x03
    289a:	9c 81       	ldd	r25, Y+4	; 0x04
    289c:	83 30       	cpi	r24, 0x03	; 3
    289e:	91 05       	cpc	r25, r1
    28a0:	09 f4       	brne	.+2      	; 0x28a4 <SetPreScalar+0x38e>
    28a2:	6a c0       	rjmp	.+212    	; 0x2978 <SetPreScalar+0x462>
    28a4:	2b 81       	ldd	r18, Y+3	; 0x03
    28a6:	3c 81       	ldd	r19, Y+4	; 0x04
    28a8:	24 30       	cpi	r18, 0x04	; 4
    28aa:	31 05       	cpc	r19, r1
    28ac:	84 f4       	brge	.+32     	; 0x28ce <SetPreScalar+0x3b8>
    28ae:	8b 81       	ldd	r24, Y+3	; 0x03
    28b0:	9c 81       	ldd	r25, Y+4	; 0x04
    28b2:	81 30       	cpi	r24, 0x01	; 1
    28b4:	91 05       	cpc	r25, r1
    28b6:	a1 f1       	breq	.+104    	; 0x2920 <SetPreScalar+0x40a>
    28b8:	2b 81       	ldd	r18, Y+3	; 0x03
    28ba:	3c 81       	ldd	r19, Y+4	; 0x04
    28bc:	22 30       	cpi	r18, 0x02	; 2
    28be:	31 05       	cpc	r19, r1
    28c0:	0c f0       	brlt	.+2      	; 0x28c4 <SetPreScalar+0x3ae>
    28c2:	44 c0       	rjmp	.+136    	; 0x294c <SetPreScalar+0x436>
    28c4:	8b 81       	ldd	r24, Y+3	; 0x03
    28c6:	9c 81       	ldd	r25, Y+4	; 0x04
    28c8:	00 97       	sbiw	r24, 0x00	; 0
    28ca:	a1 f0       	breq	.+40     	; 0x28f4 <SetPreScalar+0x3de>
    28cc:	ac c0       	rjmp	.+344    	; 0x2a26 <SetPreScalar+0x510>
    28ce:	2b 81       	ldd	r18, Y+3	; 0x03
    28d0:	3c 81       	ldd	r19, Y+4	; 0x04
    28d2:	25 30       	cpi	r18, 0x05	; 5
    28d4:	31 05       	cpc	r19, r1
    28d6:	09 f4       	brne	.+2      	; 0x28da <SetPreScalar+0x3c4>
    28d8:	7b c0       	rjmp	.+246    	; 0x29d0 <SetPreScalar+0x4ba>
    28da:	8b 81       	ldd	r24, Y+3	; 0x03
    28dc:	9c 81       	ldd	r25, Y+4	; 0x04
    28de:	85 30       	cpi	r24, 0x05	; 5
    28e0:	91 05       	cpc	r25, r1
    28e2:	0c f4       	brge	.+2      	; 0x28e6 <SetPreScalar+0x3d0>
    28e4:	5f c0       	rjmp	.+190    	; 0x29a4 <SetPreScalar+0x48e>
    28e6:	2b 81       	ldd	r18, Y+3	; 0x03
    28e8:	3c 81       	ldd	r19, Y+4	; 0x04
    28ea:	26 30       	cpi	r18, 0x06	; 6
    28ec:	31 05       	cpc	r19, r1
    28ee:	09 f4       	brne	.+2      	; 0x28f2 <SetPreScalar+0x3dc>
    28f0:	85 c0       	rjmp	.+266    	; 0x29fc <SetPreScalar+0x4e6>
    28f2:	99 c0       	rjmp	.+306    	; 0x2a26 <SetPreScalar+0x510>
            {
                case NO_PRESCALAR:      CLEAR(TCCR2,CS22); CLEAR(TCCR2,CS21); SET(TCCR2,CS20); break;
    28f4:	a5 e4       	ldi	r26, 0x45	; 69
    28f6:	b0 e0       	ldi	r27, 0x00	; 0
    28f8:	e5 e4       	ldi	r30, 0x45	; 69
    28fa:	f0 e0       	ldi	r31, 0x00	; 0
    28fc:	80 81       	ld	r24, Z
    28fe:	8b 7f       	andi	r24, 0xFB	; 251
    2900:	8c 93       	st	X, r24
    2902:	a5 e4       	ldi	r26, 0x45	; 69
    2904:	b0 e0       	ldi	r27, 0x00	; 0
    2906:	e5 e4       	ldi	r30, 0x45	; 69
    2908:	f0 e0       	ldi	r31, 0x00	; 0
    290a:	80 81       	ld	r24, Z
    290c:	8d 7f       	andi	r24, 0xFD	; 253
    290e:	8c 93       	st	X, r24
    2910:	a5 e4       	ldi	r26, 0x45	; 69
    2912:	b0 e0       	ldi	r27, 0x00	; 0
    2914:	e5 e4       	ldi	r30, 0x45	; 69
    2916:	f0 e0       	ldi	r31, 0x00	; 0
    2918:	80 81       	ld	r24, Z
    291a:	81 60       	ori	r24, 0x01	; 1
    291c:	8c 93       	st	X, r24
    291e:	83 c0       	rjmp	.+262    	; 0x2a26 <SetPreScalar+0x510>
                case PRESCALAR_8:       CLEAR(TCCR2,CS22); SET(TCCR2,CS21); CLEAR(TCCR2,CS20); break;
    2920:	a5 e4       	ldi	r26, 0x45	; 69
    2922:	b0 e0       	ldi	r27, 0x00	; 0
    2924:	e5 e4       	ldi	r30, 0x45	; 69
    2926:	f0 e0       	ldi	r31, 0x00	; 0
    2928:	80 81       	ld	r24, Z
    292a:	8b 7f       	andi	r24, 0xFB	; 251
    292c:	8c 93       	st	X, r24
    292e:	a5 e4       	ldi	r26, 0x45	; 69
    2930:	b0 e0       	ldi	r27, 0x00	; 0
    2932:	e5 e4       	ldi	r30, 0x45	; 69
    2934:	f0 e0       	ldi	r31, 0x00	; 0
    2936:	80 81       	ld	r24, Z
    2938:	82 60       	ori	r24, 0x02	; 2
    293a:	8c 93       	st	X, r24
    293c:	a5 e4       	ldi	r26, 0x45	; 69
    293e:	b0 e0       	ldi	r27, 0x00	; 0
    2940:	e5 e4       	ldi	r30, 0x45	; 69
    2942:	f0 e0       	ldi	r31, 0x00	; 0
    2944:	80 81       	ld	r24, Z
    2946:	8e 7f       	andi	r24, 0xFE	; 254
    2948:	8c 93       	st	X, r24
    294a:	6d c0       	rjmp	.+218    	; 0x2a26 <SetPreScalar+0x510>
                case PRESCALAR_64:      CLEAR(TCCR2,CS22); SET(TCCR2,CS21); SET(TCCR2,CS20); break;
    294c:	a5 e4       	ldi	r26, 0x45	; 69
    294e:	b0 e0       	ldi	r27, 0x00	; 0
    2950:	e5 e4       	ldi	r30, 0x45	; 69
    2952:	f0 e0       	ldi	r31, 0x00	; 0
    2954:	80 81       	ld	r24, Z
    2956:	8b 7f       	andi	r24, 0xFB	; 251
    2958:	8c 93       	st	X, r24
    295a:	a5 e4       	ldi	r26, 0x45	; 69
    295c:	b0 e0       	ldi	r27, 0x00	; 0
    295e:	e5 e4       	ldi	r30, 0x45	; 69
    2960:	f0 e0       	ldi	r31, 0x00	; 0
    2962:	80 81       	ld	r24, Z
    2964:	82 60       	ori	r24, 0x02	; 2
    2966:	8c 93       	st	X, r24
    2968:	a5 e4       	ldi	r26, 0x45	; 69
    296a:	b0 e0       	ldi	r27, 0x00	; 0
    296c:	e5 e4       	ldi	r30, 0x45	; 69
    296e:	f0 e0       	ldi	r31, 0x00	; 0
    2970:	80 81       	ld	r24, Z
    2972:	81 60       	ori	r24, 0x01	; 1
    2974:	8c 93       	st	X, r24
    2976:	57 c0       	rjmp	.+174    	; 0x2a26 <SetPreScalar+0x510>
                case PRESCALAR_256:     SET(TCCR2,CS22); CLEAR(TCCR2,CS21); CLEAR(TCCR2,CS20); break;
    2978:	a5 e4       	ldi	r26, 0x45	; 69
    297a:	b0 e0       	ldi	r27, 0x00	; 0
    297c:	e5 e4       	ldi	r30, 0x45	; 69
    297e:	f0 e0       	ldi	r31, 0x00	; 0
    2980:	80 81       	ld	r24, Z
    2982:	84 60       	ori	r24, 0x04	; 4
    2984:	8c 93       	st	X, r24
    2986:	a5 e4       	ldi	r26, 0x45	; 69
    2988:	b0 e0       	ldi	r27, 0x00	; 0
    298a:	e5 e4       	ldi	r30, 0x45	; 69
    298c:	f0 e0       	ldi	r31, 0x00	; 0
    298e:	80 81       	ld	r24, Z
    2990:	8d 7f       	andi	r24, 0xFD	; 253
    2992:	8c 93       	st	X, r24
    2994:	a5 e4       	ldi	r26, 0x45	; 69
    2996:	b0 e0       	ldi	r27, 0x00	; 0
    2998:	e5 e4       	ldi	r30, 0x45	; 69
    299a:	f0 e0       	ldi	r31, 0x00	; 0
    299c:	80 81       	ld	r24, Z
    299e:	8e 7f       	andi	r24, 0xFE	; 254
    29a0:	8c 93       	st	X, r24
    29a2:	41 c0       	rjmp	.+130    	; 0x2a26 <SetPreScalar+0x510>
                case PRESCALAR_1024:    SET(TCCR2,CS22); CLEAR(TCCR2,CS21); SET(TCCR2,CS20); break;
    29a4:	a5 e4       	ldi	r26, 0x45	; 69
    29a6:	b0 e0       	ldi	r27, 0x00	; 0
    29a8:	e5 e4       	ldi	r30, 0x45	; 69
    29aa:	f0 e0       	ldi	r31, 0x00	; 0
    29ac:	80 81       	ld	r24, Z
    29ae:	84 60       	ori	r24, 0x04	; 4
    29b0:	8c 93       	st	X, r24
    29b2:	a5 e4       	ldi	r26, 0x45	; 69
    29b4:	b0 e0       	ldi	r27, 0x00	; 0
    29b6:	e5 e4       	ldi	r30, 0x45	; 69
    29b8:	f0 e0       	ldi	r31, 0x00	; 0
    29ba:	80 81       	ld	r24, Z
    29bc:	8d 7f       	andi	r24, 0xFD	; 253
    29be:	8c 93       	st	X, r24
    29c0:	a5 e4       	ldi	r26, 0x45	; 69
    29c2:	b0 e0       	ldi	r27, 0x00	; 0
    29c4:	e5 e4       	ldi	r30, 0x45	; 69
    29c6:	f0 e0       	ldi	r31, 0x00	; 0
    29c8:	80 81       	ld	r24, Z
    29ca:	81 60       	ori	r24, 0x01	; 1
    29cc:	8c 93       	st	X, r24
    29ce:	2b c0       	rjmp	.+86     	; 0x2a26 <SetPreScalar+0x510>
                case EXT_FALLING_EDGE:  SET(TCCR2,CS22); SET(TCCR2,CS21); CLEAR(TCCR2,CS20); break;
    29d0:	a5 e4       	ldi	r26, 0x45	; 69
    29d2:	b0 e0       	ldi	r27, 0x00	; 0
    29d4:	e5 e4       	ldi	r30, 0x45	; 69
    29d6:	f0 e0       	ldi	r31, 0x00	; 0
    29d8:	80 81       	ld	r24, Z
    29da:	84 60       	ori	r24, 0x04	; 4
    29dc:	8c 93       	st	X, r24
    29de:	a5 e4       	ldi	r26, 0x45	; 69
    29e0:	b0 e0       	ldi	r27, 0x00	; 0
    29e2:	e5 e4       	ldi	r30, 0x45	; 69
    29e4:	f0 e0       	ldi	r31, 0x00	; 0
    29e6:	80 81       	ld	r24, Z
    29e8:	82 60       	ori	r24, 0x02	; 2
    29ea:	8c 93       	st	X, r24
    29ec:	a5 e4       	ldi	r26, 0x45	; 69
    29ee:	b0 e0       	ldi	r27, 0x00	; 0
    29f0:	e5 e4       	ldi	r30, 0x45	; 69
    29f2:	f0 e0       	ldi	r31, 0x00	; 0
    29f4:	80 81       	ld	r24, Z
    29f6:	8e 7f       	andi	r24, 0xFE	; 254
    29f8:	8c 93       	st	X, r24
    29fa:	15 c0       	rjmp	.+42     	; 0x2a26 <SetPreScalar+0x510>
                case EXT_RISING_EDGE:   SET(TCCR2,CS22); SET(TCCR2,CS21); SET(TCCR2,CS20); break;
    29fc:	a5 e4       	ldi	r26, 0x45	; 69
    29fe:	b0 e0       	ldi	r27, 0x00	; 0
    2a00:	e5 e4       	ldi	r30, 0x45	; 69
    2a02:	f0 e0       	ldi	r31, 0x00	; 0
    2a04:	80 81       	ld	r24, Z
    2a06:	84 60       	ori	r24, 0x04	; 4
    2a08:	8c 93       	st	X, r24
    2a0a:	a5 e4       	ldi	r26, 0x45	; 69
    2a0c:	b0 e0       	ldi	r27, 0x00	; 0
    2a0e:	e5 e4       	ldi	r30, 0x45	; 69
    2a10:	f0 e0       	ldi	r31, 0x00	; 0
    2a12:	80 81       	ld	r24, Z
    2a14:	82 60       	ori	r24, 0x02	; 2
    2a16:	8c 93       	st	X, r24
    2a18:	a5 e4       	ldi	r26, 0x45	; 69
    2a1a:	b0 e0       	ldi	r27, 0x00	; 0
    2a1c:	e5 e4       	ldi	r30, 0x45	; 69
    2a1e:	f0 e0       	ldi	r31, 0x00	; 0
    2a20:	80 81       	ld	r24, Z
    2a22:	81 60       	ori	r24, 0x01	; 1
    2a24:	8c 93       	st	X, r24
            }
            break;
    }
}
    2a26:	2a 96       	adiw	r28, 0x0a	; 10
    2a28:	0f b6       	in	r0, 0x3f	; 63
    2a2a:	f8 94       	cli
    2a2c:	de bf       	out	0x3e, r29	; 62
    2a2e:	0f be       	out	0x3f, r0	; 63
    2a30:	cd bf       	out	0x3d, r28	; 61
    2a32:	cf 91       	pop	r28
    2a34:	df 91       	pop	r29
    2a36:	08 95       	ret

00002a38 <main>:
#include "Application.h"

int main()
{
    2a38:	df 93       	push	r29
    2a3a:	cf 93       	push	r28
    2a3c:	cd b7       	in	r28, 0x3d	; 61
    2a3e:	de b7       	in	r29, 0x3e	; 62
    2a40:	a8 97       	sbiw	r28, 0x28	; 40
    2a42:	0f b6       	in	r0, 0x3f	; 63
    2a44:	f8 94       	cli
    2a46:	de bf       	out	0x3e, r29	; 62
    2a48:	0f be       	out	0x3f, r0	; 63
    2a4a:	cd bf       	out	0x3d, r28	; 61
	// Reset button
	PushButton ResetButton;
	PushButton_Init(&ResetButton, RESET_BB_PORT, RESET_BB_PIN, RESET_BB_TYPE);
    2a4c:	ce 01       	movw	r24, r28
    2a4e:	03 96       	adiw	r24, 0x03	; 3
    2a50:	64 e4       	ldi	r22, 0x44	; 68
    2a52:	42 e0       	ldi	r20, 0x02	; 2
    2a54:	22 e0       	ldi	r18, 0x02	; 2
    2a56:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <PushButton_Init>

	// Pause button
	PushButton PauseButton;
	PushButton_Init(&PauseButton, PAUSE_BB_PORT, PAUSE_BB_PIN, PAUSE_BB_TYPE);
    2a5a:	ce 01       	movw	r24, r28
    2a5c:	06 96       	adiw	r24, 0x06	; 6
    2a5e:	64 e4       	ldi	r22, 0x44	; 68
    2a60:	43 e0       	ldi	r20, 0x03	; 3
    2a62:	21 e0       	ldi	r18, 0x01	; 1
    2a64:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <PushButton_Init>

	// Resume button
	PushButton ResumeButton;
	PushButton_Init(&ResumeButton, RESUME_BB_PORT, RESUME_BB_PIN, RESUME_BB_TYPE);
    2a68:	ce 01       	movw	r24, r28
    2a6a:	09 96       	adiw	r24, 0x09	; 9
    2a6c:	62 e4       	ldi	r22, 0x42	; 66
    2a6e:	42 e0       	ldi	r20, 0x02	; 2
    2a70:	22 e0       	ldi	r18, 0x02	; 2
    2a72:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <PushButton_Init>

	// Mode Toggle button
	PushButton ModeButton;
	PushButton_Init(&ModeButton, MODE_BB_PORT, MODE_BB_PIN, MODE_BB_TYPE);
    2a76:	ce 01       	movw	r24, r28
    2a78:	0c 96       	adiw	r24, 0x0c	; 12
    2a7a:	62 e4       	ldi	r22, 0x42	; 66
    2a7c:	47 e0       	ldi	r20, 0x07	; 7
    2a7e:	22 e0       	ldi	r18, 0x02	; 2
    2a80:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <PushButton_Init>

	// Hour increment
	PushButton HourIncButton;
	PushButton_Init(&HourIncButton, HR_INC_BB_PORT, HR_INC_BB_PIN, HR_INC_BB_TYPE);
    2a84:	ce 01       	movw	r24, r28
    2a86:	0f 96       	adiw	r24, 0x0f	; 15
    2a88:	62 e4       	ldi	r22, 0x42	; 66
    2a8a:	41 e0       	ldi	r20, 0x01	; 1
    2a8c:	22 e0       	ldi	r18, 0x02	; 2
    2a8e:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <PushButton_Init>

	// Hour decrement
	PushButton HourDecButton;
	PushButton_Init(&HourDecButton, HR_DEC_BB_PORT, HR_DEC_BB_PIN, HR_DEC_BB_TYPE);
    2a92:	ce 01       	movw	r24, r28
    2a94:	42 96       	adiw	r24, 0x12	; 18
    2a96:	62 e4       	ldi	r22, 0x42	; 66
    2a98:	40 e0       	ldi	r20, 0x00	; 0
    2a9a:	22 e0       	ldi	r18, 0x02	; 2
    2a9c:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <PushButton_Init>

	// Minutes increment
	PushButton MinuteIncButton;
	PushButton_Init(&MinuteIncButton, MIN_INC_BB_PORT, MIN_INC_BB_PIN, MIN_INC_BB_TYPE);
    2aa0:	ce 01       	movw	r24, r28
    2aa2:	45 96       	adiw	r24, 0x15	; 21
    2aa4:	62 e4       	ldi	r22, 0x42	; 66
    2aa6:	44 e0       	ldi	r20, 0x04	; 4
    2aa8:	22 e0       	ldi	r18, 0x02	; 2
    2aaa:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <PushButton_Init>

	// Minutes decrement
	PushButton MinuteDecButton;
	PushButton_Init(&MinuteDecButton, MIN_DEC_BB_PORT, MIN_DEC_BB_PIN, MIN_DEC_BB_TYPE);
    2aae:	ce 01       	movw	r24, r28
    2ab0:	48 96       	adiw	r24, 0x18	; 24
    2ab2:	62 e4       	ldi	r22, 0x42	; 66
    2ab4:	43 e0       	ldi	r20, 0x03	; 3
    2ab6:	22 e0       	ldi	r18, 0x02	; 2
    2ab8:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <PushButton_Init>

	// Seconds increment
	PushButton SecondIncButton;
	PushButton_Init(&SecondIncButton, SEC_INC_BB_PORT, SEC_INC_BB_PIN, SEC_INC_BB_TYPE);
    2abc:	ce 01       	movw	r24, r28
    2abe:	4b 96       	adiw	r24, 0x1b	; 27
    2ac0:	62 e4       	ldi	r22, 0x42	; 66
    2ac2:	46 e0       	ldi	r20, 0x06	; 6
    2ac4:	22 e0       	ldi	r18, 0x02	; 2
    2ac6:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <PushButton_Init>

	// Seconds decrement
	PushButton SecondDecButton;
	PushButton_Init(&SecondDecButton, SEC_DEC_BB_PORT, SEC_DEC_BB_PIN, SEC_DEC_BB_TYPE);
    2aca:	ce 01       	movw	r24, r28
    2acc:	4e 96       	adiw	r24, 0x1e	; 30
    2ace:	62 e4       	ldi	r22, 0x42	; 66
    2ad0:	45 e0       	ldi	r20, 0x05	; 5
    2ad2:	22 e0       	ldi	r18, 0x02	; 2
    2ad4:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <PushButton_Init>

	// Buzzer
	Buzzer myBuzzer;
	Buzzer_Init(&myBuzzer, BUZZER_PORT, BUZZER_PIN);
    2ad8:	ce 01       	movw	r24, r28
    2ada:	81 96       	adiw	r24, 0x21	; 33
    2adc:	64 e4       	ldi	r22, 0x44	; 68
    2ade:	40 e0       	ldi	r20, 0x00	; 0
    2ae0:	0e 94 db 07 	call	0xfb6	; 0xfb6 <Buzzer_Init>

	// Count up LED
	Led CountUP;
	Led_Init(&CountUP, COUNT_UP_LED_PORT, COUNT_UP_LED_PIN, COUNT_UP_LED_TYPE);
    2ae4:	ce 01       	movw	r24, r28
    2ae6:	83 96       	adiw	r24, 0x23	; 35
    2ae8:	64 e4       	ldi	r22, 0x44	; 68
    2aea:	44 e0       	ldi	r20, 0x04	; 4
    2aec:	21 e0       	ldi	r18, 0x01	; 1
    2aee:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <Led_Init>

	// Count down LED
	Led CountDOWN;
	Led_Init(&CountDOWN, COUNT_DOWN_LED_PORT, COUNT_DOWN_LED_PIN, COUNT_DOWN_LED_TYPE);
    2af2:	ce 01       	movw	r24, r28
    2af4:	86 96       	adiw	r24, 0x26	; 38
    2af6:	64 e4       	ldi	r22, 0x44	; 68
    2af8:	45 e0       	ldi	r20, 0x05	; 5
    2afa:	21 e0       	ldi	r18, 0x01	; 1
    2afc:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <Led_Init>

	//Multiple/Multiplexed SevenSegment
	for (int i = 0; i<NUM_SEVEN_SEGMENTS; i++)
    2b00:	1a 82       	std	Y+2, r1	; 0x02
    2b02:	19 82       	std	Y+1, r1	; 0x01
    2b04:	14 c0       	rjmp	.+40     	; 0x2b2e <main+0xf6>
	{
		SevenSegment_Init(&g_Mult_SevenSegment[i],SEVEN_SEGMENT_DATA_PORT, SEVEN_SEGMENT_DATA_PINS);
    2b06:	29 81       	ldd	r18, Y+1	; 0x01
    2b08:	3a 81       	ldd	r19, Y+2	; 0x02
    2b0a:	c9 01       	movw	r24, r18
    2b0c:	88 0f       	add	r24, r24
    2b0e:	99 1f       	adc	r25, r25
    2b10:	82 0f       	add	r24, r18
    2b12:	93 1f       	adc	r25, r19
    2b14:	88 0f       	add	r24, r24
    2b16:	99 1f       	adc	r25, r25
    2b18:	81 59       	subi	r24, 0x91	; 145
    2b1a:	9f 4f       	sbci	r25, 0xFF	; 255
    2b1c:	63 e4       	ldi	r22, 0x43	; 67
    2b1e:	4f e0       	ldi	r20, 0x0F	; 15
    2b20:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <SevenSegment_Init>
	// Count down LED
	Led CountDOWN;
	Led_Init(&CountDOWN, COUNT_DOWN_LED_PORT, COUNT_DOWN_LED_PIN, COUNT_DOWN_LED_TYPE);

	//Multiple/Multiplexed SevenSegment
	for (int i = 0; i<NUM_SEVEN_SEGMENTS; i++)
    2b24:	89 81       	ldd	r24, Y+1	; 0x01
    2b26:	9a 81       	ldd	r25, Y+2	; 0x02
    2b28:	01 96       	adiw	r24, 0x01	; 1
    2b2a:	9a 83       	std	Y+2, r25	; 0x02
    2b2c:	89 83       	std	Y+1, r24	; 0x01
    2b2e:	89 81       	ldd	r24, Y+1	; 0x01
    2b30:	9a 81       	ldd	r25, Y+2	; 0x02
    2b32:	86 30       	cpi	r24, 0x06	; 6
    2b34:	91 05       	cpc	r25, r1
    2b36:	3c f3       	brlt	.-50     	; 0x2b06 <main+0xce>
	{
		SevenSegment_Init(&g_Mult_SevenSegment[i],SEVEN_SEGMENT_DATA_PORT, SEVEN_SEGMENT_DATA_PINS);
	}
	// external interrupts 0,1,2 initializations
	INT0_Init(FALLING_EDGE);
    2b38:	82 e0       	ldi	r24, 0x02	; 2
    2b3a:	0e 94 29 08 	call	0x1052	; 0x1052 <INT0_Init>
	INT1_Init(RISING_EDGE);
    2b3e:	83 e0       	ldi	r24, 0x03	; 3
    2b40:	0e 94 92 08 	call	0x1124	; 0x1124 <INT1_Init>
	INT2_Init(FALLING_EDGE);
    2b44:	82 e0       	ldi	r24, 0x02	; 2
    2b46:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <INT2_Init>

	// timer1 initialization to count 1 second
	Timer1_CTC_Init(COMPARE_MATCH_FOR_1SEC, PRESCALAR_1024);
    2b4a:	89 e0       	ldi	r24, 0x09	; 9
    2b4c:	9d e3       	ldi	r25, 0x3D	; 61
    2b4e:	64 e0       	ldi	r22, 0x04	; 4
    2b50:	0e 94 85 11 	call	0x230a	; 0x230a <Timer1_CTC_Init>

	while(1)
	{
		// 1. put the visual input first
		SevenSegmentUpdate();
    2b54:	0e 94 43 06 	call	0xc86	; 0xc86 <SevenSegmentUpdate>
		UpdateCountLEDs(&CountUP, &CountDOWN);
    2b58:	ce 01       	movw	r24, r28
    2b5a:	83 96       	adiw	r24, 0x23	; 35
    2b5c:	9e 01       	movw	r18, r28
    2b5e:	2a 5d       	subi	r18, 0xDA	; 218
    2b60:	3f 4f       	sbci	r19, 0xFF	; 255
    2b62:	b9 01       	movw	r22, r18
    2b64:	0e 94 2e 07 	call	0xe5c	; 0xe5c <UpdateCountLEDs>

	    // 2. Handle Mode Toggle
	    if (ReadButton(&ModeButton) == PRESSED)
    2b68:	ce 01       	movw	r24, r28
    2b6a:	0c 96       	adiw	r24, 0x0c	; 12
    2b6c:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <ReadButton>
    2b70:	81 30       	cpi	r24, 0x01	; 1
    2b72:	b9 f4       	brne	.+46     	; 0x2ba2 <main+0x16a>
	    {
	    	ToggleStopWatchMode;
    2b74:	80 91 6b 00 	lds	r24, 0x006B
    2b78:	91 e0       	ldi	r25, 0x01	; 1
    2b7a:	89 27       	eor	r24, r25
    2b7c:	80 93 6b 00 	sts	0x006B, r24
    2b80:	0a c0       	rjmp	.+20     	; 0x2b96 <main+0x15e>
	        while(ReadButton(&ModeButton) == PRESSED)
	        {
	    		SevenSegmentUpdate();
    2b82:	0e 94 43 06 	call	0xc86	; 0xc86 <SevenSegmentUpdate>
	    		UpdateCountLEDs(&CountUP, &CountDOWN);
    2b86:	ce 01       	movw	r24, r28
    2b88:	83 96       	adiw	r24, 0x23	; 35
    2b8a:	9e 01       	movw	r18, r28
    2b8c:	2a 5d       	subi	r18, 0xDA	; 218
    2b8e:	3f 4f       	sbci	r19, 0xFF	; 255
    2b90:	b9 01       	movw	r22, r18
    2b92:	0e 94 2e 07 	call	0xe5c	; 0xe5c <UpdateCountLEDs>

	    // 2. Handle Mode Toggle
	    if (ReadButton(&ModeButton) == PRESSED)
	    {
	    	ToggleStopWatchMode;
	        while(ReadButton(&ModeButton) == PRESSED)
    2b96:	ce 01       	movw	r24, r28
    2b98:	0c 96       	adiw	r24, 0x0c	; 12
    2b9a:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <ReadButton>
    2b9e:	81 30       	cpi	r24, 0x01	; 1
    2ba0:	81 f3       	breq	.-32     	; 0x2b82 <main+0x14a>
	        }
	    }

	    // 3. Handle Time Adjustment Buttons
	    // 3.1 Hours Increment
	    if (ReadButton(&HourIncButton) == PRESSED)
    2ba2:	ce 01       	movw	r24, r28
    2ba4:	0f 96       	adiw	r24, 0x0f	; 15
    2ba6:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <ReadButton>
    2baa:	81 30       	cpi	r24, 0x01	; 1
    2bac:	99 f4       	brne	.+38     	; 0x2bd4 <main+0x19c>
	    {
	        IncHour();
    2bae:	0e 94 54 07 	call	0xea8	; 0xea8 <IncHour>
    2bb2:	0a c0       	rjmp	.+20     	; 0x2bc8 <main+0x190>
	        while(ReadButton(&HourIncButton) == PRESSED)
	        {
	    		SevenSegmentUpdate();
    2bb4:	0e 94 43 06 	call	0xc86	; 0xc86 <SevenSegmentUpdate>
	    		UpdateCountLEDs(&CountUP, &CountDOWN);
    2bb8:	ce 01       	movw	r24, r28
    2bba:	83 96       	adiw	r24, 0x23	; 35
    2bbc:	9e 01       	movw	r18, r28
    2bbe:	2a 5d       	subi	r18, 0xDA	; 218
    2bc0:	3f 4f       	sbci	r19, 0xFF	; 255
    2bc2:	b9 01       	movw	r22, r18
    2bc4:	0e 94 2e 07 	call	0xe5c	; 0xe5c <UpdateCountLEDs>
	    // 3. Handle Time Adjustment Buttons
	    // 3.1 Hours Increment
	    if (ReadButton(&HourIncButton) == PRESSED)
	    {
	        IncHour();
	        while(ReadButton(&HourIncButton) == PRESSED)
    2bc8:	ce 01       	movw	r24, r28
    2bca:	0f 96       	adiw	r24, 0x0f	; 15
    2bcc:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <ReadButton>
    2bd0:	81 30       	cpi	r24, 0x01	; 1
    2bd2:	81 f3       	breq	.-32     	; 0x2bb4 <main+0x17c>
	    		UpdateCountLEDs(&CountUP, &CountDOWN);
	        }
	    }

	    // 3.2 Hours Decrement
	    if (ReadButton(&HourDecButton) == PRESSED)
    2bd4:	ce 01       	movw	r24, r28
    2bd6:	42 96       	adiw	r24, 0x12	; 18
    2bd8:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <ReadButton>
    2bdc:	81 30       	cpi	r24, 0x01	; 1
    2bde:	99 f4       	brne	.+38     	; 0x2c06 <main+0x1ce>
	    {
	        DecHour();
    2be0:	0e 94 6e 07 	call	0xedc	; 0xedc <DecHour>
    2be4:	0a c0       	rjmp	.+20     	; 0x2bfa <main+0x1c2>
	        while(ReadButton(&HourDecButton) == PRESSED)
	        {
	    		SevenSegmentUpdate();
    2be6:	0e 94 43 06 	call	0xc86	; 0xc86 <SevenSegmentUpdate>
	    		UpdateCountLEDs(&CountUP, &CountDOWN);
    2bea:	ce 01       	movw	r24, r28
    2bec:	83 96       	adiw	r24, 0x23	; 35
    2bee:	9e 01       	movw	r18, r28
    2bf0:	2a 5d       	subi	r18, 0xDA	; 218
    2bf2:	3f 4f       	sbci	r19, 0xFF	; 255
    2bf4:	b9 01       	movw	r22, r18
    2bf6:	0e 94 2e 07 	call	0xe5c	; 0xe5c <UpdateCountLEDs>

	    // 3.2 Hours Decrement
	    if (ReadButton(&HourDecButton) == PRESSED)
	    {
	        DecHour();
	        while(ReadButton(&HourDecButton) == PRESSED)
    2bfa:	ce 01       	movw	r24, r28
    2bfc:	42 96       	adiw	r24, 0x12	; 18
    2bfe:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <ReadButton>
    2c02:	81 30       	cpi	r24, 0x01	; 1
    2c04:	81 f3       	breq	.-32     	; 0x2be6 <main+0x1ae>
	    		UpdateCountLEDs(&CountUP, &CountDOWN);
	        }
	    }

	    // 3.3 Minutes Increment
	    if (ReadButton(&MinuteIncButton) == PRESSED)
    2c06:	ce 01       	movw	r24, r28
    2c08:	45 96       	adiw	r24, 0x15	; 21
    2c0a:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <ReadButton>
    2c0e:	81 30       	cpi	r24, 0x01	; 1
    2c10:	99 f4       	brne	.+38     	; 0x2c38 <main+0x200>
	    {
	        IncMin();
    2c12:	0e 94 85 07 	call	0xf0a	; 0xf0a <IncMin>
    2c16:	0a c0       	rjmp	.+20     	; 0x2c2c <main+0x1f4>
	        while(ReadButton(&MinuteIncButton) == PRESSED)
	        {
	    		SevenSegmentUpdate();
    2c18:	0e 94 43 06 	call	0xc86	; 0xc86 <SevenSegmentUpdate>
	    		UpdateCountLEDs(&CountUP, &CountDOWN);
    2c1c:	ce 01       	movw	r24, r28
    2c1e:	83 96       	adiw	r24, 0x23	; 35
    2c20:	9e 01       	movw	r18, r28
    2c22:	2a 5d       	subi	r18, 0xDA	; 218
    2c24:	3f 4f       	sbci	r19, 0xFF	; 255
    2c26:	b9 01       	movw	r22, r18
    2c28:	0e 94 2e 07 	call	0xe5c	; 0xe5c <UpdateCountLEDs>

	    // 3.3 Minutes Increment
	    if (ReadButton(&MinuteIncButton) == PRESSED)
	    {
	        IncMin();
	        while(ReadButton(&MinuteIncButton) == PRESSED)
    2c2c:	ce 01       	movw	r24, r28
    2c2e:	45 96       	adiw	r24, 0x15	; 21
    2c30:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <ReadButton>
    2c34:	81 30       	cpi	r24, 0x01	; 1
    2c36:	81 f3       	breq	.-32     	; 0x2c18 <main+0x1e0>
	    		UpdateCountLEDs(&CountUP, &CountDOWN);
	        }
	    }

	    // 3.4 Minutes Decrement
	    if (ReadButton(&MinuteDecButton) == PRESSED)
    2c38:	ce 01       	movw	r24, r28
    2c3a:	48 96       	adiw	r24, 0x18	; 24
    2c3c:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <ReadButton>
    2c40:	81 30       	cpi	r24, 0x01	; 1
    2c42:	99 f4       	brne	.+38     	; 0x2c6a <main+0x232>
	    {
	        DecMin();
    2c44:	0e 94 9a 07 	call	0xf34	; 0xf34 <DecMin>
    2c48:	0a c0       	rjmp	.+20     	; 0x2c5e <main+0x226>
	        while(ReadButton(&MinuteDecButton) == PRESSED)
	        {
	    		SevenSegmentUpdate();
    2c4a:	0e 94 43 06 	call	0xc86	; 0xc86 <SevenSegmentUpdate>
	    		UpdateCountLEDs(&CountUP, &CountDOWN);
    2c4e:	ce 01       	movw	r24, r28
    2c50:	83 96       	adiw	r24, 0x23	; 35
    2c52:	9e 01       	movw	r18, r28
    2c54:	2a 5d       	subi	r18, 0xDA	; 218
    2c56:	3f 4f       	sbci	r19, 0xFF	; 255
    2c58:	b9 01       	movw	r22, r18
    2c5a:	0e 94 2e 07 	call	0xe5c	; 0xe5c <UpdateCountLEDs>

	    // 3.4 Minutes Decrement
	    if (ReadButton(&MinuteDecButton) == PRESSED)
	    {
	        DecMin();
	        while(ReadButton(&MinuteDecButton) == PRESSED)
    2c5e:	ce 01       	movw	r24, r28
    2c60:	48 96       	adiw	r24, 0x18	; 24
    2c62:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <ReadButton>
    2c66:	81 30       	cpi	r24, 0x01	; 1
    2c68:	81 f3       	breq	.-32     	; 0x2c4a <main+0x212>
	    		UpdateCountLEDs(&CountUP, &CountDOWN);
	        }
	    }

	    // 3.5 Seconds Increment
	    if (ReadButton(&SecondIncButton) == PRESSED)
    2c6a:	ce 01       	movw	r24, r28
    2c6c:	4b 96       	adiw	r24, 0x1b	; 27
    2c6e:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <ReadButton>
    2c72:	81 30       	cpi	r24, 0x01	; 1
    2c74:	99 f4       	brne	.+38     	; 0x2c9c <main+0x264>
	    {
	        IncSec();
    2c76:	0e 94 b0 07 	call	0xf60	; 0xf60 <IncSec>
    2c7a:	0a c0       	rjmp	.+20     	; 0x2c90 <main+0x258>
	        while(ReadButton(&SecondIncButton) == PRESSED)
	        {
	    		SevenSegmentUpdate();
    2c7c:	0e 94 43 06 	call	0xc86	; 0xc86 <SevenSegmentUpdate>
	    		UpdateCountLEDs(&CountUP, &CountDOWN);
    2c80:	ce 01       	movw	r24, r28
    2c82:	83 96       	adiw	r24, 0x23	; 35
    2c84:	9e 01       	movw	r18, r28
    2c86:	2a 5d       	subi	r18, 0xDA	; 218
    2c88:	3f 4f       	sbci	r19, 0xFF	; 255
    2c8a:	b9 01       	movw	r22, r18
    2c8c:	0e 94 2e 07 	call	0xe5c	; 0xe5c <UpdateCountLEDs>

	    // 3.5 Seconds Increment
	    if (ReadButton(&SecondIncButton) == PRESSED)
	    {
	        IncSec();
	        while(ReadButton(&SecondIncButton) == PRESSED)
    2c90:	ce 01       	movw	r24, r28
    2c92:	4b 96       	adiw	r24, 0x1b	; 27
    2c94:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <ReadButton>
    2c98:	81 30       	cpi	r24, 0x01	; 1
    2c9a:	81 f3       	breq	.-32     	; 0x2c7c <main+0x244>
	    		UpdateCountLEDs(&CountUP, &CountDOWN);
	        }
	    }

	    // 3.6 Seconds Decrement
	    if (ReadButton(&SecondDecButton) == PRESSED)
    2c9c:	ce 01       	movw	r24, r28
    2c9e:	4e 96       	adiw	r24, 0x1e	; 30
    2ca0:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <ReadButton>
    2ca4:	81 30       	cpi	r24, 0x01	; 1
    2ca6:	99 f4       	brne	.+38     	; 0x2cce <main+0x296>
	    {
	        DecSec();
    2ca8:	0e 94 c5 07 	call	0xf8a	; 0xf8a <DecSec>
    2cac:	0a c0       	rjmp	.+20     	; 0x2cc2 <main+0x28a>
	        while(ReadButton(&SecondDecButton) == PRESSED)
	        {
	    		SevenSegmentUpdate();
    2cae:	0e 94 43 06 	call	0xc86	; 0xc86 <SevenSegmentUpdate>
	    		UpdateCountLEDs(&CountUP, &CountDOWN);
    2cb2:	ce 01       	movw	r24, r28
    2cb4:	83 96       	adiw	r24, 0x23	; 35
    2cb6:	9e 01       	movw	r18, r28
    2cb8:	2a 5d       	subi	r18, 0xDA	; 218
    2cba:	3f 4f       	sbci	r19, 0xFF	; 255
    2cbc:	b9 01       	movw	r22, r18
    2cbe:	0e 94 2e 07 	call	0xe5c	; 0xe5c <UpdateCountLEDs>

	    // 3.6 Seconds Decrement
	    if (ReadButton(&SecondDecButton) == PRESSED)
	    {
	        DecSec();
	        while(ReadButton(&SecondDecButton) == PRESSED)
    2cc2:	ce 01       	movw	r24, r28
    2cc4:	4e 96       	adiw	r24, 0x1e	; 30
    2cc6:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <ReadButton>
    2cca:	81 30       	cpi	r24, 0x01	; 1
    2ccc:	81 f3       	breq	.-32     	; 0x2cae <main+0x276>
	    		UpdateCountLEDs(&CountUP, &CountDOWN);
	        }
	    }

	    // 4. Handle Buzzer (e.g., when count-down reaches 00:00:00)
	    if (g_mode == DECREMENTAL_MODE &&
    2cce:	80 91 6b 00 	lds	r24, 0x006B
    2cd2:	88 23       	and	r24, r24
    2cd4:	89 f4       	brne	.+34     	; 0x2cf8 <main+0x2c0>
    2cd6:	80 91 68 00 	lds	r24, 0x0068
    2cda:	88 23       	and	r24, r24
    2cdc:	69 f4       	brne	.+26     	; 0x2cf8 <main+0x2c0>
    2cde:	80 91 69 00 	lds	r24, 0x0069
    2ce2:	88 23       	and	r24, r24
    2ce4:	49 f4       	brne	.+18     	; 0x2cf8 <main+0x2c0>
    2ce6:	80 91 6a 00 	lds	r24, 0x006A
    2cea:	88 23       	and	r24, r24
    2cec:	29 f4       	brne	.+10     	; 0x2cf8 <main+0x2c0>
	    		g_SevenSeg_time.Hour == 0 &&
				g_SevenSeg_time.Min == 0 &&
				g_SevenSeg_time.Sec == 0)
	    {
	        BuzzerOn(&myBuzzer);
    2cee:	ce 01       	movw	r24, r28
    2cf0:	81 96       	adiw	r24, 0x21	; 33
    2cf2:	0e 94 fd 07 	call	0xffa	; 0xffa <BuzzerOn>
    2cf6:	2e cf       	rjmp	.-420    	; 0x2b54 <main+0x11c>
	    }
	    else
	    {
	    	BuzzerOff(&myBuzzer);
    2cf8:	ce 01       	movw	r24, r28
    2cfa:	81 96       	adiw	r24, 0x21	; 33
    2cfc:	0e 94 13 08 	call	0x1026	; 0x1026 <BuzzerOff>
    2d00:	29 cf       	rjmp	.-430    	; 0x2b54 <main+0x11c>

00002d02 <__udivmodqi4>:
    2d02:	99 1b       	sub	r25, r25
    2d04:	79 e0       	ldi	r23, 0x09	; 9
    2d06:	04 c0       	rjmp	.+8      	; 0x2d10 <__udivmodqi4_ep>

00002d08 <__udivmodqi4_loop>:
    2d08:	99 1f       	adc	r25, r25
    2d0a:	96 17       	cp	r25, r22
    2d0c:	08 f0       	brcs	.+2      	; 0x2d10 <__udivmodqi4_ep>
    2d0e:	96 1b       	sub	r25, r22

00002d10 <__udivmodqi4_ep>:
    2d10:	88 1f       	adc	r24, r24
    2d12:	7a 95       	dec	r23
    2d14:	c9 f7       	brne	.-14     	; 0x2d08 <__udivmodqi4_loop>
    2d16:	80 95       	com	r24
    2d18:	08 95       	ret

00002d1a <__prologue_saves__>:
    2d1a:	2f 92       	push	r2
    2d1c:	3f 92       	push	r3
    2d1e:	4f 92       	push	r4
    2d20:	5f 92       	push	r5
    2d22:	6f 92       	push	r6
    2d24:	7f 92       	push	r7
    2d26:	8f 92       	push	r8
    2d28:	9f 92       	push	r9
    2d2a:	af 92       	push	r10
    2d2c:	bf 92       	push	r11
    2d2e:	cf 92       	push	r12
    2d30:	df 92       	push	r13
    2d32:	ef 92       	push	r14
    2d34:	ff 92       	push	r15
    2d36:	0f 93       	push	r16
    2d38:	1f 93       	push	r17
    2d3a:	cf 93       	push	r28
    2d3c:	df 93       	push	r29
    2d3e:	cd b7       	in	r28, 0x3d	; 61
    2d40:	de b7       	in	r29, 0x3e	; 62
    2d42:	ca 1b       	sub	r28, r26
    2d44:	db 0b       	sbc	r29, r27
    2d46:	0f b6       	in	r0, 0x3f	; 63
    2d48:	f8 94       	cli
    2d4a:	de bf       	out	0x3e, r29	; 62
    2d4c:	0f be       	out	0x3f, r0	; 63
    2d4e:	cd bf       	out	0x3d, r28	; 61
    2d50:	09 94       	ijmp

00002d52 <__epilogue_restores__>:
    2d52:	2a 88       	ldd	r2, Y+18	; 0x12
    2d54:	39 88       	ldd	r3, Y+17	; 0x11
    2d56:	48 88       	ldd	r4, Y+16	; 0x10
    2d58:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d5a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d5c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d5e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d60:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d62:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d64:	b9 84       	ldd	r11, Y+9	; 0x09
    2d66:	c8 84       	ldd	r12, Y+8	; 0x08
    2d68:	df 80       	ldd	r13, Y+7	; 0x07
    2d6a:	ee 80       	ldd	r14, Y+6	; 0x06
    2d6c:	fd 80       	ldd	r15, Y+5	; 0x05
    2d6e:	0c 81       	ldd	r16, Y+4	; 0x04
    2d70:	1b 81       	ldd	r17, Y+3	; 0x03
    2d72:	aa 81       	ldd	r26, Y+2	; 0x02
    2d74:	b9 81       	ldd	r27, Y+1	; 0x01
    2d76:	ce 0f       	add	r28, r30
    2d78:	d1 1d       	adc	r29, r1
    2d7a:	0f b6       	in	r0, 0x3f	; 63
    2d7c:	f8 94       	cli
    2d7e:	de bf       	out	0x3e, r29	; 62
    2d80:	0f be       	out	0x3f, r0	; 63
    2d82:	cd bf       	out	0x3d, r28	; 61
    2d84:	ed 01       	movw	r28, r26
    2d86:	08 95       	ret

00002d88 <_exit>:
    2d88:	f8 94       	cli

00002d8a <__stop_program>:
    2d8a:	ff cf       	rjmp	.-2      	; 0x2d8a <__stop_program>
